/*!
 * Autoprefixer v10.0.2.0
 * https://github.com/postcss/autoprefixer
 * https://github.com/ai/autoprefixer-rails
 *
 * Copyright (C) 2013 Andrey Sitnik <andrey@sitnik.ru>
 * Released under the terms of MIT license
 */
var autoprefixer = (function (countryStatisticsService /*AH+*/) {
  'use strict';

  var global$1 = (typeof global !== "undefined" ? global :
    typeof self !== "undefined" ? self :
    typeof window !== "undefined" ? window : {});

  // shim for using process in browser
  // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

  function defaultSetTimout() {
      throw new Error('setTimeout has not been defined');
  }
  function defaultClearTimeout () {
      throw new Error('clearTimeout has not been defined');
  }
  var cachedSetTimeout = defaultSetTimout;
  var cachedClearTimeout = defaultClearTimeout;
  if (typeof global$1.setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
  }
  if (typeof global$1.clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
  }

  function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
          //normal enviroments in sane situations
          return setTimeout(fun, 0);
      }
      // if setTimeout wasn't available but was latter defined
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0);
      } catch(e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0);
          } catch(e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0);
          }
      }


  }
  function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
          //normal enviroments in sane situations
          return clearTimeout(marker);
      }
      // if clearTimeout wasn't available but was latter defined
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker);
      } catch (e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker);
          } catch (e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker);
          }
      }



  }
  var queue = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;

  function cleanUpNextTick() {
      if (!draining || !currentQueue) {
          return;
      }
      draining = false;
      if (currentQueue.length) {
          queue = currentQueue.concat(queue);
      } else {
          queueIndex = -1;
      }
      if (queue.length) {
          drainQueue();
      }
  }

  function drainQueue() {
      if (draining) {
          return;
      }
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;

      var len = queue.length;
      while(len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
              if (currentQueue) {
                  currentQueue[queueIndex].run();
              }
          }
          queueIndex = -1;
          len = queue.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
  }
  function nextTick(fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
          }
      }
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
      }
  }
  // v8 likes predictible objects
  function Item(fun, array) {
      this.fun = fun;
      this.array = array;
  }
  Item.prototype.run = function () {
      this.fun.apply(null, this.array);
  };
  var title = 'browser';
  var platform = 'browser';
  var browser = true;
  var env = {};
  var argv = [];
  var version = ''; // empty string to avoid regexp issues
  var versions = {};
  var release = {};
  var config = {};

  function noop() {}

  var on = noop;
  var addListener = noop;
  var once = noop;
  var off = noop;
  var removeListener = noop;
  var removeAllListeners = noop;
  var emit = noop;

  function binding(name) {
      throw new Error('process.binding is not supported');
  }

  function cwd () { return '/' }
  function chdir (dir) {
      throw new Error('process.chdir is not supported');
  }function umask() { return 0; }

  // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
  var performance = global$1.performance || {};
  var performanceNow =
    performance.now        ||
    performance.mozNow     ||
    performance.msNow      ||
    performance.oNow       ||
    performance.webkitNow  ||
    function(){ return (new Date()).getTime() };

  // generate timestamp or delta
  // see http://nodejs.org/api/process.html#process_process_hrtime
  function hrtime(previousTimestamp){
    var clocktime = performanceNow.call(performance)*1e-3;
    var seconds = Math.floor(clocktime);
    var nanoseconds = Math.floor((clocktime%1)*1e9);
    if (previousTimestamp) {
      seconds = seconds - previousTimestamp[0];
      nanoseconds = nanoseconds - previousTimestamp[1];
      if (nanoseconds<0) {
        seconds--;
        nanoseconds += 1e9;
      }
    }
    return [seconds,nanoseconds]
  }

  var startTime = new Date();
  function uptime() {
    var currentTime = new Date();
    var dif = currentTime - startTime;
    return dif / 1000;
  }

  var browser$1 = {
    nextTick: nextTick,
    title: title,
    browser: browser,
    env: env,
    argv: argv,
    version: version,
    versions: versions,
    on: on,
    addListener: addListener,
    once: once,
    off: off,
    removeListener: removeListener,
    removeAllListeners: removeAllListeners,
    emit: emit,
    binding: binding,
    cwd: cwd,
    chdir: chdir,
    umask: umask,
    hrtime: hrtime,
    platform: platform,
    release: release,
    config: config,
    uptime: uptime
  };

  var _nodeResolve_empty = {};

  var _nodeResolve_empty$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': _nodeResolve_empty
  });

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn, basedir, module) {
  	return module = {
  		path: basedir,
  		exports: {},
  		require: function (path, base) {
  			return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
  		}
  	}, fn(module, module.exports), module.exports;
  }

  function getAugmentedNamespace(n) {
  	if (n.__esModule) return n;
  	var a = Object.defineProperty({}, '__esModule', {value: true});
  	Object.keys(n).forEach(function (k) {
  		var d = Object.getOwnPropertyDescriptor(n, k);
  		Object.defineProperty(a, k, d.get ? d : {
  			enumerable: true,
  			get: function () {
  				return n[k];
  			}
  		});
  	});
  	return a;
  }

  function commonjsRequire () {
  	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
  }

  var colorette = /*@__PURE__*/getAugmentedNamespace(_nodeResolve_empty$1);

  let { red, bold, gray, options: colorette$1 } = colorette;



  class CssSyntaxError extends Error {
    constructor (message, line, column, source, file, plugin) {
      super(message);
      this.name = 'CssSyntaxError';
      this.reason = message;

      if (file) {
        this.file = file;
      }
      if (source) {
        this.source = source;
      }
      if (plugin) {
        this.plugin = plugin;
      }
      if (typeof line !== 'undefined' && typeof column !== 'undefined') {
        this.line = line;
        this.column = column;
      }

      this.setMessage();

      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, CssSyntaxError);
      }
    }

    setMessage () {
      this.message = this.plugin ? this.plugin + ': ' : '';
      this.message += this.file ? this.file : '<css input>';
      if (typeof this.line !== 'undefined') {
        this.message += ':' + this.line + ':' + this.column;
      }
      this.message += ': ' + this.reason;
    }

    showSourceCode (color) {
      if (!this.source) return ''

      let css = this.source;
      if (color == null) color = null;
      if (colorette) {
        if (color) css = colorette(css);
      }

      let lines = css.split(/\r?\n/);
      let start = Math.max(this.line - 3, 0);
      let end = Math.min(this.line + 2, lines.length);

      let maxWidth = String(end).length;

      let mark, aside;
      if (color) {
        mark = text => bold(red(text));
        aside = text => gray(text);
      } else {
        mark = aside = str => str;
      }

      return lines
        .slice(start, end)
        .map((line, index) => {
          let number = start + 1 + index;
          let gutter = ' ' + (' ' + number).slice(-maxWidth) + ' | ';
          if (number === this.line) {
            let spacing =
              aside(gutter.replace(/\d/g, ' ')) +
              line.slice(0, this.column - 1).replace(/[^\t]/g, ' ');
            return mark('>') + aside(gutter) + line + '\n ' + spacing + mark('^')
          }
          return ' ' + aside(gutter) + line
        })
        .join('\n')
    }

    toString () {
      let code = this.showSourceCode();
      if (code) {
        code = '\n\n' + code + '\n';
      }
      return this.name + ': ' + this.message + code
    }
  }

  var cssSyntaxError = CssSyntaxError;

  const DEFAULT_RAW = {
    colon: ': ',
    indent: '    ',
    beforeDecl: '\n',
    beforeRule: '\n',
    beforeOpen: ' ',
    beforeClose: '\n',
    beforeComment: '\n',
    after: '\n',
    emptyBody: '',
    commentLeft: ' ',
    commentRight: ' ',
    semicolon: false
  };

  function capitalize (str) {
    return str[0].toUpperCase() + str.slice(1)
  }

  class Stringifier {
    constructor (builder) {
      this.builder = builder;
    }

    stringify (node, semicolon) {
      this[node.type](node, semicolon);
    }

    root (node) {
      this.root = node;
      this.body(node);
      if (node.raws.after) this.builder(node.raws.after);
    }

    comment (node) {
      let left = this.raw(node, 'left', 'commentLeft');
      let right = this.raw(node, 'right', 'commentRight');
      this.builder('/*' + left + node.text + right + '*/', node);
    }

    decl (node, semicolon) {
      let between = this.raw(node, 'between', 'colon');
      let string = node.prop + between + this.rawValue(node, 'value');

      if (node.important) {
        string += node.raws.important || ' !important';
      }

      if (semicolon) string += ';';
      this.builder(string, node);
    }

    rule (node) {
      this.block(node, this.rawValue(node, 'selector'));
      if (node.raws.ownSemicolon) {
        this.builder(node.raws.ownSemicolon, node, 'end');
      }
    }

    atrule (node, semicolon) {
      let name = '@' + node.name;
      let params = node.params ? this.rawValue(node, 'params') : '';

      if (typeof node.raws.afterName !== 'undefined') {
        name += node.raws.afterName;
      } else if (params) {
        name += ' ';
      }

      if (node.nodes) {
        this.block(node, name + params);
      } else {
        let end = (node.raws.between || '') + (semicolon ? ';' : '');
        this.builder(name + params + end, node);
      }
    }

    body (node) {
      let last = node.nodes.length - 1;
      while (last > 0) {
        if (node.nodes[last].type !== 'comment') break
        last -= 1;
      }

      let semicolon = this.raw(node, 'semicolon');
      for (let i = 0; i < node.nodes.length; i++) {
        let child = node.nodes[i];
        let before = this.raw(child, 'before');
        if (before) this.builder(before);
        this.stringify(child, last !== i || semicolon);
      }
    }

    block (node, start) {
      let between = this.raw(node, 'between', 'beforeOpen');
      this.builder(start + between + '{', node, 'start');

      let after;
      if (node.nodes && node.nodes.length) {
        this.body(node);
        after = this.raw(node, 'after');
      } else {
        after = this.raw(node, 'after', 'emptyBody');
      }

      if (after) this.builder(after);
      this.builder('}', node, 'end');
    }

    raw (node, own, detect) {
      let value;
      if (!detect) detect = own;

      // Already had
      if (own) {
        value = node.raws[own];
        if (typeof value !== 'undefined') return value
      }

      let parent = node.parent;

      // Hack for first rule in CSS
      if (detect === 'before') {
        if (!parent || (parent.type === 'root' && parent.first === node)) {
          return ''
        }
      }

      // Floating child without parent
      if (!parent) return DEFAULT_RAW[detect]

      // Detect style by other nodes
      let root = node.root();
      if (!root.rawCache) root.rawCache = {};
      if (typeof root.rawCache[detect] !== 'undefined') {
        return root.rawCache[detect]
      }

      if (detect === 'before' || detect === 'after') {
        return this.beforeAfter(node, detect)
      } else {
        let method = 'raw' + capitalize(detect);
        if (this[method]) {
          value = this[method](root, node);
        } else {
          root.walk(i => {
            value = i.raws[own];
            if (typeof value !== 'undefined') return false
          });
        }
      }

      if (typeof value === 'undefined') value = DEFAULT_RAW[detect];

      root.rawCache[detect] = value;
      return value
    }

    rawSemicolon (root) {
      let value;
      root.walk(i => {
        if (i.nodes && i.nodes.length && i.last.type === 'decl') {
          value = i.raws.semicolon;
          if (typeof value !== 'undefined') return false
        }
      });
      return value
    }

    rawEmptyBody (root) {
      let value;
      root.walk(i => {
        if (i.nodes && i.nodes.length === 0) {
          value = i.raws.after;
          if (typeof value !== 'undefined') return false
        }
      });
      return value
    }

    rawIndent (root) {
      if (root.raws.indent) return root.raws.indent
      let value;
      root.walk(i => {
        let p = i.parent;
        if (p && p !== root && p.parent && p.parent === root) {
          if (typeof i.raws.before !== 'undefined') {
            let parts = i.raws.before.split('\n');
            value = parts[parts.length - 1];
            value = value.replace(/\S/g, '');
            return false
          }
        }
      });
      return value
    }

    rawBeforeComment (root, node) {
      let value;
      root.walkComments(i => {
        if (typeof i.raws.before !== 'undefined') {
          value = i.raws.before;
          if (value.includes('\n')) {
            value = value.replace(/[^\n]+$/, '');
          }
          return false
        }
      });
      if (typeof value === 'undefined') {
        value = this.raw(node, null, 'beforeDecl');
      } else if (value) {
        value = value.replace(/\S/g, '');
      }
      return value
    }

    rawBeforeDecl (root, node) {
      let value;
      root.walkDecls(i => {
        if (typeof i.raws.before !== 'undefined') {
          value = i.raws.before;
          if (value.includes('\n')) {
            value = value.replace(/[^\n]+$/, '');
          }
          return false
        }
      });
      if (typeof value === 'undefined') {
        value = this.raw(node, null, 'beforeRule');
      } else if (value) {
        value = value.replace(/\S/g, '');
      }
      return value
    }

    rawBeforeRule (root) {
      let value;
      root.walk(i => {
        if (i.nodes && (i.parent !== root || root.first !== i)) {
          if (typeof i.raws.before !== 'undefined') {
            value = i.raws.before;
            if (value.includes('\n')) {
              value = value.replace(/[^\n]+$/, '');
            }
            return false
          }
        }
      });
      if (value) value = value.replace(/\S/g, '');
      return value
    }

    rawBeforeClose (root) {
      let value;
      root.walk(i => {
        if (i.nodes && i.nodes.length > 0) {
          if (typeof i.raws.after !== 'undefined') {
            value = i.raws.after;
            if (value.includes('\n')) {
              value = value.replace(/[^\n]+$/, '');
            }
            return false
          }
        }
      });
      if (value) value = value.replace(/\S/g, '');
      return value
    }

    rawBeforeOpen (root) {
      let value;
      root.walk(i => {
        if (i.type !== 'decl') {
          value = i.raws.between;
          if (typeof value !== 'undefined') return false
        }
      });
      return value
    }

    rawColon (root) {
      let value;
      root.walkDecls(i => {
        if (typeof i.raws.between !== 'undefined') {
          value = i.raws.between.replace(/[^\s:]/g, '');
          return false
        }
      });
      return value
    }

    beforeAfter (node, detect) {
      let value;
      if (node.type === 'decl') {
        value = this.raw(node, null, 'beforeDecl');
      } else if (node.type === 'comment') {
        value = this.raw(node, null, 'beforeComment');
      } else if (detect === 'before') {
        value = this.raw(node, null, 'beforeRule');
      } else {
        value = this.raw(node, null, 'beforeClose');
      }

      let buf = node.parent;
      let depth = 0;
      while (buf && buf.type !== 'root') {
        depth += 1;
        buf = buf.parent;
      }

      if (value.includes('\n')) {
        let indent = this.raw(node, null, 'indent');
        if (indent.length) {
          for (let step = 0; step < depth; step++) value += indent;
        }
      }

      return value
    }

    rawValue (node, prop) {
      let value = node[prop];
      let raw = node.raws[prop];
      if (raw && raw.value === value) {
        return raw.raw
      }

      return value
    }
  }

  var stringifier = Stringifier;

  var isClean = Symbol('isClean');

  var symbols = {
  	isClean: isClean
  };

  var stringify = function stringify (node, builder) {
    let str = new stringifier(builder);
    str.stringify(node);
  };

  let { isClean: isClean$1 } = symbols;


  function cloneNode (obj, parent) {
    let cloned = new obj.constructor();

    for (let i in obj) {
      if (!Object.prototype.hasOwnProperty.call(obj, i)) {
        // istanbul ignore next
        continue
      }
      if (i === 'proxyCache') continue
      let value = obj[i];
      let type = typeof value;

      if (i === 'parent' && type === 'object') {
        if (parent) cloned[i] = parent;
      } else if (i === 'source') {
        cloned[i] = value;
      } else if (Array.isArray(value)) {
        cloned[i] = value.map(j => cloneNode(j, cloned));
      } else {
        if (type === 'object' && value !== null) value = cloneNode(value);
        cloned[i] = value;
      }
    }

    return cloned
  }

  class Node {
    constructor (defaults = {}) {
      this.raws = {};
      this[isClean$1] = false;

      for (let name in defaults) {
        if (name === 'nodes') {
          this.nodes = [];
          for (let node of defaults[name]) {
            if (typeof node.clone === 'function') {
              this.append(node.clone());
            } else {
              this.append(node);
            }
          }
        } else {
          this[name] = defaults[name];
        }
      }
    }

    error (message, opts = {}) {
      if (this.source) {
        let pos = this.positionBy(opts);
        return this.source.input.error(message, pos.line, pos.column, opts)
      }
      return new cssSyntaxError(message)
    }

    warn (result, text, opts) {
      let data = { node: this };
      for (let i in opts) data[i] = opts[i];
      return result.warn(text, data)
    }

    remove () {
      if (this.parent) {
        this.parent.removeChild(this);
      }
      this.parent = undefined;
      return this
    }

    toString (stringifier = stringify) {
      if (stringifier.stringify) stringifier = stringifier.stringify;
      let result = '';
      stringifier(this, i => {
        result += i;
      });
      return result
    }

    clone (overrides = {}) {
      let cloned = cloneNode(this);
      for (let name in overrides) {
        cloned[name] = overrides[name];
      }
      return cloned
    }

    cloneBefore (overrides = {}) {
      let cloned = this.clone(overrides);
      this.parent.insertBefore(this, cloned);
      return cloned
    }

    cloneAfter (overrides = {}) {
      let cloned = this.clone(overrides);
      this.parent.insertAfter(this, cloned);
      return cloned
    }

    replaceWith (...nodes) {
      if (this.parent) {
        let bookmark = this;
        let foundSelf = false;
        for (let node of nodes) {
          if (node === this) {
            foundSelf = true;
          } else if (foundSelf) {
            this.parent.insertAfter(bookmark, node);
            bookmark = node;
          } else {
            this.parent.insertBefore(bookmark, node);
          }
        }

        if (!foundSelf) {
          this.remove();
        }
      }

      return this
    }

    next () {
      if (!this.parent) return undefined
      let index = this.parent.index(this);
      return this.parent.nodes[index + 1]
    }

    prev () {
      if (!this.parent) return undefined
      let index = this.parent.index(this);
      return this.parent.nodes[index - 1]
    }

    before (add) {
      this.parent.insertBefore(this, add);
      return this
    }

    after (add) {
      this.parent.insertAfter(this, add);
      return this
    }

    root () {
      let result = this;
      while (result.parent) result = result.parent;
      return result
    }

    raw (prop, defaultType) {
      let str = new stringifier();
      return str.raw(this, prop, defaultType)
    }

    cleanRaws (keepBetween) {
      delete this.raws.before;
      delete this.raws.after;
      if (!keepBetween) delete this.raws.between;
    }

    toJSON () {
      let fixed = {};

      for (let name in this) {
        if (!Object.prototype.hasOwnProperty.call(this, name)) {
          // istanbul ignore next
          continue
        }
        if (name === 'parent') continue
        let value = this[name];

        if (Array.isArray(value)) {
          fixed[name] = value.map(i => {
            if (typeof i === 'object' && i.toJSON) {
              return i.toJSON()
            } else {
              return i
            }
          });
        } else if (typeof value === 'object' && value.toJSON) {
          fixed[name] = value.toJSON();
        } else {
          fixed[name] = value;
        }
      }

      return fixed
    }

    positionInside (index) {
      let string = this.toString();
      let column = this.source.start.column;
      let line = this.source.start.line;

      for (let i = 0; i < index; i++) {
        if (string[i] === '\n') {
          column = 1;
          line += 1;
        } else {
          column += 1;
        }
      }

      return { line, column }
    }

    positionBy (opts) {
      let pos = this.source.start;
      if (opts.index) {
        pos = this.positionInside(opts.index);
      } else if (opts.word) {
        let index = this.toString().indexOf(opts.word);
        if (index !== -1) pos = this.positionInside(index);
      }
      return pos
    }

    getProxyProcessor () {
      return {
        set (node, prop, value) {
          if (node[prop] === value) return true
          node[prop] = value;
          if (
            prop === 'prop' ||
            prop === 'value' ||
            prop === 'name' ||
            prop === 'params' ||
            prop === 'important' ||
            prop === 'text'
          ) {
            node.markDirty();
          }
          return true
        },

        get (node, prop) {
          if (prop === 'proxyOf') {
            return node
          } else if (prop === 'root') {
            return () => node.root().toProxy()
          } else {
            return node[prop]
          }
        }
      }
    }

    toProxy () {
      if (!this.proxyCache) {
        this.proxyCache = new Proxy(this, this.getProxyProcessor());
      }
      return this.proxyCache
    }

    addToError (error) {
      error.postcssNode = this;
      if (error.stack && this.source && /\n\s{4}at /.test(error.stack)) {
        let s = this.source;
        error.stack = error.stack.replace(
          /\n\s{4}at /,
          `$&${s.input.from}:${s.start.line}:${s.start.column}$&`
        );
      }
      return error
    }

    markDirty () {
      if (this[isClean$1]) {
        this[isClean$1] = false;
        let next = this;
        while ((next = next.parent)) {
          next[isClean$1] = false;
        }
      }
    }

    get proxyOf () {
      return this
    }
  }

  var node_1 = Node;

  class Declaration extends node_1 {
    constructor (defaults) {
      if (
        defaults &&
        typeof defaults.value !== 'undefined' &&
        typeof defaults.value !== 'string'
      ) {
        defaults = { ...defaults, value: String(defaults.value) };
      }
      super(defaults);
      this.type = 'decl';
    }

    get variable () {
      return this.prop.startsWith('--') || this.prop[0] === '$'
    }
  }

  var declaration = Declaration;

  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
  var inited = false;
  function init () {
    inited = true;
    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }

    revLookup['-'.charCodeAt(0)] = 62;
    revLookup['_'.charCodeAt(0)] = 63;
  }

  function toByteArray (b64) {
    if (!inited) {
      init();
    }
    var i, j, l, tmp, placeHolders, arr;
    var len = b64.length;

    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4')
    }

    // the number of equal signs (place holders)
    // if there are two placeholders, than the two characters before it
    // represent one byte
    // if there is only one, then the three characters before it represent 2 bytes
    // this is just a cheap hack to not do indexOf twice
    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

    // base64 is 4/3 + up to two characters of the original data
    arr = new Arr(len * 3 / 4 - placeHolders);

    // if there are placeholders, only get up to the last complete 4 chars
    l = placeHolders > 0 ? len - 4 : len;

    var L = 0;

    for (i = 0, j = 0; i < l; i += 4, j += 3) {
      tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
      arr[L++] = (tmp >> 16) & 0xFF;
      arr[L++] = (tmp >> 8) & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    if (placeHolders === 2) {
      tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
      arr[L++] = tmp & 0xFF;
    } else if (placeHolders === 1) {
      tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
      arr[L++] = (tmp >> 8) & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    return arr
  }

  function tripletToBase64 (num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
  }

  function encodeChunk (uint8, start, end) {
    var tmp;
    var output = [];
    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
      output.push(tripletToBase64(tmp));
    }
    return output.join('')
  }

  function fromByteArray (uint8) {
    if (!inited) {
      init();
    }
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
    var output = '';
    var parts = [];
    var maxChunkLength = 16383; // must be multiple of 3

    // go through the array every three bytes, we'll deal with trailing stuff later
    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
    }

    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      output += lookup[tmp >> 2];
      output += lookup[(tmp << 4) & 0x3F];
      output += '==';
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
      output += lookup[tmp >> 10];
      output += lookup[(tmp >> 4) & 0x3F];
      output += lookup[(tmp << 2) & 0x3F];
      output += '=';
    }

    parts.push(output);

    return parts.join('')
  }

  function read (buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? (nBytes - 1) : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];

    i += d;

    e = s & ((1 << (-nBits)) - 1);
    s >>= (-nBits);
    nBits += eLen;
    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    m = e & ((1 << (-nBits)) - 1);
    e >>= (-nBits);
    nBits += mLen;
    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : ((s ? -1 : 1) * Infinity)
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
  }

  function write (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
    var i = isLE ? 0 : (nBytes - 1);
    var d = isLE ? 1 : -1;
    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

    value = Math.abs(value);

    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }

      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }

    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

    e = (e << mLen) | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

    buffer[offset + i - d] |= s * 128;
  }

  var toString = {}.toString;

  var isArray = Array.isArray || function (arr) {
    return toString.call(arr) == '[object Array]';
  };

  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   */

  var INSPECT_MAX_BYTES = 50;

  /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Use Object implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * Due to various browser bugs, sometimes the Object implementation will be used even
   * when the browser supports typed arrays.
   *
   * Note:
   *
   *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
   *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
   *
   *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
   *
   *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
   *     incorrect length in some situations.

   * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
   * get the Object implementation, which is slower but behaves correctly.
   */
  Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
    ? global$1.TYPED_ARRAY_SUPPORT
    : true;

  function kMaxLength () {
    return Buffer.TYPED_ARRAY_SUPPORT
      ? 0x7fffffff
      : 0x3fffffff
  }

  function createBuffer (that, length) {
    if (kMaxLength() < length) {
      throw new RangeError('Invalid typed array length')
    }
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = new Uint8Array(length);
      that.__proto__ = Buffer.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      if (that === null) {
        that = new Buffer(length);
      }
      that.length = length;
    }

    return that
  }

  /**
   * The Buffer constructor returns instances of `Uint8Array` that have their
   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
   * returns a single octet.
   *
   * The `Uint8Array` prototype remains unmodified.
   */

  function Buffer (arg, encodingOrOffset, length) {
    if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
      return new Buffer(arg, encodingOrOffset, length)
    }

    // Common case.
    if (typeof arg === 'number') {
      if (typeof encodingOrOffset === 'string') {
        throw new Error(
          'If encoding is specified then the first argument must be a string'
        )
      }
      return allocUnsafe(this, arg)
    }
    return from(this, arg, encodingOrOffset, length)
  }

  Buffer.poolSize = 8192; // not used by this implementation

  // TODO: Legacy, not needed anymore. Remove in next major version.
  Buffer._augment = function (arr) {
    arr.__proto__ = Buffer.prototype;
    return arr
  };

  function from (that, value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('"value" argument must not be a number')
    }

    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
      return fromArrayBuffer(that, value, encodingOrOffset, length)
    }

    if (typeof value === 'string') {
      return fromString(that, value, encodingOrOffset)
    }

    return fromObject(that, value)
  }

  /**
   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
   * if value is a number.
   * Buffer.from(str[, encoding])
   * Buffer.from(array)
   * Buffer.from(buffer)
   * Buffer.from(arrayBuffer[, byteOffset[, length]])
   **/
  Buffer.from = function (value, encodingOrOffset, length) {
    return from(null, value, encodingOrOffset, length)
  };

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    Buffer.prototype.__proto__ = Uint8Array.prototype;
    Buffer.__proto__ = Uint8Array;
  }

  function assertSize (size) {
    if (typeof size !== 'number') {
      throw new TypeError('"size" argument must be a number')
    } else if (size < 0) {
      throw new RangeError('"size" argument must not be negative')
    }
  }

  function alloc (that, size, fill, encoding) {
    assertSize(size);
    if (size <= 0) {
      return createBuffer(that, size)
    }
    if (fill !== undefined) {
      // Only pay attention to encoding if it's a string. This
      // prevents accidentally sending in a number that would
      // be interpretted as a start offset.
      return typeof encoding === 'string'
        ? createBuffer(that, size).fill(fill, encoding)
        : createBuffer(that, size).fill(fill)
    }
    return createBuffer(that, size)
  }

  /**
   * Creates a new filled Buffer instance.
   * alloc(size[, fill[, encoding]])
   **/
  Buffer.alloc = function (size, fill, encoding) {
    return alloc(null, size, fill, encoding)
  };

  function allocUnsafe (that, size) {
    assertSize(size);
    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
    if (!Buffer.TYPED_ARRAY_SUPPORT) {
      for (var i = 0; i < size; ++i) {
        that[i] = 0;
      }
    }
    return that
  }

  /**
   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
   * */
  Buffer.allocUnsafe = function (size) {
    return allocUnsafe(null, size)
  };
  /**
   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
   */
  Buffer.allocUnsafeSlow = function (size) {
    return allocUnsafe(null, size)
  };

  function fromString (that, string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
      encoding = 'utf8';
    }

    if (!Buffer.isEncoding(encoding)) {
      throw new TypeError('"encoding" must be a valid string encoding')
    }

    var length = byteLength(string, encoding) | 0;
    that = createBuffer(that, length);

    var actual = that.write(string, encoding);

    if (actual !== length) {
      // Writing a hex string, for example, that contains invalid characters will
      // cause everything after the first invalid character to be ignored. (e.g.
      // 'abxxcd' will be treated as 'ab')
      that = that.slice(0, actual);
    }

    return that
  }

  function fromArrayLike (that, array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    that = createBuffer(that, length);
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255;
    }
    return that
  }

  function fromArrayBuffer (that, array, byteOffset, length) {
    array.byteLength; // this throws if `array` is not a valid ArrayBuffer

    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('\'offset\' is out of bounds')
    }

    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('\'length\' is out of bounds')
    }

    if (byteOffset === undefined && length === undefined) {
      array = new Uint8Array(array);
    } else if (length === undefined) {
      array = new Uint8Array(array, byteOffset);
    } else {
      array = new Uint8Array(array, byteOffset, length);
    }

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = array;
      that.__proto__ = Buffer.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      that = fromArrayLike(that, array);
    }
    return that
  }

  function fromObject (that, obj) {
    if (internalIsBuffer(obj)) {
      var len = checked(obj.length) | 0;
      that = createBuffer(that, len);

      if (that.length === 0) {
        return that
      }

      obj.copy(that, 0, 0, len);
      return that
    }

    if (obj) {
      if ((typeof ArrayBuffer !== 'undefined' &&
          obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
        if (typeof obj.length !== 'number' || isnan(obj.length)) {
          return createBuffer(that, 0)
        }
        return fromArrayLike(that, obj)
      }

      if (obj.type === 'Buffer' && isArray(obj.data)) {
        return fromArrayLike(that, obj.data)
      }
    }

    throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
  }

  function checked (length) {
    // Note: cannot use `length < kMaxLength()` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= kMaxLength()) {
      throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                           'size: 0x' + kMaxLength().toString(16) + ' bytes')
    }
    return length | 0
  }
  Buffer.isBuffer = isBuffer;
  function internalIsBuffer (b) {
    return !!(b != null && b._isBuffer)
  }

  Buffer.compare = function compare (a, b) {
    if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
      throw new TypeError('Arguments must be Buffers')
    }

    if (a === b) return 0

    var x = a.length;
    var y = b.length;

    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  };

  Buffer.isEncoding = function isEncoding (encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'latin1':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true
      default:
        return false
    }
  };

  Buffer.concat = function concat (list, length) {
    if (!isArray(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }

    if (list.length === 0) {
      return Buffer.alloc(0)
    }

    var i;
    if (length === undefined) {
      length = 0;
      for (i = 0; i < list.length; ++i) {
        length += list[i].length;
      }
    }

    var buffer = Buffer.allocUnsafe(length);
    var pos = 0;
    for (i = 0; i < list.length; ++i) {
      var buf = list[i];
      if (!internalIsBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }
      buf.copy(buffer, pos);
      pos += buf.length;
    }
    return buffer
  };

  function byteLength (string, encoding) {
    if (internalIsBuffer(string)) {
      return string.length
    }
    if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
        (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
      return string.byteLength
    }
    if (typeof string !== 'string') {
      string = '' + string;
    }

    var len = string.length;
    if (len === 0) return 0

    // Use a for loop to avoid recursion
    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'latin1':
        case 'binary':
          return len
        case 'utf8':
        case 'utf-8':
        case undefined:
          return utf8ToBytes(string).length
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2
        case 'hex':
          return len >>> 1
        case 'base64':
          return base64ToBytes(string).length
        default:
          if (loweredCase) return utf8ToBytes(string).length // assume utf8
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer.byteLength = byteLength;

  function slowToString (encoding, start, end) {
    var loweredCase = false;

    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.

    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) {
      start = 0;
    }
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) {
      return ''
    }

    if (end === undefined || end > this.length) {
      end = this.length;
    }

    if (end <= 0) {
      return ''
    }

    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;

    if (end <= start) {
      return ''
    }

    if (!encoding) encoding = 'utf8';

    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end)

        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end)

        case 'ascii':
          return asciiSlice(this, start, end)

        case 'latin1':
        case 'binary':
          return latin1Slice(this, start, end)

        case 'base64':
          return base64Slice(this, start, end)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = (encoding + '').toLowerCase();
          loweredCase = true;
      }
    }
  }

  // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
  // Buffer instances.
  Buffer.prototype._isBuffer = true;

  function swap (b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
  }

  Buffer.prototype.swap16 = function swap16 () {
    var len = this.length;
    if (len % 2 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 16-bits')
    }
    for (var i = 0; i < len; i += 2) {
      swap(this, i, i + 1);
    }
    return this
  };

  Buffer.prototype.swap32 = function swap32 () {
    var len = this.length;
    if (len % 4 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 32-bits')
    }
    for (var i = 0; i < len; i += 4) {
      swap(this, i, i + 3);
      swap(this, i + 1, i + 2);
    }
    return this
  };

  Buffer.prototype.swap64 = function swap64 () {
    var len = this.length;
    if (len % 8 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 64-bits')
    }
    for (var i = 0; i < len; i += 8) {
      swap(this, i, i + 7);
      swap(this, i + 1, i + 6);
      swap(this, i + 2, i + 5);
      swap(this, i + 3, i + 4);
    }
    return this
  };

  Buffer.prototype.toString = function toString () {
    var length = this.length | 0;
    if (length === 0) return ''
    if (arguments.length === 0) return utf8Slice(this, 0, length)
    return slowToString.apply(this, arguments)
  };

  Buffer.prototype.equals = function equals (b) {
    if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
    if (this === b) return true
    return Buffer.compare(this, b) === 0
  };

  Buffer.prototype.inspect = function inspect () {
    var str = '';
    var max = INSPECT_MAX_BYTES;
    if (this.length > 0) {
      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
      if (this.length > max) str += ' ... ';
    }
    return '<Buffer ' + str + '>'
  };

  Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
    if (!internalIsBuffer(target)) {
      throw new TypeError('Argument must be a Buffer')
    }

    if (start === undefined) {
      start = 0;
    }
    if (end === undefined) {
      end = target ? target.length : 0;
    }
    if (thisStart === undefined) {
      thisStart = 0;
    }
    if (thisEnd === undefined) {
      thisEnd = this.length;
    }

    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError('out of range index')
    }

    if (thisStart >= thisEnd && start >= end) {
      return 0
    }
    if (thisStart >= thisEnd) {
      return -1
    }
    if (start >= end) {
      return 1
    }

    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;

    if (this === target) return 0

    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);

    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);

    for (var i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  };

  // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
  //
  // Arguments:
  // - buffer - a Buffer to search
  // - val - a string, Buffer, or number
  // - byteOffset - an index into `buffer`; will be clamped to an int32
  // - encoding - an optional encoding, relevant is val is a string
  // - dir - true for indexOf, false for lastIndexOf
  function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1

    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) {
      byteOffset = 0x7fffffff;
    } else if (byteOffset < -0x80000000) {
      byteOffset = -0x80000000;
    }
    byteOffset = +byteOffset;  // Coerce to Number.
    if (isNaN(byteOffset)) {
      // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
      byteOffset = dir ? 0 : (buffer.length - 1);
    }

    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
      if (dir) return -1
      else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
      if (dir) byteOffset = 0;
      else return -1
    }

    // Normalize val
    if (typeof val === 'string') {
      val = Buffer.from(val, encoding);
    }

    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (internalIsBuffer(val)) {
      // Special case: looking for empty string/buffer always fails
      if (val.length === 0) {
        return -1
      }
      return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
    } else if (typeof val === 'number') {
      val = val & 0xFF; // Search for a byte value [0-255]
      if (Buffer.TYPED_ARRAY_SUPPORT &&
          typeof Uint8Array.prototype.indexOf === 'function') {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
        }
      }
      return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
    }

    throw new TypeError('val must be string, number or Buffer')
  }

  function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;

    if (encoding !== undefined) {
      encoding = String(encoding).toLowerCase();
      if (encoding === 'ucs2' || encoding === 'ucs-2' ||
          encoding === 'utf16le' || encoding === 'utf-16le') {
        if (arr.length < 2 || val.length < 2) {
          return -1
        }
        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }

    function read (buf, i) {
      if (indexSize === 1) {
        return buf[i]
      } else {
        return buf.readUInt16BE(i * indexSize)
      }
    }

    var i;
    if (dir) {
      var foundIndex = -1;
      for (i = byteOffset; i < arrLength; i++) {
        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1) foundIndex = i;
          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
        } else {
          if (foundIndex !== -1) i -= i - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
      for (i = byteOffset; i >= 0; i--) {
        var found = true;
        for (var j = 0; j < valLength; j++) {
          if (read(arr, i + j) !== read(val, j)) {
            found = false;
            break
          }
        }
        if (found) return i
      }
    }

    return -1
  }

  Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1
  };

  Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
  };

  Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
  };

  function hexWrite (buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
      if (length > remaining) {
        length = remaining;
      }
    }

    // must be an even number of digits
    var strLen = string.length;
    if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

    if (length > strLen / 2) {
      length = strLen / 2;
    }
    for (var i = 0; i < length; ++i) {
      var parsed = parseInt(string.substr(i * 2, 2), 16);
      if (isNaN(parsed)) return i
      buf[offset + i] = parsed;
    }
    return i
  }

  function utf8Write (buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
  }

  function asciiWrite (buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length)
  }

  function latin1Write (buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length)
  }

  function base64Write (buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length)
  }

  function ucs2Write (buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
  }

  Buffer.prototype.write = function write (string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
      encoding = 'utf8';
      length = this.length;
      offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset;
      length = this.length;
      offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
      offset = offset | 0;
      if (isFinite(length)) {
        length = length | 0;
        if (encoding === undefined) encoding = 'utf8';
      } else {
        encoding = length;
        length = undefined;
      }
    // legacy write(string, encoding, offset, length) - remove in v0.13
    } else {
      throw new Error(
        'Buffer.write(string, encoding, offset[, length]) is no longer supported'
      )
    }

    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;

    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
      throw new RangeError('Attempt to write outside buffer bounds')
    }

    if (!encoding) encoding = 'utf8';

    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length)

        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length)

        case 'ascii':
          return asciiWrite(this, string, offset, length)

        case 'latin1':
        case 'binary':
          return latin1Write(this, string, offset, length)

        case 'base64':
          // Warning: maxLength not taken into account in base64Write
          return base64Write(this, string, offset, length)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };

  Buffer.prototype.toJSON = function toJSON () {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    }
  };

  function base64Slice (buf, start, end) {
    if (start === 0 && end === buf.length) {
      return fromByteArray(buf)
    } else {
      return fromByteArray(buf.slice(start, end))
    }
  }

  function utf8Slice (buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];

    var i = start;
    while (i < end) {
      var firstByte = buf[i];
      var codePoint = null;
      var bytesPerSequence = (firstByte > 0xEF) ? 4
        : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
        : 1;

      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint;

        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte;
            }
            break
          case 2:
            secondByte = buf[i + 1];
            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint;
              }
            }
            break
          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint;
              }
            }
            break
          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint;
              }
            }
        }
      }

      if (codePoint === null) {
        // we did not generate a valid codePoint so insert a
        // replacement char (U+FFFD) and advance only 1 byte
        codePoint = 0xFFFD;
        bytesPerSequence = 1;
      } else if (codePoint > 0xFFFF) {
        // encode to utf16 (surrogate pair dance)
        codePoint -= 0x10000;
        res.push(codePoint >>> 10 & 0x3FF | 0xD800);
        codePoint = 0xDC00 | codePoint & 0x3FF;
      }

      res.push(codePoint);
      i += bytesPerSequence;
    }

    return decodeCodePointsArray(res)
  }

  // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety
  var MAX_ARGUMENTS_LENGTH = 0x1000;

  function decodeCodePointsArray (codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    }

    // Decode in chunks to avoid "call stack size exceeded".
    var res = '';
    var i = 0;
    while (i < len) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
      );
    }
    return res
  }

  function asciiSlice (buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 0x7F);
    }
    return ret
  }

  function latin1Slice (buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i]);
    }
    return ret
  }

  function hexSlice (buf, start, end) {
    var len = buf.length;

    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;

    var out = '';
    for (var i = start; i < end; ++i) {
      out += toHex(buf[i]);
    }
    return out
  }

  function utf16leSlice (buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';
    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }
    return res
  }

  Buffer.prototype.slice = function slice (start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;

    if (start < 0) {
      start += len;
      if (start < 0) start = 0;
    } else if (start > len) {
      start = len;
    }

    if (end < 0) {
      end += len;
      if (end < 0) end = 0;
    } else if (end > len) {
      end = len;
    }

    if (end < start) end = start;

    var newBuf;
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      newBuf = this.subarray(start, end);
      newBuf.__proto__ = Buffer.prototype;
    } else {
      var sliceLen = end - start;
      newBuf = new Buffer(sliceLen, undefined);
      for (var i = 0; i < sliceLen; ++i) {
        newBuf[i] = this[i + start];
      }
    }

    return newBuf
  };

  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */
  function checkOffset (offset, ext, length) {
    if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
  }

  Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }

    return val
  };

  Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      checkOffset(offset, byteLength, this.length);
    }

    var val = this[offset + --byteLength];
    var mul = 1;
    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul;
    }

    return val
  };

  Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset]
  };

  Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | (this[offset + 1] << 8)
  };

  Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return (this[offset] << 8) | this[offset + 1]
  };

  Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return ((this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16)) +
        (this[offset + 3] * 0x1000000)
  };

  Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
  };

  Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    return val
  };

  Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    return val
  };

  Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return (this[offset])
    return ((0xff - this[offset] + 1) * -1)
  };

  Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | (this[offset + 1] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  };

  Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | (this[offset] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  };

  Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
  };

  Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
  };

  Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, true, 23, 4)
  };

  Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, false, 23, 4)
  };

  Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, true, 52, 8)
  };

  Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, false, 52, 8)
  };

  function checkInt (buf, value, offset, ext, max, min) {
    if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
  }

  Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    this[offset] = (value & 0xff);
    return offset + 1
  };

  function objectWriteUInt16 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffff + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
      buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
        (littleEndian ? i : 1 - i) * 8;
    }
  }

  Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2
  };

  Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2
  };

  function objectWriteUInt32 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffffffff + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
      buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
    }
  }

  Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset + 3] = (value >>> 24);
      this[offset + 2] = (value >>> 16);
      this[offset + 1] = (value >>> 8);
      this[offset] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4
  };

  Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4
  };

  Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = (value & 0xff);
    return offset + 1
  };

  Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2
  };

  Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2
  };

  Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
      this[offset + 2] = (value >>> 16);
      this[offset + 3] = (value >>> 24);
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4
  };

  Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (value < 0) value = 0xffffffff + value + 1;
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4
  };

  function checkIEEE754 (buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
    if (offset < 0) throw new RangeError('Index out of range')
  }

  function writeFloat (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4);
    }
    write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4
  }

  Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert)
  };

  Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert)
  };

  function writeDouble (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8);
    }
    write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8
  }

  Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert)
  };

  Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert)
  };

  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
  Buffer.prototype.copy = function copy (target, targetStart, start, end) {
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;

    // Copy 0 bytes; we're done
    if (end === start) return 0
    if (target.length === 0 || this.length === 0) return 0

    // Fatal error conditions
    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds')
    }
    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
    if (end < 0) throw new RangeError('sourceEnd out of bounds')

    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }

    var len = end - start;
    var i;

    if (this === target && start < targetStart && targetStart < end) {
      // descending copy from end
      for (i = len - 1; i >= 0; --i) {
        target[i + targetStart] = this[i + start];
      }
    } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
      // ascending copy from start
      for (i = 0; i < len; ++i) {
        target[i + targetStart] = this[i + start];
      }
    } else {
      Uint8Array.prototype.set.call(
        target,
        this.subarray(start, start + len),
        targetStart
      );
    }

    return len
  };

  // Usage:
  //    buffer.fill(number[, offset[, end]])
  //    buffer.fill(buffer[, offset[, end]])
  //    buffer.fill(string[, offset[, end]][, encoding])
  Buffer.prototype.fill = function fill (val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
      if (typeof start === 'string') {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === 'string') {
        encoding = end;
        end = this.length;
      }
      if (val.length === 1) {
        var code = val.charCodeAt(0);
        if (code < 256) {
          val = code;
        }
      }
      if (encoding !== undefined && typeof encoding !== 'string') {
        throw new TypeError('encoding must be a string')
      }
      if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding)
      }
    } else if (typeof val === 'number') {
      val = val & 255;
    }

    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError('Out of range index')
    }

    if (end <= start) {
      return this
    }

    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;

    if (!val) val = 0;

    var i;
    if (typeof val === 'number') {
      for (i = start; i < end; ++i) {
        this[i] = val;
      }
    } else {
      var bytes = internalIsBuffer(val)
        ? val
        : utf8ToBytes(new Buffer(val, encoding).toString());
      var len = bytes.length;
      for (i = 0; i < end - start; ++i) {
        this[i + start] = bytes[i % len];
      }
    }

    return this
  };

  // HELPER FUNCTIONS
  // ================

  var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

  function base64clean (str) {
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = stringtrim(str).replace(INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return ''
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while (str.length % 4 !== 0) {
      str = str + '=';
    }
    return str
  }

  function stringtrim (str) {
    if (str.trim) return str.trim()
    return str.replace(/^\s+|\s+$/g, '')
  }

  function toHex (n) {
    if (n < 16) return '0' + n.toString(16)
    return n.toString(16)
  }

  function utf8ToBytes (string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];

    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i);

      // is surrogate component
      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue
          }

          // valid lead
          leadSurrogate = codePoint;

          continue
        }

        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          leadSurrogate = codePoint;
          continue
        }

        // valid surrogate pair
        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
      }

      leadSurrogate = null;

      // encode utf8
      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break
        bytes.push(codePoint);
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break
        bytes.push(
          codePoint >> 0x6 | 0xC0,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break
        bytes.push(
          codePoint >> 0xC | 0xE0,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break
        bytes.push(
          codePoint >> 0x12 | 0xF0,
          codePoint >> 0xC & 0x3F | 0x80,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else {
        throw new Error('Invalid code point')
      }
    }

    return bytes
  }

  function asciiToBytes (str) {
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      // Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF);
    }
    return byteArray
  }

  function utf16leToBytes (str, units) {
    var c, hi, lo;
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0) break

      c = str.charCodeAt(i);
      hi = c >> 8;
      lo = c % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }

    return byteArray
  }


  function base64ToBytes (str) {
    return toByteArray(base64clean(str))
  }

  function blitBuffer (src, dst, offset, length) {
    for (var i = 0; i < length; ++i) {
      if ((i + offset >= dst.length) || (i >= src.length)) break
      dst[i + offset] = src[i];
    }
    return i
  }

  function isnan (val) {
    return val !== val // eslint-disable-line no-self-compare
  }


  // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
  // The _isBuffer check is for Safari 5-7 support, because it's missing
  // Object.prototype.constructor. Remove this eventually
  function isBuffer(obj) {
    return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
  }

  function isFastBuffer (obj) {
    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
  }

  // For Node v0.10 support. Remove this eventually.
  function isSlowBuffer (obj) {
    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
  }

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  // resolves . and .. elements in a path array with directory names there
  // must be no slashes, empty elements, or device names (c:\) in the array
  // (so also no leading and trailing slashes - it does not distinguish
  // relative and absolute paths)
  function normalizeArray(parts, allowAboveRoot) {
    // if the path tries to go above the root, `up` ends up > 0
    var up = 0;
    for (var i = parts.length - 1; i >= 0; i--) {
      var last = parts[i];
      if (last === '.') {
        parts.splice(i, 1);
      } else if (last === '..') {
        parts.splice(i, 1);
        up++;
      } else if (up) {
        parts.splice(i, 1);
        up--;
      }
    }

    // if the path is allowed to go above the root, restore leading ..s
    if (allowAboveRoot) {
      for (; up--; up) {
        parts.unshift('..');
      }
    }

    return parts;
  }

  // Split a filename into [root, dir, basename, ext], unix version
  // 'root' is just a slash, or nothing.
  var splitPathRe =
      /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
  var splitPath = function(filename) {
    return splitPathRe.exec(filename).slice(1);
  };

  // path.resolve([from ...], to)
  // posix version
  function resolve() {
    var resolvedPath = '',
        resolvedAbsolute = false;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path = (i >= 0) ? arguments[i] : '/';

      // Skip empty and invalid entries
      if (typeof path !== 'string') {
        throw new TypeError('Arguments to path.resolve must be strings');
      } else if (!path) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charAt(0) === '/';
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
      return !!p;
    }), !resolvedAbsolute).join('/');

    return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
  }
  // path.normalize(path)
  // posix version
  function normalize(path) {
    var isPathAbsolute = isAbsolute(path),
        trailingSlash = substr(path, -1) === '/';

    // Normalize the path
    path = normalizeArray(filter(path.split('/'), function(p) {
      return !!p;
    }), !isPathAbsolute).join('/');

    if (!path && !isPathAbsolute) {
      path = '.';
    }
    if (path && trailingSlash) {
      path += '/';
    }

    return (isPathAbsolute ? '/' : '') + path;
  }
  // posix version
  function isAbsolute(path) {
    return path.charAt(0) === '/';
  }

  // posix version
  function join() {
    var paths = Array.prototype.slice.call(arguments, 0);
    return normalize(filter(paths, function(p, index) {
      if (typeof p !== 'string') {
        throw new TypeError('Arguments to path.join must be strings');
      }
      return p;
    }).join('/'));
  }


  // path.relative(from, to)
  // posix version
  function relative(from, to) {
    from = resolve(from).substr(1);
    to = resolve(to).substr(1);

    function trim(arr) {
      var start = 0;
      for (; start < arr.length; start++) {
        if (arr[start] !== '') break;
      }

      var end = arr.length - 1;
      for (; end >= 0; end--) {
        if (arr[end] !== '') break;
      }

      if (start > end) return [];
      return arr.slice(start, end - start + 1);
    }

    var fromParts = trim(from.split('/'));
    var toParts = trim(to.split('/'));

    var length = Math.min(fromParts.length, toParts.length);
    var samePartsLength = length;
    for (var i = 0; i < length; i++) {
      if (fromParts[i] !== toParts[i]) {
        samePartsLength = i;
        break;
      }
    }

    var outputParts = [];
    for (var i = samePartsLength; i < fromParts.length; i++) {
      outputParts.push('..');
    }

    outputParts = outputParts.concat(toParts.slice(samePartsLength));

    return outputParts.join('/');
  }

  var sep = '/';
  var delimiter = ':';

  function dirname(path) {
    var result = splitPath(path),
        root = result[0],
        dir = result[1];

    if (!root && !dir) {
      // No dirname whatsoever
      return '.';
    }

    if (dir) {
      // It has a dirname, strip trailing slash
      dir = dir.substr(0, dir.length - 1);
    }

    return root + dir;
  }

  function basename(path, ext) {
    var f = splitPath(path)[2];
    // TODO: make this comparison case-insensitive on windows?
    if (ext && f.substr(-1 * ext.length) === ext) {
      f = f.substr(0, f.length - ext.length);
    }
    return f;
  }


  function extname(path) {
    return splitPath(path)[3];
  }
  var path = {
    extname: extname,
    basename: basename,
    dirname: dirname,
    sep: sep,
    delimiter: delimiter,
    relative: relative,
    join: join,
    isAbsolute: isAbsolute,
    normalize: normalize,
    resolve: resolve
  };
  function filter (xs, f) {
      if (xs.filter) return xs.filter(f);
      var res = [];
      for (var i = 0; i < xs.length; i++) {
          if (f(xs[i], i, xs)) res.push(xs[i]);
      }
      return res;
  }

  // String.prototype.substr - negative index don't work in IE8
  var substr = 'ab'.substr(-1) === 'b' ?
      function (str, start, len) { return str.substr(start, len) } :
      function (str, start, len) {
          if (start < 0) start = str.length + start;
          return str.substr(start, len);
      }
  ;

  var path$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    resolve: resolve,
    normalize: normalize,
    isAbsolute: isAbsolute,
    join: join,
    relative: relative,
    sep: sep,
    delimiter: delimiter,
    dirname: dirname,
    basename: basename,
    extname: extname,
    'default': path
  });

  /*! https://mths.be/punycode v1.4.1 by @mathias */


  /** Highest positive signed 32-bit float value */
  var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

  /** Bootstring parameters */
  var base = 36;
  var tMin = 1;
  var tMax = 26;
  var skew = 38;
  var damp = 700;
  var initialBias = 72;
  var initialN = 128; // 0x80
  var delimiter$1 = '-'; // '\x2D'
  var regexNonASCII = /[^\x20-\x7E]/; // unprintable ASCII chars + non-ASCII chars
  var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

  /** Error messages */
  var errors = {
    'overflow': 'Overflow: input needs wider integers to process',
    'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
    'invalid-input': 'Invalid input'
  };

  /** Convenience shortcuts */
  var baseMinusTMin = base - tMin;
  var floor = Math.floor;
  var stringFromCharCode = String.fromCharCode;

  /*--------------------------------------------------------------------------*/

  /**
   * A generic error utility function.
   * @private
   * @param {String} type The error type.
   * @returns {Error} Throws a `RangeError` with the applicable error message.
   */
  function error(type) {
    throw new RangeError(errors[type]);
  }

  /**
   * A generic `Array#map` utility function.
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} callback The function that gets called for every array
   * item.
   * @returns {Array} A new array of values returned by the callback function.
   */
  function map(array, fn) {
    var length = array.length;
    var result = [];
    while (length--) {
      result[length] = fn(array[length]);
    }
    return result;
  }

  /**
   * A simple `Array#map`-like wrapper to work with domain name strings or email
   * addresses.
   * @private
   * @param {String} domain The domain name or email address.
   * @param {Function} callback The function that gets called for every
   * character.
   * @returns {Array} A new string of characters returned by the callback
   * function.
   */
  function mapDomain(string, fn) {
    var parts = string.split('@');
    var result = '';
    if (parts.length > 1) {
      // In email addresses, only the domain name should be punycoded. Leave
      // the local part (i.e. everything up to `@`) intact.
      result = parts[0] + '@';
      string = parts[1];
    }
    // Avoid `split(regex)` for IE8 compatibility. See #17.
    string = string.replace(regexSeparators, '\x2E');
    var labels = string.split('.');
    var encoded = map(labels, fn).join('.');
    return result + encoded;
  }

  /**
   * Creates an array containing the numeric code points of each Unicode
   * character in the string. While JavaScript uses UCS-2 internally,
   * this function will convert a pair of surrogate halves (each of which
   * UCS-2 exposes as separate characters) into a single code point,
   * matching UTF-16.
   * @see `punycode.ucs2.encode`
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode.ucs2
   * @name decode
   * @param {String} string The Unicode input string (UCS-2).
   * @returns {Array} The new array of code points.
   */
  function ucs2decode(string) {
    var output = [],
      counter = 0,
      length = string.length,
      value,
      extra;
    while (counter < length) {
      value = string.charCodeAt(counter++);
      if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
        // high surrogate, and there is a next character
        extra = string.charCodeAt(counter++);
        if ((extra & 0xFC00) == 0xDC00) { // low surrogate
          output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
        } else {
          // unmatched surrogate; only append this code unit, in case the next
          // code unit is the high surrogate of a surrogate pair
          output.push(value);
          counter--;
        }
      } else {
        output.push(value);
      }
    }
    return output;
  }

  /**
   * Converts a digit/integer into a basic code point.
   * @see `basicToDigit()`
   * @private
   * @param {Number} digit The numeric value of a basic code point.
   * @returns {Number} The basic code point whose value (when used for
   * representing integers) is `digit`, which needs to be in the range
   * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
   * used; else, the lowercase form is used. The behavior is undefined
   * if `flag` is non-zero and `digit` has no uppercase form.
   */
  function digitToBasic(digit, flag) {
    //  0..25 map to ASCII a..z or A..Z
    // 26..35 map to ASCII 0..9
    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
  }

  /**
   * Bias adaptation function as per section 3.4 of RFC 3492.
   * https://tools.ietf.org/html/rfc3492#section-3.4
   * @private
   */
  function adapt(delta, numPoints, firstTime) {
    var k = 0;
    delta = firstTime ? floor(delta / damp) : delta >> 1;
    delta += floor(delta / numPoints);
    for ( /* no initialization */ ; delta > baseMinusTMin * tMax >> 1; k += base) {
      delta = floor(delta / baseMinusTMin);
    }
    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
  }

  /**
   * Converts a string of Unicode symbols (e.g. a domain name label) to a
   * Punycode string of ASCII-only symbols.
   * @memberOf punycode
   * @param {String} input The string of Unicode symbols.
   * @returns {String} The resulting Punycode string of ASCII-only symbols.
   */
  function encode(input) {
    var n,
      delta,
      handledCPCount,
      basicLength,
      bias,
      j,
      m,
      q,
      k,
      t,
      currentValue,
      output = [],
      /** `inputLength` will hold the number of code points in `input`. */
      inputLength,
      /** Cached calculation results */
      handledCPCountPlusOne,
      baseMinusT,
      qMinusT;

    // Convert the input in UCS-2 to Unicode
    input = ucs2decode(input);

    // Cache the length
    inputLength = input.length;

    // Initialize the state
    n = initialN;
    delta = 0;
    bias = initialBias;

    // Handle the basic code points
    for (j = 0; j < inputLength; ++j) {
      currentValue = input[j];
      if (currentValue < 0x80) {
        output.push(stringFromCharCode(currentValue));
      }
    }

    handledCPCount = basicLength = output.length;

    // `handledCPCount` is the number of code points that have been handled;
    // `basicLength` is the number of basic code points.

    // Finish the basic string - if it is not empty - with a delimiter
    if (basicLength) {
      output.push(delimiter$1);
    }

    // Main encoding loop:
    while (handledCPCount < inputLength) {

      // All non-basic code points < n have been handled already. Find the next
      // larger one:
      for (m = maxInt, j = 0; j < inputLength; ++j) {
        currentValue = input[j];
        if (currentValue >= n && currentValue < m) {
          m = currentValue;
        }
      }

      // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
      // but guard against overflow
      handledCPCountPlusOne = handledCPCount + 1;
      if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
        error('overflow');
      }

      delta += (m - n) * handledCPCountPlusOne;
      n = m;

      for (j = 0; j < inputLength; ++j) {
        currentValue = input[j];

        if (currentValue < n && ++delta > maxInt) {
          error('overflow');
        }

        if (currentValue == n) {
          // Represent delta as a generalized variable-length integer
          for (q = delta, k = base; /* no condition */ ; k += base) {
            t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
            if (q < t) {
              break;
            }
            qMinusT = q - t;
            baseMinusT = base - t;
            output.push(
              stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
            );
            q = floor(qMinusT / baseMinusT);
          }

          output.push(stringFromCharCode(digitToBasic(q, 0)));
          bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
          delta = 0;
          ++handledCPCount;
        }
      }

      ++delta;
      ++n;

    }
    return output.join('');
  }

  /**
   * Converts a Unicode string representing a domain name or an email address to
   * Punycode. Only the non-ASCII parts of the domain name will be converted,
   * i.e. it doesn't matter if you call it with a domain that's already in
   * ASCII.
   * @memberOf punycode
   * @param {String} input The domain name or email address to convert, as a
   * Unicode string.
   * @returns {String} The Punycode representation of the given domain name or
   * email address.
   */
  function toASCII(input) {
    return mapDomain(input, function(string) {
      return regexNonASCII.test(string) ?
        'xn--' + encode(string) :
        string;
    });
  }

  function isNull(arg) {
    return arg === null;
  }

  function isNullOrUndefined(arg) {
    return arg == null;
  }

  function isString(arg) {
    return typeof arg === 'string';
  }

  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.


  // If obj.hasOwnProperty has been overridden, then calling
  // obj.hasOwnProperty(prop) will break.
  // See: https://github.com/joyent/node/issues/1707
  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }
  var isArray$1 = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
  };
  function stringifyPrimitive(v) {
    switch (typeof v) {
      case 'string':
        return v;

      case 'boolean':
        return v ? 'true' : 'false';

      case 'number':
        return isFinite(v) ? v : '';

      default:
        return '';
    }
  }

  function stringify$1 (obj, sep, eq, name) {
    sep = sep || '&';
    eq = eq || '=';
    if (obj === null) {
      obj = undefined;
    }

    if (typeof obj === 'object') {
      return map$1(objectKeys(obj), function(k) {
        var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
        if (isArray$1(obj[k])) {
          return map$1(obj[k], function(v) {
            return ks + encodeURIComponent(stringifyPrimitive(v));
          }).join(sep);
        } else {
          return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
        }
      }).join(sep);

    }

    if (!name) return '';
    return encodeURIComponent(stringifyPrimitive(name)) + eq +
           encodeURIComponent(stringifyPrimitive(obj));
  }
  function map$1 (xs, f) {
    if (xs.map) return xs.map(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
      res.push(f(xs[i], i));
    }
    return res;
  }

  var objectKeys = Object.keys || function (obj) {
    var res = [];
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
    }
    return res;
  };

  function parse(qs, sep, eq, options) {
    sep = sep || '&';
    eq = eq || '=';
    var obj = {};

    if (typeof qs !== 'string' || qs.length === 0) {
      return obj;
    }

    var regexp = /\+/g;
    qs = qs.split(sep);

    var maxKeys = 1000;
    if (options && typeof options.maxKeys === 'number') {
      maxKeys = options.maxKeys;
    }

    var len = qs.length;
    // maxKeys <= 0 means that we should not limit keys count
    if (maxKeys > 0 && len > maxKeys) {
      len = maxKeys;
    }

    for (var i = 0; i < len; ++i) {
      var x = qs[i].replace(regexp, '%20'),
          idx = x.indexOf(eq),
          kstr, vstr, k, v;

      if (idx >= 0) {
        kstr = x.substr(0, idx);
        vstr = x.substr(idx + 1);
      } else {
        kstr = x;
        vstr = '';
      }

      k = decodeURIComponent(kstr);
      v = decodeURIComponent(vstr);

      if (!hasOwnProperty(obj, k)) {
        obj[k] = v;
      } else if (isArray$1(obj[k])) {
        obj[k].push(v);
      } else {
        obj[k] = [obj[k], v];
      }
    }

    return obj;
  }

  // Copyright Joyent, Inc. and other Node contributors.
  var url = {
    parse: urlParse,
    resolve: urlResolve,
    resolveObject: urlResolveObject,
    format: urlFormat,
    Url: Url
  };
  function Url() {
    this.protocol = null;
    this.slashes = null;
    this.auth = null;
    this.host = null;
    this.port = null;
    this.hostname = null;
    this.hash = null;
    this.search = null;
    this.query = null;
    this.pathname = null;
    this.path = null;
    this.href = null;
  }

  // Reference: RFC 3986, RFC 1808, RFC 2396

  // define these here so at least they only have to be
  // compiled once on the first module load.
  var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    };

  function urlParse(url, parseQueryString, slashesDenoteHost) {
    if (url && isObject(url) && url instanceof Url) return url;

    var u = new Url;
    u.parse(url, parseQueryString, slashesDenoteHost);
    return u;
  }
  Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
    return parse$1(this, url, parseQueryString, slashesDenoteHost);
  };

  function parse$1(self, url, parseQueryString, slashesDenoteHost) {
    if (!isString(url)) {
      throw new TypeError('Parameter \'url\' must be a string, not ' + typeof url);
    }

    // Copy chrome, IE, opera backslash-handling behavior.
    // Back slashes before the query string get converted to forward slashes
    // See: https://code.google.com/p/chromium/issues/detail?id=25916
    var queryIndex = url.indexOf('?'),
      splitter =
      (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
    uSplit[0] = uSplit[0].replace(slashRegex, '/');
    url = uSplit.join(splitter);

    var rest = url;

    // trim before proceeding.
    // This is to support parse stuff like "  http://foo.com  \n"
    rest = rest.trim();

    if (!slashesDenoteHost && url.split('#').length === 1) {
      // Try fast path regexp
      var simplePath = simplePathPattern.exec(rest);
      if (simplePath) {
        self.path = rest;
        self.href = rest;
        self.pathname = simplePath[1];
        if (simplePath[2]) {
          self.search = simplePath[2];
          if (parseQueryString) {
            self.query = parse(self.search.substr(1));
          } else {
            self.query = self.search.substr(1);
          }
        } else if (parseQueryString) {
          self.search = '';
          self.query = {};
        }
        return self;
      }
    }

    var proto = protocolPattern.exec(rest);
    if (proto) {
      proto = proto[0];
      var lowerProto = proto.toLowerCase();
      self.protocol = lowerProto;
      rest = rest.substr(proto.length);
    }

    // figure out if it's got a host
    // user@server is *always* interpreted as a hostname, and url
    // resolution will treat //foo/bar as host=foo,path=bar because that's
    // how the browser resolves relative URLs.
    if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
      var slashes = rest.substr(0, 2) === '//';
      if (slashes && !(proto && hostlessProtocol[proto])) {
        rest = rest.substr(2);
        self.slashes = true;
      }
    }
    var i, hec, l, p;
    if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

      // there's a hostname.
      // the first instance of /, ?, ;, or # ends the host.
      //
      // If there is an @ in the hostname, then non-host chars *are* allowed
      // to the left of the last @ sign, unless some host-ending character
      // comes *before* the @-sign.
      // URLs are obnoxious.
      //
      // ex:
      // http://a@b@c/ => user:a@b host:c
      // http://a@b?@c => user:a host:c path:/?@c

      // v0.12 TODO(isaacs): This is not quite how Chrome does things.
      // Review our test case against browsers more comprehensively.

      // find the first instance of any hostEndingChars
      var hostEnd = -1;
      for (i = 0; i < hostEndingChars.length; i++) {
        hec = rest.indexOf(hostEndingChars[i]);
        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
          hostEnd = hec;
      }

      // at this point, either we have an explicit point where the
      // auth portion cannot go past, or the last @ char is the decider.
      var auth, atSign;
      if (hostEnd === -1) {
        // atSign can be anywhere.
        atSign = rest.lastIndexOf('@');
      } else {
        // atSign must be in auth portion.
        // http://a@b/c@d => host:b auth:a path:/c@d
        atSign = rest.lastIndexOf('@', hostEnd);
      }

      // Now we have a portion which is definitely the auth.
      // Pull that off.
      if (atSign !== -1) {
        auth = rest.slice(0, atSign);
        rest = rest.slice(atSign + 1);
        self.auth = decodeURIComponent(auth);
      }

      // the host is the remaining to the left of the first non-host char
      hostEnd = -1;
      for (i = 0; i < nonHostChars.length; i++) {
        hec = rest.indexOf(nonHostChars[i]);
        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
          hostEnd = hec;
      }
      // if we still have not hit it, then the entire thing is a host.
      if (hostEnd === -1)
        hostEnd = rest.length;

      self.host = rest.slice(0, hostEnd);
      rest = rest.slice(hostEnd);

      // pull out port.
      parseHost(self);

      // we've indicated that there is a hostname,
      // so even if it's empty, it has to be present.
      self.hostname = self.hostname || '';

      // if hostname begins with [ and ends with ]
      // assume that it's an IPv6 address.
      var ipv6Hostname = self.hostname[0] === '[' &&
        self.hostname[self.hostname.length - 1] === ']';

      // validate a little.
      if (!ipv6Hostname) {
        var hostparts = self.hostname.split(/\./);
        for (i = 0, l = hostparts.length; i < l; i++) {
          var part = hostparts[i];
          if (!part) continue;
          if (!part.match(hostnamePartPattern)) {
            var newpart = '';
            for (var j = 0, k = part.length; j < k; j++) {
              if (part.charCodeAt(j) > 127) {
                // we replace non-ASCII char with a temporary placeholder
                // we need this to make sure size of hostname is not
                // broken by replacing non-ASCII by nothing
                newpart += 'x';
              } else {
                newpart += part[j];
              }
            }
            // we test again with ASCII char only
            if (!newpart.match(hostnamePartPattern)) {
              var validParts = hostparts.slice(0, i);
              var notHost = hostparts.slice(i + 1);
              var bit = part.match(hostnamePartStart);
              if (bit) {
                validParts.push(bit[1]);
                notHost.unshift(bit[2]);
              }
              if (notHost.length) {
                rest = '/' + notHost.join('.') + rest;
              }
              self.hostname = validParts.join('.');
              break;
            }
          }
        }
      }

      if (self.hostname.length > hostnameMaxLen) {
        self.hostname = '';
      } else {
        // hostnames are always lower case.
        self.hostname = self.hostname.toLowerCase();
      }

      if (!ipv6Hostname) {
        // IDNA Support: Returns a punycoded representation of "domain".
        // It only converts parts of the domain name that
        // have non-ASCII characters, i.e. it doesn't matter if
        // you call it with a domain that already is ASCII-only.
        self.hostname = toASCII(self.hostname);
      }

      p = self.port ? ':' + self.port : '';
      var h = self.hostname || '';
      self.host = h + p;
      self.href += self.host;

      // strip [ and ] from the hostname
      // the host field still retains them, though
      if (ipv6Hostname) {
        self.hostname = self.hostname.substr(1, self.hostname.length - 2);
        if (rest[0] !== '/') {
          rest = '/' + rest;
        }
      }
    }

    // now rest is set to the post-host stuff.
    // chop off any delim chars.
    if (!unsafeProtocol[lowerProto]) {

      // First, make 100% sure that any "autoEscape" chars get
      // escaped, even if encodeURIComponent doesn't think they
      // need to be.
      for (i = 0, l = autoEscape.length; i < l; i++) {
        var ae = autoEscape[i];
        if (rest.indexOf(ae) === -1)
          continue;
        var esc = encodeURIComponent(ae);
        if (esc === ae) {
          esc = escape(ae);
        }
        rest = rest.split(ae).join(esc);
      }
    }


    // chop off from the tail first.
    var hash = rest.indexOf('#');
    if (hash !== -1) {
      // got a fragment string.
      self.hash = rest.substr(hash);
      rest = rest.slice(0, hash);
    }
    var qm = rest.indexOf('?');
    if (qm !== -1) {
      self.search = rest.substr(qm);
      self.query = rest.substr(qm + 1);
      if (parseQueryString) {
        self.query = parse(self.query);
      }
      rest = rest.slice(0, qm);
    } else if (parseQueryString) {
      // no query string, but parseQueryString still requested
      self.search = '';
      self.query = {};
    }
    if (rest) self.pathname = rest;
    if (slashedProtocol[lowerProto] &&
      self.hostname && !self.pathname) {
      self.pathname = '/';
    }

    //to support http.request
    if (self.pathname || self.search) {
      p = self.pathname || '';
      var s = self.search || '';
      self.path = p + s;
    }

    // finally, reconstruct the href based on what has been validated.
    self.href = format(self);
    return self;
  }

  // format a parsed object into a url string
  function urlFormat(obj) {
    // ensure it's an object, and not a string url.
    // If it's an obj, this is a no-op.
    // this way, you can call url_format() on strings
    // to clean up potentially wonky urls.
    if (isString(obj)) obj = parse$1({}, obj);
    return format(obj);
  }

  function format(self) {
    var auth = self.auth || '';
    if (auth) {
      auth = encodeURIComponent(auth);
      auth = auth.replace(/%3A/i, ':');
      auth += '@';
    }

    var protocol = self.protocol || '',
      pathname = self.pathname || '',
      hash = self.hash || '',
      host = false,
      query = '';

    if (self.host) {
      host = auth + self.host;
    } else if (self.hostname) {
      host = auth + (self.hostname.indexOf(':') === -1 ?
        self.hostname :
        '[' + this.hostname + ']');
      if (self.port) {
        host += ':' + self.port;
      }
    }

    if (self.query &&
      isObject(self.query) &&
      Object.keys(self.query).length) {
      query = stringify$1(self.query);
    }

    var search = self.search || (query && ('?' + query)) || '';

    if (protocol && protocol.substr(-1) !== ':') protocol += ':';

    // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
    // unless they had them to begin with.
    if (self.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
      host = '//' + (host || '');
      if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
    } else if (!host) {
      host = '';
    }

    if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
    if (search && search.charAt(0) !== '?') search = '?' + search;

    pathname = pathname.replace(/[?#]/g, function(match) {
      return encodeURIComponent(match);
    });
    search = search.replace('#', '%23');

    return protocol + host + pathname + search + hash;
  }

  Url.prototype.format = function() {
    return format(this);
  };

  function urlResolve(source, relative) {
    return urlParse(source, false, true).resolve(relative);
  }

  Url.prototype.resolve = function(relative) {
    return this.resolveObject(urlParse(relative, false, true)).format();
  };

  function urlResolveObject(source, relative) {
    if (!source) return relative;
    return urlParse(source, false, true).resolveObject(relative);
  }

  Url.prototype.resolveObject = function(relative) {
    if (isString(relative)) {
      var rel = new Url();
      rel.parse(relative, false, true);
      relative = rel;
    }

    var result = new Url();
    var tkeys = Object.keys(this);
    for (var tk = 0; tk < tkeys.length; tk++) {
      var tkey = tkeys[tk];
      result[tkey] = this[tkey];
    }

    // hash is always overridden, no matter what.
    // even href="" will remove it.
    result.hash = relative.hash;

    // if the relative url is empty, then there's nothing left to do here.
    if (relative.href === '') {
      result.href = result.format();
      return result;
    }

    // hrefs like //foo/bar always cut to the protocol.
    if (relative.slashes && !relative.protocol) {
      // take everything except the protocol from relative
      var rkeys = Object.keys(relative);
      for (var rk = 0; rk < rkeys.length; rk++) {
        var rkey = rkeys[rk];
        if (rkey !== 'protocol')
          result[rkey] = relative[rkey];
      }

      //urlParse appends trailing / to urls like http://www.example.com
      if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
        result.path = result.pathname = '/';
      }

      result.href = result.format();
      return result;
    }
    var relPath;
    if (relative.protocol && relative.protocol !== result.protocol) {
      // if it's a known url protocol, then changing
      // the protocol does weird things
      // first, if it's not file:, then we MUST have a host,
      // and if there was a path
      // to begin with, then we MUST have a path.
      // if it is file:, then the host is dropped,
      // because that's known to be hostless.
      // anything else is assumed to be absolute.
      if (!slashedProtocol[relative.protocol]) {
        var keys = Object.keys(relative);
        for (var v = 0; v < keys.length; v++) {
          var k = keys[v];
          result[k] = relative[k];
        }
        result.href = result.format();
        return result;
      }

      result.protocol = relative.protocol;
      if (!relative.host && !hostlessProtocol[relative.protocol]) {
        relPath = (relative.pathname || '').split('/');
        while (relPath.length && !(relative.host = relPath.shift()));
        if (!relative.host) relative.host = '';
        if (!relative.hostname) relative.hostname = '';
        if (relPath[0] !== '') relPath.unshift('');
        if (relPath.length < 2) relPath.unshift('');
        result.pathname = relPath.join('/');
      } else {
        result.pathname = relative.pathname;
      }
      result.search = relative.search;
      result.query = relative.query;
      result.host = relative.host || '';
      result.auth = relative.auth;
      result.hostname = relative.hostname || relative.host;
      result.port = relative.port;
      // to support http.request
      if (result.pathname || result.search) {
        var p = result.pathname || '';
        var s = result.search || '';
        result.path = p + s;
      }
      result.slashes = result.slashes || relative.slashes;
      result.href = result.format();
      return result;
    }

    var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
        relative.host ||
        relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
        (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];
    relPath = relative.pathname && relative.pathname.split('/') || [];
    // if the url is a non-slashed url, then relative
    // links like ../.. should be able
    // to crawl up to the hostname, as well.  This is strange.
    // result.protocol has already been set by now.
    // Later on, put the first path part into the host field.
    if (psychotic) {
      result.hostname = '';
      result.port = null;
      if (result.host) {
        if (srcPath[0] === '') srcPath[0] = result.host;
        else srcPath.unshift(result.host);
      }
      result.host = '';
      if (relative.protocol) {
        relative.hostname = null;
        relative.port = null;
        if (relative.host) {
          if (relPath[0] === '') relPath[0] = relative.host;
          else relPath.unshift(relative.host);
        }
        relative.host = null;
      }
      mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
    }
    var authInHost;
    if (isRelAbs) {
      // it's absolute.
      result.host = (relative.host || relative.host === '') ?
        relative.host : result.host;
      result.hostname = (relative.hostname || relative.hostname === '') ?
        relative.hostname : result.hostname;
      result.search = relative.search;
      result.query = relative.query;
      srcPath = relPath;
      // fall through to the dot-handling below.
    } else if (relPath.length) {
      // it's relative
      // throw away the existing file, and take the new path instead.
      if (!srcPath) srcPath = [];
      srcPath.pop();
      srcPath = srcPath.concat(relPath);
      result.search = relative.search;
      result.query = relative.query;
    } else if (!isNullOrUndefined(relative.search)) {
      // just pull out the search.
      // like href='?foo'.
      // Put this after the other two cases because it simplifies the booleans
      if (psychotic) {
        result.hostname = result.host = srcPath.shift();
        //occationaly the auth can get stuck only in host
        //this especially happens in cases like
        //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
        authInHost = result.host && result.host.indexOf('@') > 0 ?
          result.host.split('@') : false;
        if (authInHost) {
          result.auth = authInHost.shift();
          result.host = result.hostname = authInHost.shift();
        }
      }
      result.search = relative.search;
      result.query = relative.query;
      //to support http.request
      if (!isNull(result.pathname) || !isNull(result.search)) {
        result.path = (result.pathname ? result.pathname : '') +
          (result.search ? result.search : '');
      }
      result.href = result.format();
      return result;
    }

    if (!srcPath.length) {
      // no path at all.  easy.
      // we've already handled the other stuff above.
      result.pathname = null;
      //to support http.request
      if (result.search) {
        result.path = '/' + result.search;
      } else {
        result.path = null;
      }
      result.href = result.format();
      return result;
    }

    // if a url ENDs in . or .., then it must get a trailing slash.
    // however, if it ends in anything else non-slashy,
    // then it must NOT get a trailing slash.
    var last = srcPath.slice(-1)[0];
    var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

    // strip single dots, resolve double dots to parent dir
    // if the path tries to go above the root, `up` ends up > 0
    var up = 0;
    for (var i = srcPath.length; i >= 0; i--) {
      last = srcPath[i];
      if (last === '.') {
        srcPath.splice(i, 1);
      } else if (last === '..') {
        srcPath.splice(i, 1);
        up++;
      } else if (up) {
        srcPath.splice(i, 1);
        up--;
      }
    }

    // if the path is allowed to go above the root, restore leading ..s
    if (!mustEndAbs && !removeAllDots) {
      for (; up--; up) {
        srcPath.unshift('..');
      }
    }

    if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
      srcPath.unshift('');
    }

    if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
      srcPath.push('');
    }

    var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

    // put the host back
    if (psychotic) {
      result.hostname = result.host = isAbsolute ? '' :
        srcPath.length ? srcPath.shift() : '';
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      authInHost = result.host && result.host.indexOf('@') > 0 ?
        result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }

    mustEndAbs = mustEndAbs || (result.host && srcPath.length);

    if (mustEndAbs && !isAbsolute) {
      srcPath.unshift('');
    }

    if (!srcPath.length) {
      result.pathname = null;
      result.path = null;
    } else {
      result.pathname = srcPath.join('/');
    }

    //to support request.http
    if (!isNull(result.pathname) || !isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
        (result.search ? result.search : '');
    }
    result.auth = relative.auth || result.auth;
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  };

  Url.prototype.parseHost = function() {
    return parseHost(this);
  };

  function parseHost(self) {
    var host = self.host;
    var port = portPattern.exec(host);
    if (port) {
      port = port[0];
      if (port !== ':') {
        self.port = port.substr(1);
      }
      host = host.substr(0, host.length - port.length);
    }
    if (host) self.hostname = host;
  }

  var url$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    parse: urlParse,
    resolve: urlResolve,
    resolveObject: urlResolveObject,
    format: urlFormat,
    'default': url,
    Url: Url
  });

  var require$$0 = /*@__PURE__*/getAugmentedNamespace(url$1);

  var url$2 = Object.assign(
    {},
    require$$0,
    {
      pathToFileURL: (path)=> { return `file:///${encodeURIComponent(path)}` },
      fileURLToPath: (fileURL)=> { return decodeURIComponent(fileURL.toString().replace(/^file:\/\/\//, '')) }
    }
  );

  /* -*- Mode: js; js-indent-level: 2; -*- */
  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */

  var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

  /**
   * Encode an integer in the range of 0 to 63 to a single base 64 digit.
   */
  var encode$1 = function (number) {
    if (0 <= number && number < intToCharMap.length) {
      return intToCharMap[number];
    }
    throw new TypeError("Must be between 0 and 63: " + number);
  };

  /**
   * Decode a single base 64 character code digit to an integer. Returns -1 on
   * failure.
   */
  var decode = function (charCode) {
    var bigA = 65;     // 'A'
    var bigZ = 90;     // 'Z'

    var littleA = 97;  // 'a'
    var littleZ = 122; // 'z'

    var zero = 48;     // '0'
    var nine = 57;     // '9'

    var plus = 43;     // '+'
    var slash = 47;    // '/'

    var littleOffset = 26;
    var numberOffset = 52;

    // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
    if (bigA <= charCode && charCode <= bigZ) {
      return (charCode - bigA);
    }

    // 26 - 51: abcdefghijklmnopqrstuvwxyz
    if (littleA <= charCode && charCode <= littleZ) {
      return (charCode - littleA + littleOffset);
    }

    // 52 - 61: 0123456789
    if (zero <= charCode && charCode <= nine) {
      return (charCode - zero + numberOffset);
    }

    // 62: +
    if (charCode == plus) {
      return 62;
    }

    // 63: /
    if (charCode == slash) {
      return 63;
    }

    // Invalid base64 digit.
    return -1;
  };

  var base64 = {
  	encode: encode$1,
  	decode: decode
  };

  /* -*- Mode: js; js-indent-level: 2; -*- */
  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   *
   * Based on the Base 64 VLQ implementation in Closure Compiler:
   * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
   *
   * Copyright 2011 The Closure Compiler Authors. All rights reserved.
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are
   * met:
   *
   *  * Redistributions of source code must retain the above copyright
   *    notice, this list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above
   *    copyright notice, this list of conditions and the following
   *    disclaimer in the documentation and/or other materials provided
   *    with the distribution.
   *  * Neither the name of Google Inc. nor the names of its
   *    contributors may be used to endorse or promote products derived
   *    from this software without specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
   * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
   * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
   * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
   * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   */



  // A single base 64 digit can contain 6 bits of data. For the base 64 variable
  // length quantities we use in the source map spec, the first bit is the sign,
  // the next four bits are the actual value, and the 6th bit is the
  // continuation bit. The continuation bit tells us whether there are more
  // digits in this value following this digit.
  //
  //   Continuation
  //   |    Sign
  //   |    |
  //   V    V
  //   101011

  var VLQ_BASE_SHIFT = 5;

  // binary: 100000
  var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

  // binary: 011111
  var VLQ_BASE_MASK = VLQ_BASE - 1;

  // binary: 100000
  var VLQ_CONTINUATION_BIT = VLQ_BASE;

  /**
   * Converts from a two-complement value to a value where the sign bit is
   * placed in the least significant bit.  For example, as decimals:
   *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
   *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
   */
  function toVLQSigned(aValue) {
    return aValue < 0
      ? ((-aValue) << 1) + 1
      : (aValue << 1) + 0;
  }

  /**
   * Converts to a two-complement value from a value where the sign bit is
   * placed in the least significant bit.  For example, as decimals:
   *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
   *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
   */
  function fromVLQSigned(aValue) {
    var isNegative = (aValue & 1) === 1;
    var shifted = aValue >> 1;
    return isNegative
      ? -shifted
      : shifted;
  }

  /**
   * Returns the base 64 VLQ encoded value.
   */
  var encode$2 = function base64VLQ_encode(aValue) {
    var encoded = "";
    var digit;

    var vlq = toVLQSigned(aValue);

    do {
      digit = vlq & VLQ_BASE_MASK;
      vlq >>>= VLQ_BASE_SHIFT;
      if (vlq > 0) {
        // There are still more digits in this value, so we must make sure the
        // continuation bit is marked.
        digit |= VLQ_CONTINUATION_BIT;
      }
      encoded += base64.encode(digit);
    } while (vlq > 0);

    return encoded;
  };

  /**
   * Decodes the next base 64 VLQ value from the given string and returns the
   * value and the rest of the string via the out parameter.
   */
  var decode$1 = function base64VLQ_decode(aStr, aIndex, aOutParam) {
    var strLen = aStr.length;
    var result = 0;
    var shift = 0;
    var continuation, digit;

    do {
      if (aIndex >= strLen) {
        throw new Error("Expected more digits in base 64 VLQ value.");
      }

      digit = base64.decode(aStr.charCodeAt(aIndex++));
      if (digit === -1) {
        throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
      }

      continuation = !!(digit & VLQ_CONTINUATION_BIT);
      digit &= VLQ_BASE_MASK;
      result = result + (digit << shift);
      shift += VLQ_BASE_SHIFT;
    } while (continuation);

    aOutParam.value = fromVLQSigned(result);
    aOutParam.rest = aIndex;
  };

  var base64Vlq = {
  	encode: encode$2,
  	decode: decode$1
  };

  var util = createCommonjsModule(function (module, exports) {
  /* -*- Mode: js; js-indent-level: 2; -*- */
  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */

  /**
   * This is a helper function for getting values from parameter/options
   * objects.
   *
   * @param args The object we are extracting values from
   * @param name The name of the property we are getting.
   * @param defaultValue An optional value to return if the property is missing
   * from the object. If this is not specified and the property is missing, an
   * error will be thrown.
   */
  function getArg(aArgs, aName, aDefaultValue) {
    if (aName in aArgs) {
      return aArgs[aName];
    } else if (arguments.length === 3) {
      return aDefaultValue;
    } else {
      throw new Error('"' + aName + '" is a required argument.');
    }
  }
  exports.getArg = getArg;

  var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
  var dataUrlRegexp = /^data:.+\,.+$/;

  function urlParse(aUrl) {
    var match = aUrl.match(urlRegexp);
    if (!match) {
      return null;
    }
    return {
      scheme: match[1],
      auth: match[2],
      host: match[3],
      port: match[4],
      path: match[5]
    };
  }
  exports.urlParse = urlParse;

  function urlGenerate(aParsedUrl) {
    var url = '';
    if (aParsedUrl.scheme) {
      url += aParsedUrl.scheme + ':';
    }
    url += '//';
    if (aParsedUrl.auth) {
      url += aParsedUrl.auth + '@';
    }
    if (aParsedUrl.host) {
      url += aParsedUrl.host;
    }
    if (aParsedUrl.port) {
      url += ":" + aParsedUrl.port;
    }
    if (aParsedUrl.path) {
      url += aParsedUrl.path;
    }
    return url;
  }
  exports.urlGenerate = urlGenerate;

  /**
   * Normalizes a path, or the path portion of a URL:
   *
   * - Replaces consecutive slashes with one slash.
   * - Removes unnecessary '.' parts.
   * - Removes unnecessary '<dir>/..' parts.
   *
   * Based on code in the Node.js 'path' core module.
   *
   * @param aPath The path or url to normalize.
   */
  function normalize(aPath) {
    var path = aPath;
    var url = urlParse(aPath);
    if (url) {
      if (!url.path) {
        return aPath;
      }
      path = url.path;
    }
    var isAbsolute = exports.isAbsolute(path);

    var parts = path.split(/\/+/);
    for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
      part = parts[i];
      if (part === '.') {
        parts.splice(i, 1);
      } else if (part === '..') {
        up++;
      } else if (up > 0) {
        if (part === '') {
          // The first part is blank if the path is absolute. Trying to go
          // above the root is a no-op. Therefore we can remove all '..' parts
          // directly after the root.
          parts.splice(i + 1, up);
          up = 0;
        } else {
          parts.splice(i, 2);
          up--;
        }
      }
    }
    path = parts.join('/');

    if (path === '') {
      path = isAbsolute ? '/' : '.';
    }

    if (url) {
      url.path = path;
      return urlGenerate(url);
    }
    return path;
  }
  exports.normalize = normalize;

  /**
   * Joins two paths/URLs.
   *
   * @param aRoot The root path or URL.
   * @param aPath The path or URL to be joined with the root.
   *
   * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
   *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
   *   first.
   * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
   *   is updated with the result and aRoot is returned. Otherwise the result
   *   is returned.
   *   - If aPath is absolute, the result is aPath.
   *   - Otherwise the two paths are joined with a slash.
   * - Joining for example 'http://' and 'www.example.com' is also supported.
   */
  function join(aRoot, aPath) {
    if (aRoot === "") {
      aRoot = ".";
    }
    if (aPath === "") {
      aPath = ".";
    }
    var aPathUrl = urlParse(aPath);
    var aRootUrl = urlParse(aRoot);
    if (aRootUrl) {
      aRoot = aRootUrl.path || '/';
    }

    // `join(foo, '//www.example.org')`
    if (aPathUrl && !aPathUrl.scheme) {
      if (aRootUrl) {
        aPathUrl.scheme = aRootUrl.scheme;
      }
      return urlGenerate(aPathUrl);
    }

    if (aPathUrl || aPath.match(dataUrlRegexp)) {
      return aPath;
    }

    // `join('http://', 'www.example.com')`
    if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
      aRootUrl.host = aPath;
      return urlGenerate(aRootUrl);
    }

    var joined = aPath.charAt(0) === '/'
      ? aPath
      : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

    if (aRootUrl) {
      aRootUrl.path = joined;
      return urlGenerate(aRootUrl);
    }
    return joined;
  }
  exports.join = join;

  exports.isAbsolute = function (aPath) {
    return aPath.charAt(0) === '/' || urlRegexp.test(aPath);
  };

  /**
   * Make a path relative to a URL or another path.
   *
   * @param aRoot The root path or URL.
   * @param aPath The path or URL to be made relative to aRoot.
   */
  function relative(aRoot, aPath) {
    if (aRoot === "") {
      aRoot = ".";
    }

    aRoot = aRoot.replace(/\/$/, '');

    // It is possible for the path to be above the root. In this case, simply
    // checking whether the root is a prefix of the path won't work. Instead, we
    // need to remove components from the root one by one, until either we find
    // a prefix that fits, or we run out of components to remove.
    var level = 0;
    while (aPath.indexOf(aRoot + '/') !== 0) {
      var index = aRoot.lastIndexOf("/");
      if (index < 0) {
        return aPath;
      }

      // If the only part of the root that is left is the scheme (i.e. http://,
      // file:///, etc.), one or more slashes (/), or simply nothing at all, we
      // have exhausted all components, so the path is not relative to the root.
      aRoot = aRoot.slice(0, index);
      if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
        return aPath;
      }

      ++level;
    }

    // Make sure we add a "../" for each component we removed from the root.
    return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
  }
  exports.relative = relative;

  var supportsNullProto = (function () {
    var obj = Object.create(null);
    return !('__proto__' in obj);
  }());

  function identity (s) {
    return s;
  }

  /**
   * Because behavior goes wacky when you set `__proto__` on objects, we
   * have to prefix all the strings in our set with an arbitrary character.
   *
   * See https://github.com/mozilla/source-map/pull/31 and
   * https://github.com/mozilla/source-map/issues/30
   *
   * @param String aStr
   */
  function toSetString(aStr) {
    if (isProtoString(aStr)) {
      return '$' + aStr;
    }

    return aStr;
  }
  exports.toSetString = supportsNullProto ? identity : toSetString;

  function fromSetString(aStr) {
    if (isProtoString(aStr)) {
      return aStr.slice(1);
    }

    return aStr;
  }
  exports.fromSetString = supportsNullProto ? identity : fromSetString;

  function isProtoString(s) {
    if (!s) {
      return false;
    }

    var length = s.length;

    if (length < 9 /* "__proto__".length */) {
      return false;
    }

    if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
        s.charCodeAt(length - 2) !== 95  /* '_' */ ||
        s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
        s.charCodeAt(length - 4) !== 116 /* 't' */ ||
        s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
        s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
        s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
        s.charCodeAt(length - 8) !== 95  /* '_' */ ||
        s.charCodeAt(length - 9) !== 95  /* '_' */) {
      return false;
    }

    for (var i = length - 10; i >= 0; i--) {
      if (s.charCodeAt(i) !== 36 /* '$' */) {
        return false;
      }
    }

    return true;
  }

  /**
   * Comparator between two mappings where the original positions are compared.
   *
   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
   * mappings with the same original source/line/column, but different generated
   * line and column the same. Useful when searching for a mapping with a
   * stubbed out mapping.
   */
  function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
    var cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0 || onlyCompareOriginal) {
      return cmp;
    }

    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
      return cmp;
    }

    return strcmp(mappingA.name, mappingB.name);
  }
  exports.compareByOriginalPositions = compareByOriginalPositions;

  /**
   * Comparator between two mappings with deflated source and name indices where
   * the generated positions are compared.
   *
   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
   * mappings with the same generated line and column, but different
   * source/name/original line and column the same. Useful when searching for a
   * mapping with a stubbed out mapping.
   */
  function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
    var cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0 || onlyCompareGenerated) {
      return cmp;
    }

    cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0) {
      return cmp;
    }

    return strcmp(mappingA.name, mappingB.name);
  }
  exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

  function strcmp(aStr1, aStr2) {
    if (aStr1 === aStr2) {
      return 0;
    }

    if (aStr1 === null) {
      return 1; // aStr2 !== null
    }

    if (aStr2 === null) {
      return -1; // aStr1 !== null
    }

    if (aStr1 > aStr2) {
      return 1;
    }

    return -1;
  }

  /**
   * Comparator between two mappings with inflated source and name strings where
   * the generated positions are compared.
   */
  function compareByGeneratedPositionsInflated(mappingA, mappingB) {
    var cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0) {
      return cmp;
    }

    return strcmp(mappingA.name, mappingB.name);
  }
  exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

  /**
   * Strip any JSON XSSI avoidance prefix from the string (as documented
   * in the source maps specification), and then parse the string as
   * JSON.
   */
  function parseSourceMapInput(str) {
    return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ''));
  }
  exports.parseSourceMapInput = parseSourceMapInput;

  /**
   * Compute the URL of a source given the the source root, the source's
   * URL, and the source map's URL.
   */
  function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
    sourceURL = sourceURL || '';

    if (sourceRoot) {
      // This follows what Chrome does.
      if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {
        sourceRoot += '/';
      }
      // The spec says:
      //   Line 4: An optional source root, useful for relocating source
      //   files on a server or removing repeated values in the
      //   “sources” entry.  This value is prepended to the individual
      //   entries in the “source” field.
      sourceURL = sourceRoot + sourceURL;
    }

    // Historically, SourceMapConsumer did not take the sourceMapURL as
    // a parameter.  This mode is still somewhat supported, which is why
    // this code block is conditional.  However, it's preferable to pass
    // the source map URL to SourceMapConsumer, so that this function
    // can implement the source URL resolution algorithm as outlined in
    // the spec.  This block is basically the equivalent of:
    //    new URL(sourceURL, sourceMapURL).toString()
    // ... except it avoids using URL, which wasn't available in the
    // older releases of node still supported by this library.
    //
    // The spec says:
    //   If the sources are not absolute URLs after prepending of the
    //   “sourceRoot”, the sources are resolved relative to the
    //   SourceMap (like resolving script src in a html document).
    if (sourceMapURL) {
      var parsed = urlParse(sourceMapURL);
      if (!parsed) {
        throw new Error("sourceMapURL could not be parsed");
      }
      if (parsed.path) {
        // Strip the last path component, but keep the "/".
        var index = parsed.path.lastIndexOf('/');
        if (index >= 0) {
          parsed.path = parsed.path.substring(0, index + 1);
        }
      }
      sourceURL = join(urlGenerate(parsed), sourceURL);
    }

    return normalize(sourceURL);
  }
  exports.computeSourceURL = computeSourceURL;
  });

  /* -*- Mode: js; js-indent-level: 2; -*- */
  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */


  var has = Object.prototype.hasOwnProperty;
  var hasNativeMap = typeof Map !== "undefined";

  /**
   * A data structure which is a combination of an array and a set. Adding a new
   * member is O(1), testing for membership is O(1), and finding the index of an
   * element is O(1). Removing elements from the set is not supported. Only
   * strings are supported for membership.
   */
  function ArraySet() {
    this._array = [];
    this._set = hasNativeMap ? new Map() : Object.create(null);
  }

  /**
   * Static method for creating ArraySet instances from an existing array.
   */
  ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
    var set = new ArraySet();
    for (var i = 0, len = aArray.length; i < len; i++) {
      set.add(aArray[i], aAllowDuplicates);
    }
    return set;
  };

  /**
   * Return how many unique items are in this ArraySet. If duplicates have been
   * added, than those do not count towards the size.
   *
   * @returns Number
   */
  ArraySet.prototype.size = function ArraySet_size() {
    return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
  };

  /**
   * Add the given string to this set.
   *
   * @param String aStr
   */
  ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
    var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
    var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
    var idx = this._array.length;
    if (!isDuplicate || aAllowDuplicates) {
      this._array.push(aStr);
    }
    if (!isDuplicate) {
      if (hasNativeMap) {
        this._set.set(aStr, idx);
      } else {
        this._set[sStr] = idx;
      }
    }
  };

  /**
   * Is the given string a member of this set?
   *
   * @param String aStr
   */
  ArraySet.prototype.has = function ArraySet_has(aStr) {
    if (hasNativeMap) {
      return this._set.has(aStr);
    } else {
      var sStr = util.toSetString(aStr);
      return has.call(this._set, sStr);
    }
  };

  /**
   * What is the index of the given string in the array?
   *
   * @param String aStr
   */
  ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
    if (hasNativeMap) {
      var idx = this._set.get(aStr);
      if (idx >= 0) {
          return idx;
      }
    } else {
      var sStr = util.toSetString(aStr);
      if (has.call(this._set, sStr)) {
        return this._set[sStr];
      }
    }

    throw new Error('"' + aStr + '" is not in the set.');
  };

  /**
   * What is the element at the given index?
   *
   * @param Number aIdx
   */
  ArraySet.prototype.at = function ArraySet_at(aIdx) {
    if (aIdx >= 0 && aIdx < this._array.length) {
      return this._array[aIdx];
    }
    throw new Error('No element indexed by ' + aIdx);
  };

  /**
   * Returns the array representation of this set (which has the proper indices
   * indicated by indexOf). Note that this is a copy of the internal array used
   * for storing the members so that no one can mess with internal state.
   */
  ArraySet.prototype.toArray = function ArraySet_toArray() {
    return this._array.slice();
  };

  var ArraySet_1 = ArraySet;

  var arraySet = {
  	ArraySet: ArraySet_1
  };

  /* -*- Mode: js; js-indent-level: 2; -*- */
  /*
   * Copyright 2014 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */



  /**
   * Determine whether mappingB is after mappingA with respect to generated
   * position.
   */
  function generatedPositionAfter(mappingA, mappingB) {
    // Optimized for most common case
    var lineA = mappingA.generatedLine;
    var lineB = mappingB.generatedLine;
    var columnA = mappingA.generatedColumn;
    var columnB = mappingB.generatedColumn;
    return lineB > lineA || lineB == lineA && columnB >= columnA ||
           util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
  }

  /**
   * A data structure to provide a sorted view of accumulated mappings in a
   * performance conscious manner. It trades a neglibable overhead in general
   * case for a large speedup in case of mappings being added in order.
   */
  function MappingList() {
    this._array = [];
    this._sorted = true;
    // Serves as infimum
    this._last = {generatedLine: -1, generatedColumn: 0};
  }

  /**
   * Iterate through internal items. This method takes the same arguments that
   * `Array.prototype.forEach` takes.
   *
   * NOTE: The order of the mappings is NOT guaranteed.
   */
  MappingList.prototype.unsortedForEach =
    function MappingList_forEach(aCallback, aThisArg) {
      this._array.forEach(aCallback, aThisArg);
    };

  /**
   * Add the given source mapping.
   *
   * @param Object aMapping
   */
  MappingList.prototype.add = function MappingList_add(aMapping) {
    if (generatedPositionAfter(this._last, aMapping)) {
      this._last = aMapping;
      this._array.push(aMapping);
    } else {
      this._sorted = false;
      this._array.push(aMapping);
    }
  };

  /**
   * Returns the flat, sorted array of mappings. The mappings are sorted by
   * generated position.
   *
   * WARNING: This method returns internal data without copying, for
   * performance. The return value must NOT be mutated, and should be treated as
   * an immutable borrow. If you want to take ownership, you must make your own
   * copy.
   */
  MappingList.prototype.toArray = function MappingList_toArray() {
    if (!this._sorted) {
      this._array.sort(util.compareByGeneratedPositionsInflated);
      this._sorted = true;
    }
    return this._array;
  };

  var MappingList_1 = MappingList;

  var mappingList = {
  	MappingList: MappingList_1
  };

  /* -*- Mode: js; js-indent-level: 2; -*- */
  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */



  var ArraySet$1 = arraySet.ArraySet;
  var MappingList$1 = mappingList.MappingList;

  /**
   * An instance of the SourceMapGenerator represents a source map which is
   * being built incrementally. You may pass an object with the following
   * properties:
   *
   *   - file: The filename of the generated source.
   *   - sourceRoot: A root for all relative URLs in this source map.
   */
  function SourceMapGenerator(aArgs) {
    if (!aArgs) {
      aArgs = {};
    }
    this._file = util.getArg(aArgs, 'file', null);
    this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
    this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
    this._sources = new ArraySet$1();
    this._names = new ArraySet$1();
    this._mappings = new MappingList$1();
    this._sourcesContents = null;
  }

  SourceMapGenerator.prototype._version = 3;

  /**
   * Creates a new SourceMapGenerator based on a SourceMapConsumer
   *
   * @param aSourceMapConsumer The SourceMap.
   */
  SourceMapGenerator.fromSourceMap =
    function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
      var sourceRoot = aSourceMapConsumer.sourceRoot;
      var generator = new SourceMapGenerator({
        file: aSourceMapConsumer.file,
        sourceRoot: sourceRoot
      });
      aSourceMapConsumer.eachMapping(function (mapping) {
        var newMapping = {
          generated: {
            line: mapping.generatedLine,
            column: mapping.generatedColumn
          }
        };

        if (mapping.source != null) {
          newMapping.source = mapping.source;
          if (sourceRoot != null) {
            newMapping.source = util.relative(sourceRoot, newMapping.source);
          }

          newMapping.original = {
            line: mapping.originalLine,
            column: mapping.originalColumn
          };

          if (mapping.name != null) {
            newMapping.name = mapping.name;
          }
        }

        generator.addMapping(newMapping);
      });
      aSourceMapConsumer.sources.forEach(function (sourceFile) {
        var sourceRelative = sourceFile;
        if (sourceRoot !== null) {
          sourceRelative = util.relative(sourceRoot, sourceFile);
        }

        if (!generator._sources.has(sourceRelative)) {
          generator._sources.add(sourceRelative);
        }

        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          generator.setSourceContent(sourceFile, content);
        }
      });
      return generator;
    };

  /**
   * Add a single mapping from original source line and column to the generated
   * source's line and column for this source map being created. The mapping
   * object should have the following properties:
   *
   *   - generated: An object with the generated line and column positions.
   *   - original: An object with the original line and column positions.
   *   - source: The original source file (relative to the sourceRoot).
   *   - name: An optional original token name for this mapping.
   */
  SourceMapGenerator.prototype.addMapping =
    function SourceMapGenerator_addMapping(aArgs) {
      var generated = util.getArg(aArgs, 'generated');
      var original = util.getArg(aArgs, 'original', null);
      var source = util.getArg(aArgs, 'source', null);
      var name = util.getArg(aArgs, 'name', null);

      if (!this._skipValidation) {
        this._validateMapping(generated, original, source, name);
      }

      if (source != null) {
        source = String(source);
        if (!this._sources.has(source)) {
          this._sources.add(source);
        }
      }

      if (name != null) {
        name = String(name);
        if (!this._names.has(name)) {
          this._names.add(name);
        }
      }

      this._mappings.add({
        generatedLine: generated.line,
        generatedColumn: generated.column,
        originalLine: original != null && original.line,
        originalColumn: original != null && original.column,
        source: source,
        name: name
      });
    };

  /**
   * Set the source content for a source file.
   */
  SourceMapGenerator.prototype.setSourceContent =
    function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
      var source = aSourceFile;
      if (this._sourceRoot != null) {
        source = util.relative(this._sourceRoot, source);
      }

      if (aSourceContent != null) {
        // Add the source content to the _sourcesContents map.
        // Create a new _sourcesContents map if the property is null.
        if (!this._sourcesContents) {
          this._sourcesContents = Object.create(null);
        }
        this._sourcesContents[util.toSetString(source)] = aSourceContent;
      } else if (this._sourcesContents) {
        // Remove the source file from the _sourcesContents map.
        // If the _sourcesContents map is empty, set the property to null.
        delete this._sourcesContents[util.toSetString(source)];
        if (Object.keys(this._sourcesContents).length === 0) {
          this._sourcesContents = null;
        }
      }
    };

  /**
   * Applies the mappings of a sub-source-map for a specific source file to the
   * source map being generated. Each mapping to the supplied source file is
   * rewritten using the supplied source map. Note: The resolution for the
   * resulting mappings is the minimium of this map and the supplied map.
   *
   * @param aSourceMapConsumer The source map to be applied.
   * @param aSourceFile Optional. The filename of the source file.
   *        If omitted, SourceMapConsumer's file property will be used.
   * @param aSourceMapPath Optional. The dirname of the path to the source map
   *        to be applied. If relative, it is relative to the SourceMapConsumer.
   *        This parameter is needed when the two source maps aren't in the same
   *        directory, and the source map to be applied contains relative source
   *        paths. If so, those relative source paths need to be rewritten
   *        relative to the SourceMapGenerator.
   */
  SourceMapGenerator.prototype.applySourceMap =
    function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
      var sourceFile = aSourceFile;
      // If aSourceFile is omitted, we will use the file property of the SourceMap
      if (aSourceFile == null) {
        if (aSourceMapConsumer.file == null) {
          throw new Error(
            'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
            'or the source map\'s "file" property. Both were omitted.'
          );
        }
        sourceFile = aSourceMapConsumer.file;
      }
      var sourceRoot = this._sourceRoot;
      // Make "sourceFile" relative if an absolute Url is passed.
      if (sourceRoot != null) {
        sourceFile = util.relative(sourceRoot, sourceFile);
      }
      // Applying the SourceMap can add and remove items from the sources and
      // the names array.
      var newSources = new ArraySet$1();
      var newNames = new ArraySet$1();

      // Find mappings for the "sourceFile"
      this._mappings.unsortedForEach(function (mapping) {
        if (mapping.source === sourceFile && mapping.originalLine != null) {
          // Check if it can be mapped by the source map, then update the mapping.
          var original = aSourceMapConsumer.originalPositionFor({
            line: mapping.originalLine,
            column: mapping.originalColumn
          });
          if (original.source != null) {
            // Copy mapping
            mapping.source = original.source;
            if (aSourceMapPath != null) {
              mapping.source = util.join(aSourceMapPath, mapping.source);
            }
            if (sourceRoot != null) {
              mapping.source = util.relative(sourceRoot, mapping.source);
            }
            mapping.originalLine = original.line;
            mapping.originalColumn = original.column;
            if (original.name != null) {
              mapping.name = original.name;
            }
          }
        }

        var source = mapping.source;
        if (source != null && !newSources.has(source)) {
          newSources.add(source);
        }

        var name = mapping.name;
        if (name != null && !newNames.has(name)) {
          newNames.add(name);
        }

      }, this);
      this._sources = newSources;
      this._names = newNames;

      // Copy sourcesContents of applied map.
      aSourceMapConsumer.sources.forEach(function (sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          if (aSourceMapPath != null) {
            sourceFile = util.join(aSourceMapPath, sourceFile);
          }
          if (sourceRoot != null) {
            sourceFile = util.relative(sourceRoot, sourceFile);
          }
          this.setSourceContent(sourceFile, content);
        }
      }, this);
    };

  /**
   * A mapping can have one of the three levels of data:
   *
   *   1. Just the generated position.
   *   2. The Generated position, original position, and original source.
   *   3. Generated and original position, original source, as well as a name
   *      token.
   *
   * To maintain consistency, we validate that any new mapping being added falls
   * in to one of these categories.
   */
  SourceMapGenerator.prototype._validateMapping =
    function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
                                                aName) {
      // When aOriginal is truthy but has empty values for .line and .column,
      // it is most likely a programmer error. In this case we throw a very
      // specific error message to try to guide them the right way.
      // For example: https://github.com/Polymer/polymer-bundler/pull/519
      if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {
          throw new Error(
              'original.line and original.column are not numbers -- you probably meant to omit ' +
              'the original mapping entirely and only map the generated position. If so, pass ' +
              'null for the original mapping instead of an object with empty or null values.'
          );
      }

      if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
          && aGenerated.line > 0 && aGenerated.column >= 0
          && !aOriginal && !aSource && !aName) {
        // Case 1.
        return;
      }
      else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
               && aOriginal && 'line' in aOriginal && 'column' in aOriginal
               && aGenerated.line > 0 && aGenerated.column >= 0
               && aOriginal.line > 0 && aOriginal.column >= 0
               && aSource) {
        // Cases 2 and 3.
        return;
      }
      else {
        throw new Error('Invalid mapping: ' + JSON.stringify({
          generated: aGenerated,
          source: aSource,
          original: aOriginal,
          name: aName
        }));
      }
    };

  /**
   * Serialize the accumulated mappings in to the stream of base 64 VLQs
   * specified by the source map format.
   */
  SourceMapGenerator.prototype._serializeMappings =
    function SourceMapGenerator_serializeMappings() {
      var previousGeneratedColumn = 0;
      var previousGeneratedLine = 1;
      var previousOriginalColumn = 0;
      var previousOriginalLine = 0;
      var previousName = 0;
      var previousSource = 0;
      var result = '';
      var next;
      var mapping;
      var nameIdx;
      var sourceIdx;

      var mappings = this._mappings.toArray();
      for (var i = 0, len = mappings.length; i < len; i++) {
        mapping = mappings[i];
        next = '';

        if (mapping.generatedLine !== previousGeneratedLine) {
          previousGeneratedColumn = 0;
          while (mapping.generatedLine !== previousGeneratedLine) {
            next += ';';
            previousGeneratedLine++;
          }
        }
        else {
          if (i > 0) {
            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
              continue;
            }
            next += ',';
          }
        }

        next += base64Vlq.encode(mapping.generatedColumn
                                   - previousGeneratedColumn);
        previousGeneratedColumn = mapping.generatedColumn;

        if (mapping.source != null) {
          sourceIdx = this._sources.indexOf(mapping.source);
          next += base64Vlq.encode(sourceIdx - previousSource);
          previousSource = sourceIdx;

          // lines are stored 0-based in SourceMap spec version 3
          next += base64Vlq.encode(mapping.originalLine - 1
                                     - previousOriginalLine);
          previousOriginalLine = mapping.originalLine - 1;

          next += base64Vlq.encode(mapping.originalColumn
                                     - previousOriginalColumn);
          previousOriginalColumn = mapping.originalColumn;

          if (mapping.name != null) {
            nameIdx = this._names.indexOf(mapping.name);
            next += base64Vlq.encode(nameIdx - previousName);
            previousName = nameIdx;
          }
        }

        result += next;
      }

      return result;
    };

  SourceMapGenerator.prototype._generateSourcesContent =
    function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
      return aSources.map(function (source) {
        if (!this._sourcesContents) {
          return null;
        }
        if (aSourceRoot != null) {
          source = util.relative(aSourceRoot, source);
        }
        var key = util.toSetString(source);
        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
          ? this._sourcesContents[key]
          : null;
      }, this);
    };

  /**
   * Externalize the source map.
   */
  SourceMapGenerator.prototype.toJSON =
    function SourceMapGenerator_toJSON() {
      var map = {
        version: this._version,
        sources: this._sources.toArray(),
        names: this._names.toArray(),
        mappings: this._serializeMappings()
      };
      if (this._file != null) {
        map.file = this._file;
      }
      if (this._sourceRoot != null) {
        map.sourceRoot = this._sourceRoot;
      }
      if (this._sourcesContents) {
        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
      }

      return map;
    };

  /**
   * Render the source map being generated to a string.
   */
  SourceMapGenerator.prototype.toString =
    function SourceMapGenerator_toString() {
      return JSON.stringify(this.toJSON());
    };

  var SourceMapGenerator_1 = SourceMapGenerator;

  var sourceMapGenerator = {
  	SourceMapGenerator: SourceMapGenerator_1
  };

  var binarySearch = createCommonjsModule(function (module, exports) {
  /* -*- Mode: js; js-indent-level: 2; -*- */
  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */

  exports.GREATEST_LOWER_BOUND = 1;
  exports.LEAST_UPPER_BOUND = 2;

  /**
   * Recursive implementation of binary search.
   *
   * @param aLow Indices here and lower do not contain the needle.
   * @param aHigh Indices here and higher do not contain the needle.
   * @param aNeedle The element being searched for.
   * @param aHaystack The non-empty array being searched.
   * @param aCompare Function which takes two elements and returns -1, 0, or 1.
   * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
   *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
   *     closest element that is smaller than or greater than the one we are
   *     searching for, respectively, if the exact element cannot be found.
   */
  function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
    // This function terminates when one of the following is true:
    //
    //   1. We find the exact element we are looking for.
    //
    //   2. We did not find the exact element, but we can return the index of
    //      the next-closest element.
    //
    //   3. We did not find the exact element, and there is no next-closest
    //      element than the one we are searching for, so we return -1.
    var mid = Math.floor((aHigh - aLow) / 2) + aLow;
    var cmp = aCompare(aNeedle, aHaystack[mid], true);
    if (cmp === 0) {
      // Found the element we are looking for.
      return mid;
    }
    else if (cmp > 0) {
      // Our needle is greater than aHaystack[mid].
      if (aHigh - mid > 1) {
        // The element is in the upper half.
        return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
      }

      // The exact needle element was not found in this haystack. Determine if
      // we are in termination case (3) or (2) and return the appropriate thing.
      if (aBias == exports.LEAST_UPPER_BOUND) {
        return aHigh < aHaystack.length ? aHigh : -1;
      } else {
        return mid;
      }
    }
    else {
      // Our needle is less than aHaystack[mid].
      if (mid - aLow > 1) {
        // The element is in the lower half.
        return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
      }

      // we are in termination case (3) or (2) and return the appropriate thing.
      if (aBias == exports.LEAST_UPPER_BOUND) {
        return mid;
      } else {
        return aLow < 0 ? -1 : aLow;
      }
    }
  }

  /**
   * This is an implementation of binary search which will always try and return
   * the index of the closest element if there is no exact hit. This is because
   * mappings between original and generated line/col pairs are single points,
   * and there is an implicit region between each of them, so a miss just means
   * that you aren't on the very start of a region.
   *
   * @param aNeedle The element you are looking for.
   * @param aHaystack The array that is being searched.
   * @param aCompare A function which takes the needle and an element in the
   *     array and returns -1, 0, or 1 depending on whether the needle is less
   *     than, equal to, or greater than the element, respectively.
   * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
   *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
   *     closest element that is smaller than or greater than the one we are
   *     searching for, respectively, if the exact element cannot be found.
   *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
   */
  exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
    if (aHaystack.length === 0) {
      return -1;
    }

    var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
                                aCompare, aBias || exports.GREATEST_LOWER_BOUND);
    if (index < 0) {
      return -1;
    }

    // We have found either the exact element, or the next-closest element than
    // the one we are searching for. However, there may be more than one such
    // element. Make sure we always return the smallest of these.
    while (index - 1 >= 0) {
      if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
        break;
      }
      --index;
    }

    return index;
  };
  });

  /* -*- Mode: js; js-indent-level: 2; -*- */
  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */

  // It turns out that some (most?) JavaScript engines don't self-host
  // `Array.prototype.sort`. This makes sense because C++ will likely remain
  // faster than JS when doing raw CPU-intensive sorting. However, when using a
  // custom comparator function, calling back and forth between the VM's C++ and
  // JIT'd JS is rather slow *and* loses JIT type information, resulting in
  // worse generated code for the comparator function than would be optimal. In
  // fact, when sorting with a comparator, these costs outweigh the benefits of
  // sorting in C++. By using our own JS-implemented Quick Sort (below), we get
  // a ~3500ms mean speed-up in `bench/bench.html`.

  /**
   * Swap the elements indexed by `x` and `y` in the array `ary`.
   *
   * @param {Array} ary
   *        The array.
   * @param {Number} x
   *        The index of the first item.
   * @param {Number} y
   *        The index of the second item.
   */
  function swap$1(ary, x, y) {
    var temp = ary[x];
    ary[x] = ary[y];
    ary[y] = temp;
  }

  /**
   * Returns a random integer within the range `low .. high` inclusive.
   *
   * @param {Number} low
   *        The lower bound on the range.
   * @param {Number} high
   *        The upper bound on the range.
   */
  function randomIntInRange(low, high) {
    return Math.round(low + (Math.random() * (high - low)));
  }

  /**
   * The Quick Sort algorithm.
   *
   * @param {Array} ary
   *        An array to sort.
   * @param {function} comparator
   *        Function to use to compare two items.
   * @param {Number} p
   *        Start index of the array
   * @param {Number} r
   *        End index of the array
   */
  function doQuickSort(ary, comparator, p, r) {
    // If our lower bound is less than our upper bound, we (1) partition the
    // array into two pieces and (2) recurse on each half. If it is not, this is
    // the empty array and our base case.

    if (p < r) {
      // (1) Partitioning.
      //
      // The partitioning chooses a pivot between `p` and `r` and moves all
      // elements that are less than or equal to the pivot to the before it, and
      // all the elements that are greater than it after it. The effect is that
      // once partition is done, the pivot is in the exact place it will be when
      // the array is put in sorted order, and it will not need to be moved
      // again. This runs in O(n) time.

      // Always choose a random pivot so that an input array which is reverse
      // sorted does not cause O(n^2) running time.
      var pivotIndex = randomIntInRange(p, r);
      var i = p - 1;

      swap$1(ary, pivotIndex, r);
      var pivot = ary[r];

      // Immediately after `j` is incremented in this loop, the following hold
      // true:
      //
      //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
      //
      //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
      for (var j = p; j < r; j++) {
        if (comparator(ary[j], pivot) <= 0) {
          i += 1;
          swap$1(ary, i, j);
        }
      }

      swap$1(ary, i + 1, j);
      var q = i + 1;

      // (2) Recurse on each half.

      doQuickSort(ary, comparator, p, q - 1);
      doQuickSort(ary, comparator, q + 1, r);
    }
  }

  /**
   * Sort the given array in-place with the given comparator function.
   *
   * @param {Array} ary
   *        An array to sort.
   * @param {function} comparator
   *        Function to use to compare two items.
   */
  var quickSort_1 = function (ary, comparator) {
    doQuickSort(ary, comparator, 0, ary.length - 1);
  };

  var quickSort = {
  	quickSort: quickSort_1
  };

  /* -*- Mode: js; js-indent-level: 2; -*- */
  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */



  var ArraySet$2 = arraySet.ArraySet;

  var quickSort$1 = quickSort.quickSort;

  function SourceMapConsumer(aSourceMap, aSourceMapURL) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === 'string') {
      sourceMap = util.parseSourceMapInput(aSourceMap);
    }

    return sourceMap.sections != null
      ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)
      : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
  }

  SourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {
    return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
  };

  /**
   * The version of the source mapping spec that we are consuming.
   */
  SourceMapConsumer.prototype._version = 3;

  // `__generatedMappings` and `__originalMappings` are arrays that hold the
  // parsed mapping coordinates from the source map's "mappings" attribute. They
  // are lazily instantiated, accessed via the `_generatedMappings` and
  // `_originalMappings` getters respectively, and we only parse the mappings
  // and create these arrays once queried for a source location. We jump through
  // these hoops because there can be many thousands of mappings, and parsing
  // them is expensive, so we only want to do it if we must.
  //
  // Each object in the arrays is of the form:
  //
  //     {
  //       generatedLine: The line number in the generated code,
  //       generatedColumn: The column number in the generated code,
  //       source: The path to the original source file that generated this
  //               chunk of code,
  //       originalLine: The line number in the original source that
  //                     corresponds to this chunk of generated code,
  //       originalColumn: The column number in the original source that
  //                       corresponds to this chunk of generated code,
  //       name: The name of the original symbol which generated this chunk of
  //             code.
  //     }
  //
  // All properties except for `generatedLine` and `generatedColumn` can be
  // `null`.
  //
  // `_generatedMappings` is ordered by the generated positions.
  //
  // `_originalMappings` is ordered by the original positions.

  SourceMapConsumer.prototype.__generatedMappings = null;
  Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
    configurable: true,
    enumerable: true,
    get: function () {
      if (!this.__generatedMappings) {
        this._parseMappings(this._mappings, this.sourceRoot);
      }

      return this.__generatedMappings;
    }
  });

  SourceMapConsumer.prototype.__originalMappings = null;
  Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
    configurable: true,
    enumerable: true,
    get: function () {
      if (!this.__originalMappings) {
        this._parseMappings(this._mappings, this.sourceRoot);
      }

      return this.__originalMappings;
    }
  });

  SourceMapConsumer.prototype._charIsMappingSeparator =
    function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
      var c = aStr.charAt(index);
      return c === ";" || c === ",";
    };

  /**
   * Parse the mappings in a string in to a data structure which we can easily
   * query (the ordered arrays in the `this.__generatedMappings` and
   * `this.__originalMappings` properties).
   */
  SourceMapConsumer.prototype._parseMappings =
    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      throw new Error("Subclasses must implement _parseMappings");
    };

  SourceMapConsumer.GENERATED_ORDER = 1;
  SourceMapConsumer.ORIGINAL_ORDER = 2;

  SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
  SourceMapConsumer.LEAST_UPPER_BOUND = 2;

  /**
   * Iterate over each mapping between an original source/line/column and a
   * generated line/column in this source map.
   *
   * @param Function aCallback
   *        The function that is called with each mapping.
   * @param Object aContext
   *        Optional. If specified, this object will be the value of `this` every
   *        time that `aCallback` is called.
   * @param aOrder
   *        Either `SourceMapConsumer.GENERATED_ORDER` or
   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
   *        iterate over the mappings sorted by the generated file's line/column
   *        order or the original's source/line/column order, respectively. Defaults to
   *        `SourceMapConsumer.GENERATED_ORDER`.
   */
  SourceMapConsumer.prototype.eachMapping =
    function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
      var context = aContext || null;
      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

      var mappings;
      switch (order) {
      case SourceMapConsumer.GENERATED_ORDER:
        mappings = this._generatedMappings;
        break;
      case SourceMapConsumer.ORIGINAL_ORDER:
        mappings = this._originalMappings;
        break;
      default:
        throw new Error("Unknown order of iteration.");
      }

      var sourceRoot = this.sourceRoot;
      mappings.map(function (mapping) {
        var source = mapping.source === null ? null : this._sources.at(mapping.source);
        source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);
        return {
          source: source,
          generatedLine: mapping.generatedLine,
          generatedColumn: mapping.generatedColumn,
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: mapping.name === null ? null : this._names.at(mapping.name)
        };
      }, this).forEach(aCallback, context);
    };

  /**
   * Returns all generated line and column information for the original source,
   * line, and column provided. If no column is provided, returns all mappings
   * corresponding to a either the line we are searching for or the next
   * closest line that has any mappings. Otherwise, returns all mappings
   * corresponding to the given line and either the column we are searching for
   * or the next closest column that has any offsets.
   *
   * The only argument is an object with the following properties:
   *
   *   - source: The filename of the original source.
   *   - line: The line number in the original source.  The line number is 1-based.
   *   - column: Optional. the column number in the original source.
   *    The column number is 0-based.
   *
   * and an array of objects is returned, each with the following properties:
   *
   *   - line: The line number in the generated source, or null.  The
   *    line number is 1-based.
   *   - column: The column number in the generated source, or null.
   *    The column number is 0-based.
   */
  SourceMapConsumer.prototype.allGeneratedPositionsFor =
    function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
      var line = util.getArg(aArgs, 'line');

      // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
      // returns the index of the closest mapping less than the needle. By
      // setting needle.originalColumn to 0, we thus find the last mapping for
      // the given line, provided such a mapping exists.
      var needle = {
        source: util.getArg(aArgs, 'source'),
        originalLine: line,
        originalColumn: util.getArg(aArgs, 'column', 0)
      };

      needle.source = this._findSourceIndex(needle.source);
      if (needle.source < 0) {
        return [];
      }

      var mappings = [];

      var index = this._findMapping(needle,
                                    this._originalMappings,
                                    "originalLine",
                                    "originalColumn",
                                    util.compareByOriginalPositions,
                                    binarySearch.LEAST_UPPER_BOUND);
      if (index >= 0) {
        var mapping = this._originalMappings[index];

        if (aArgs.column === undefined) {
          var originalLine = mapping.originalLine;

          // Iterate until either we run out of mappings, or we run into
          // a mapping for a different line than the one we found. Since
          // mappings are sorted, this is guaranteed to find all mappings for
          // the line we found.
          while (mapping && mapping.originalLine === originalLine) {
            mappings.push({
              line: util.getArg(mapping, 'generatedLine', null),
              column: util.getArg(mapping, 'generatedColumn', null),
              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
            });

            mapping = this._originalMappings[++index];
          }
        } else {
          var originalColumn = mapping.originalColumn;

          // Iterate until either we run out of mappings, or we run into
          // a mapping for a different line than the one we were searching for.
          // Since mappings are sorted, this is guaranteed to find all mappings for
          // the line we are searching for.
          while (mapping &&
                 mapping.originalLine === line &&
                 mapping.originalColumn == originalColumn) {
            mappings.push({
              line: util.getArg(mapping, 'generatedLine', null),
              column: util.getArg(mapping, 'generatedColumn', null),
              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
            });

            mapping = this._originalMappings[++index];
          }
        }
      }

      return mappings;
    };

  var SourceMapConsumer_1 = SourceMapConsumer;

  /**
   * A BasicSourceMapConsumer instance represents a parsed source map which we can
   * query for information about the original file positions by giving it a file
   * position in the generated source.
   *
   * The first parameter is the raw source map (either as a JSON string, or
   * already parsed to an object). According to the spec, source maps have the
   * following attributes:
   *
   *   - version: Which version of the source map spec this map is following.
   *   - sources: An array of URLs to the original source files.
   *   - names: An array of identifiers which can be referrenced by individual mappings.
   *   - sourceRoot: Optional. The URL root from which all sources are relative.
   *   - sourcesContent: Optional. An array of contents of the original source files.
   *   - mappings: A string of base64 VLQs which contain the actual mappings.
   *   - file: Optional. The generated file this source map is associated with.
   *
   * Here is an example source map, taken from the source map spec[0]:
   *
   *     {
   *       version : 3,
   *       file: "out.js",
   *       sourceRoot : "",
   *       sources: ["foo.js", "bar.js"],
   *       names: ["src", "maps", "are", "fun"],
   *       mappings: "AA,AB;;ABCDE;"
   *     }
   *
   * The second parameter, if given, is a string whose value is the URL
   * at which the source map was found.  This URL is used to compute the
   * sources array.
   *
   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
   */
  function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === 'string') {
      sourceMap = util.parseSourceMapInput(aSourceMap);
    }

    var version = util.getArg(sourceMap, 'version');
    var sources = util.getArg(sourceMap, 'sources');
    // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
    // requires the array) to play nice here.
    var names = util.getArg(sourceMap, 'names', []);
    var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
    var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
    var mappings = util.getArg(sourceMap, 'mappings');
    var file = util.getArg(sourceMap, 'file', null);

    // Once again, Sass deviates from the spec and supplies the version as a
    // string rather than a number, so we use loose equality checking here.
    if (version != this._version) {
      throw new Error('Unsupported version: ' + version);
    }

    if (sourceRoot) {
      sourceRoot = util.normalize(sourceRoot);
    }

    sources = sources
      .map(String)
      // Some source maps produce relative source paths like "./foo.js" instead of
      // "foo.js".  Normalize these first so that future comparisons will succeed.
      // See bugzil.la/1090768.
      .map(util.normalize)
      // Always ensure that absolute sources are internally stored relative to
      // the source root, if the source root is absolute. Not doing this would
      // be particularly problematic when the source root is a prefix of the
      // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
      .map(function (source) {
        return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)
          ? util.relative(sourceRoot, source)
          : source;
      });

    // Pass `true` below to allow duplicate names and sources. While source maps
    // are intended to be compressed and deduplicated, the TypeScript compiler
    // sometimes generates source maps with duplicates in them. See Github issue
    // #72 and bugzil.la/889492.
    this._names = ArraySet$2.fromArray(names.map(String), true);
    this._sources = ArraySet$2.fromArray(sources, true);

    this._absoluteSources = this._sources.toArray().map(function (s) {
      return util.computeSourceURL(sourceRoot, s, aSourceMapURL);
    });

    this.sourceRoot = sourceRoot;
    this.sourcesContent = sourcesContent;
    this._mappings = mappings;
    this._sourceMapURL = aSourceMapURL;
    this.file = file;
  }

  BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
  BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

  /**
   * Utility function to find the index of a source.  Returns -1 if not
   * found.
   */
  BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
    var relativeSource = aSource;
    if (this.sourceRoot != null) {
      relativeSource = util.relative(this.sourceRoot, relativeSource);
    }

    if (this._sources.has(relativeSource)) {
      return this._sources.indexOf(relativeSource);
    }

    // Maybe aSource is an absolute URL as returned by |sources|.  In
    // this case we can't simply undo the transform.
    var i;
    for (i = 0; i < this._absoluteSources.length; ++i) {
      if (this._absoluteSources[i] == aSource) {
        return i;
      }
    }

    return -1;
  };

  /**
   * Create a BasicSourceMapConsumer from a SourceMapGenerator.
   *
   * @param SourceMapGenerator aSourceMap
   *        The source map that will be consumed.
   * @param String aSourceMapURL
   *        The URL at which the source map can be found (optional)
   * @returns BasicSourceMapConsumer
   */
  BasicSourceMapConsumer.fromSourceMap =
    function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
      var smc = Object.create(BasicSourceMapConsumer.prototype);

      var names = smc._names = ArraySet$2.fromArray(aSourceMap._names.toArray(), true);
      var sources = smc._sources = ArraySet$2.fromArray(aSourceMap._sources.toArray(), true);
      smc.sourceRoot = aSourceMap._sourceRoot;
      smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
                                                              smc.sourceRoot);
      smc.file = aSourceMap._file;
      smc._sourceMapURL = aSourceMapURL;
      smc._absoluteSources = smc._sources.toArray().map(function (s) {
        return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
      });

      // Because we are modifying the entries (by converting string sources and
      // names to indices into the sources and names ArraySets), we have to make
      // a copy of the entry or else bad things happen. Shared mutable state
      // strikes again! See github issue #191.

      var generatedMappings = aSourceMap._mappings.toArray().slice();
      var destGeneratedMappings = smc.__generatedMappings = [];
      var destOriginalMappings = smc.__originalMappings = [];

      for (var i = 0, length = generatedMappings.length; i < length; i++) {
        var srcMapping = generatedMappings[i];
        var destMapping = new Mapping;
        destMapping.generatedLine = srcMapping.generatedLine;
        destMapping.generatedColumn = srcMapping.generatedColumn;

        if (srcMapping.source) {
          destMapping.source = sources.indexOf(srcMapping.source);
          destMapping.originalLine = srcMapping.originalLine;
          destMapping.originalColumn = srcMapping.originalColumn;

          if (srcMapping.name) {
            destMapping.name = names.indexOf(srcMapping.name);
          }

          destOriginalMappings.push(destMapping);
        }

        destGeneratedMappings.push(destMapping);
      }

      quickSort$1(smc.__originalMappings, util.compareByOriginalPositions);

      return smc;
    };

  /**
   * The version of the source mapping spec that we are consuming.
   */
  BasicSourceMapConsumer.prototype._version = 3;

  /**
   * The list of original sources.
   */
  Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
    get: function () {
      return this._absoluteSources.slice();
    }
  });

  /**
   * Provide the JIT with a nice shape / hidden class.
   */
  function Mapping() {
    this.generatedLine = 0;
    this.generatedColumn = 0;
    this.source = null;
    this.originalLine = null;
    this.originalColumn = null;
    this.name = null;
  }

  /**
   * Parse the mappings in a string in to a data structure which we can easily
   * query (the ordered arrays in the `this.__generatedMappings` and
   * `this.__originalMappings` properties).
   */
  BasicSourceMapConsumer.prototype._parseMappings =
    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      var generatedLine = 1;
      var previousGeneratedColumn = 0;
      var previousOriginalLine = 0;
      var previousOriginalColumn = 0;
      var previousSource = 0;
      var previousName = 0;
      var length = aStr.length;
      var index = 0;
      var cachedSegments = {};
      var temp = {};
      var originalMappings = [];
      var generatedMappings = [];
      var mapping, str, segment, end, value;

      while (index < length) {
        if (aStr.charAt(index) === ';') {
          generatedLine++;
          index++;
          previousGeneratedColumn = 0;
        }
        else if (aStr.charAt(index) === ',') {
          index++;
        }
        else {
          mapping = new Mapping();
          mapping.generatedLine = generatedLine;

          // Because each offset is encoded relative to the previous one,
          // many segments often have the same encoding. We can exploit this
          // fact by caching the parsed variable length fields of each segment,
          // allowing us to avoid a second parse if we encounter the same
          // segment again.
          for (end = index; end < length; end++) {
            if (this._charIsMappingSeparator(aStr, end)) {
              break;
            }
          }
          str = aStr.slice(index, end);

          segment = cachedSegments[str];
          if (segment) {
            index += str.length;
          } else {
            segment = [];
            while (index < end) {
              base64Vlq.decode(aStr, index, temp);
              value = temp.value;
              index = temp.rest;
              segment.push(value);
            }

            if (segment.length === 2) {
              throw new Error('Found a source, but no line and column');
            }

            if (segment.length === 3) {
              throw new Error('Found a source and line, but no column');
            }

            cachedSegments[str] = segment;
          }

          // Generated column.
          mapping.generatedColumn = previousGeneratedColumn + segment[0];
          previousGeneratedColumn = mapping.generatedColumn;

          if (segment.length > 1) {
            // Original source.
            mapping.source = previousSource + segment[1];
            previousSource += segment[1];

            // Original line.
            mapping.originalLine = previousOriginalLine + segment[2];
            previousOriginalLine = mapping.originalLine;
            // Lines are stored 0-based
            mapping.originalLine += 1;

            // Original column.
            mapping.originalColumn = previousOriginalColumn + segment[3];
            previousOriginalColumn = mapping.originalColumn;

            if (segment.length > 4) {
              // Original name.
              mapping.name = previousName + segment[4];
              previousName += segment[4];
            }
          }

          generatedMappings.push(mapping);
          if (typeof mapping.originalLine === 'number') {
            originalMappings.push(mapping);
          }
        }
      }

      quickSort$1(generatedMappings, util.compareByGeneratedPositionsDeflated);
      this.__generatedMappings = generatedMappings;

      quickSort$1(originalMappings, util.compareByOriginalPositions);
      this.__originalMappings = originalMappings;
    };

  /**
   * Find the mapping that best matches the hypothetical "needle" mapping that
   * we are searching for in the given "haystack" of mappings.
   */
  BasicSourceMapConsumer.prototype._findMapping =
    function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
                                           aColumnName, aComparator, aBias) {
      // To return the position we are searching for, we must first find the
      // mapping for the given position and then return the opposite position it
      // points to. Because the mappings are sorted, we can use binary search to
      // find the best mapping.

      if (aNeedle[aLineName] <= 0) {
        throw new TypeError('Line must be greater than or equal to 1, got '
                            + aNeedle[aLineName]);
      }
      if (aNeedle[aColumnName] < 0) {
        throw new TypeError('Column must be greater than or equal to 0, got '
                            + aNeedle[aColumnName]);
      }

      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
    };

  /**
   * Compute the last column for each generated mapping. The last column is
   * inclusive.
   */
  BasicSourceMapConsumer.prototype.computeColumnSpans =
    function SourceMapConsumer_computeColumnSpans() {
      for (var index = 0; index < this._generatedMappings.length; ++index) {
        var mapping = this._generatedMappings[index];

        // Mappings do not contain a field for the last generated columnt. We
        // can come up with an optimistic estimate, however, by assuming that
        // mappings are contiguous (i.e. given two consecutive mappings, the
        // first mapping ends where the second one starts).
        if (index + 1 < this._generatedMappings.length) {
          var nextMapping = this._generatedMappings[index + 1];

          if (mapping.generatedLine === nextMapping.generatedLine) {
            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
            continue;
          }
        }

        // The last mapping for each line spans the entire line.
        mapping.lastGeneratedColumn = Infinity;
      }
    };

  /**
   * Returns the original source, line, and column information for the generated
   * source's line and column positions provided. The only argument is an object
   * with the following properties:
   *
   *   - line: The line number in the generated source.  The line number
   *     is 1-based.
   *   - column: The column number in the generated source.  The column
   *     number is 0-based.
   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
   *     closest element that is smaller than or greater than the one we are
   *     searching for, respectively, if the exact element cannot be found.
   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
   *
   * and an object is returned with the following properties:
   *
   *   - source: The original source file, or null.
   *   - line: The line number in the original source, or null.  The
   *     line number is 1-based.
   *   - column: The column number in the original source, or null.  The
   *     column number is 0-based.
   *   - name: The original identifier, or null.
   */
  BasicSourceMapConsumer.prototype.originalPositionFor =
    function SourceMapConsumer_originalPositionFor(aArgs) {
      var needle = {
        generatedLine: util.getArg(aArgs, 'line'),
        generatedColumn: util.getArg(aArgs, 'column')
      };

      var index = this._findMapping(
        needle,
        this._generatedMappings,
        "generatedLine",
        "generatedColumn",
        util.compareByGeneratedPositionsDeflated,
        util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
      );

      if (index >= 0) {
        var mapping = this._generatedMappings[index];

        if (mapping.generatedLine === needle.generatedLine) {
          var source = util.getArg(mapping, 'source', null);
          if (source !== null) {
            source = this._sources.at(source);
            source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
          }
          var name = util.getArg(mapping, 'name', null);
          if (name !== null) {
            name = this._names.at(name);
          }
          return {
            source: source,
            line: util.getArg(mapping, 'originalLine', null),
            column: util.getArg(mapping, 'originalColumn', null),
            name: name
          };
        }
      }

      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    };

  /**
   * Return true if we have the source content for every source in the source
   * map, false otherwise.
   */
  BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
    function BasicSourceMapConsumer_hasContentsOfAllSources() {
      if (!this.sourcesContent) {
        return false;
      }
      return this.sourcesContent.length >= this._sources.size() &&
        !this.sourcesContent.some(function (sc) { return sc == null; });
    };

  /**
   * Returns the original source content. The only argument is the url of the
   * original source file. Returns null if no original source content is
   * available.
   */
  BasicSourceMapConsumer.prototype.sourceContentFor =
    function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
      if (!this.sourcesContent) {
        return null;
      }

      var index = this._findSourceIndex(aSource);
      if (index >= 0) {
        return this.sourcesContent[index];
      }

      var relativeSource = aSource;
      if (this.sourceRoot != null) {
        relativeSource = util.relative(this.sourceRoot, relativeSource);
      }

      var url;
      if (this.sourceRoot != null
          && (url = util.urlParse(this.sourceRoot))) {
        // XXX: file:// URIs and absolute paths lead to unexpected behavior for
        // many users. We can help them out when they expect file:// URIs to
        // behave like it would if they were running a local HTTP server. See
        // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
        var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
        if (url.scheme == "file"
            && this._sources.has(fileUriAbsPath)) {
          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
        }

        if ((!url.path || url.path == "/")
            && this._sources.has("/" + relativeSource)) {
          return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
        }
      }

      // This function is used recursively from
      // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
      // don't want to throw if we can't find the source - we just want to
      // return null, so we provide a flag to exit gracefully.
      if (nullOnMissing) {
        return null;
      }
      else {
        throw new Error('"' + relativeSource + '" is not in the SourceMap.');
      }
    };

  /**
   * Returns the generated line and column information for the original source,
   * line, and column positions provided. The only argument is an object with
   * the following properties:
   *
   *   - source: The filename of the original source.
   *   - line: The line number in the original source.  The line number
   *     is 1-based.
   *   - column: The column number in the original source.  The column
   *     number is 0-based.
   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
   *     closest element that is smaller than or greater than the one we are
   *     searching for, respectively, if the exact element cannot be found.
   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
   *
   * and an object is returned with the following properties:
   *
   *   - line: The line number in the generated source, or null.  The
   *     line number is 1-based.
   *   - column: The column number in the generated source, or null.
   *     The column number is 0-based.
   */
  BasicSourceMapConsumer.prototype.generatedPositionFor =
    function SourceMapConsumer_generatedPositionFor(aArgs) {
      var source = util.getArg(aArgs, 'source');
      source = this._findSourceIndex(source);
      if (source < 0) {
        return {
          line: null,
          column: null,
          lastColumn: null
        };
      }

      var needle = {
        source: source,
        originalLine: util.getArg(aArgs, 'line'),
        originalColumn: util.getArg(aArgs, 'column')
      };

      var index = this._findMapping(
        needle,
        this._originalMappings,
        "originalLine",
        "originalColumn",
        util.compareByOriginalPositions,
        util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
      );

      if (index >= 0) {
        var mapping = this._originalMappings[index];

        if (mapping.source === needle.source) {
          return {
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          };
        }
      }

      return {
        line: null,
        column: null,
        lastColumn: null
      };
    };

  var BasicSourceMapConsumer_1 = BasicSourceMapConsumer;

  /**
   * An IndexedSourceMapConsumer instance represents a parsed source map which
   * we can query for information. It differs from BasicSourceMapConsumer in
   * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
   * input.
   *
   * The first parameter is a raw source map (either as a JSON string, or already
   * parsed to an object). According to the spec for indexed source maps, they
   * have the following attributes:
   *
   *   - version: Which version of the source map spec this map is following.
   *   - file: Optional. The generated file this source map is associated with.
   *   - sections: A list of section definitions.
   *
   * Each value under the "sections" field has two fields:
   *   - offset: The offset into the original specified at which this section
   *       begins to apply, defined as an object with a "line" and "column"
   *       field.
   *   - map: A source map definition. This source map could also be indexed,
   *       but doesn't have to be.
   *
   * Instead of the "map" field, it's also possible to have a "url" field
   * specifying a URL to retrieve a source map from, but that's currently
   * unsupported.
   *
   * Here's an example source map, taken from the source map spec[0], but
   * modified to omit a section which uses the "url" field.
   *
   *  {
   *    version : 3,
   *    file: "app.js",
   *    sections: [{
   *      offset: {line:100, column:10},
   *      map: {
   *        version : 3,
   *        file: "section.js",
   *        sources: ["foo.js", "bar.js"],
   *        names: ["src", "maps", "are", "fun"],
   *        mappings: "AAAA,E;;ABCDE;"
   *      }
   *    }],
   *  }
   *
   * The second parameter, if given, is a string whose value is the URL
   * at which the source map was found.  This URL is used to compute the
   * sources array.
   *
   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
   */
  function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === 'string') {
      sourceMap = util.parseSourceMapInput(aSourceMap);
    }

    var version = util.getArg(sourceMap, 'version');
    var sections = util.getArg(sourceMap, 'sections');

    if (version != this._version) {
      throw new Error('Unsupported version: ' + version);
    }

    this._sources = new ArraySet$2();
    this._names = new ArraySet$2();

    var lastOffset = {
      line: -1,
      column: 0
    };
    this._sections = sections.map(function (s) {
      if (s.url) {
        // The url field will require support for asynchronicity.
        // See https://github.com/mozilla/source-map/issues/16
        throw new Error('Support for url field in sections not implemented.');
      }
      var offset = util.getArg(s, 'offset');
      var offsetLine = util.getArg(offset, 'line');
      var offsetColumn = util.getArg(offset, 'column');

      if (offsetLine < lastOffset.line ||
          (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
        throw new Error('Section offsets must be ordered and non-overlapping.');
      }
      lastOffset = offset;

      return {
        generatedOffset: {
          // The offset fields are 0-based, but we use 1-based indices when
          // encoding/decoding from VLQ.
          generatedLine: offsetLine + 1,
          generatedColumn: offsetColumn + 1
        },
        consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)
      }
    });
  }

  IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
  IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

  /**
   * The version of the source mapping spec that we are consuming.
   */
  IndexedSourceMapConsumer.prototype._version = 3;

  /**
   * The list of original sources.
   */
  Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
    get: function () {
      var sources = [];
      for (var i = 0; i < this._sections.length; i++) {
        for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
          sources.push(this._sections[i].consumer.sources[j]);
        }
      }
      return sources;
    }
  });

  /**
   * Returns the original source, line, and column information for the generated
   * source's line and column positions provided. The only argument is an object
   * with the following properties:
   *
   *   - line: The line number in the generated source.  The line number
   *     is 1-based.
   *   - column: The column number in the generated source.  The column
   *     number is 0-based.
   *
   * and an object is returned with the following properties:
   *
   *   - source: The original source file, or null.
   *   - line: The line number in the original source, or null.  The
   *     line number is 1-based.
   *   - column: The column number in the original source, or null.  The
   *     column number is 0-based.
   *   - name: The original identifier, or null.
   */
  IndexedSourceMapConsumer.prototype.originalPositionFor =
    function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
      var needle = {
        generatedLine: util.getArg(aArgs, 'line'),
        generatedColumn: util.getArg(aArgs, 'column')
      };

      // Find the section containing the generated position we're trying to map
      // to an original position.
      var sectionIndex = binarySearch.search(needle, this._sections,
        function(needle, section) {
          var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
          if (cmp) {
            return cmp;
          }

          return (needle.generatedColumn -
                  section.generatedOffset.generatedColumn);
        });
      var section = this._sections[sectionIndex];

      if (!section) {
        return {
          source: null,
          line: null,
          column: null,
          name: null
        };
      }

      return section.consumer.originalPositionFor({
        line: needle.generatedLine -
          (section.generatedOffset.generatedLine - 1),
        column: needle.generatedColumn -
          (section.generatedOffset.generatedLine === needle.generatedLine
           ? section.generatedOffset.generatedColumn - 1
           : 0),
        bias: aArgs.bias
      });
    };

  /**
   * Return true if we have the source content for every source in the source
   * map, false otherwise.
   */
  IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
    function IndexedSourceMapConsumer_hasContentsOfAllSources() {
      return this._sections.every(function (s) {
        return s.consumer.hasContentsOfAllSources();
      });
    };

  /**
   * Returns the original source content. The only argument is the url of the
   * original source file. Returns null if no original source content is
   * available.
   */
  IndexedSourceMapConsumer.prototype.sourceContentFor =
    function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];

        var content = section.consumer.sourceContentFor(aSource, true);
        if (content) {
          return content;
        }
      }
      if (nullOnMissing) {
        return null;
      }
      else {
        throw new Error('"' + aSource + '" is not in the SourceMap.');
      }
    };

  /**
   * Returns the generated line and column information for the original source,
   * line, and column positions provided. The only argument is an object with
   * the following properties:
   *
   *   - source: The filename of the original source.
   *   - line: The line number in the original source.  The line number
   *     is 1-based.
   *   - column: The column number in the original source.  The column
   *     number is 0-based.
   *
   * and an object is returned with the following properties:
   *
   *   - line: The line number in the generated source, or null.  The
   *     line number is 1-based. 
   *   - column: The column number in the generated source, or null.
   *     The column number is 0-based.
   */
  IndexedSourceMapConsumer.prototype.generatedPositionFor =
    function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];

        // Only consider this section if the requested source is in the list of
        // sources of the consumer.
        if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {
          continue;
        }
        var generatedPosition = section.consumer.generatedPositionFor(aArgs);
        if (generatedPosition) {
          var ret = {
            line: generatedPosition.line +
              (section.generatedOffset.generatedLine - 1),
            column: generatedPosition.column +
              (section.generatedOffset.generatedLine === generatedPosition.line
               ? section.generatedOffset.generatedColumn - 1
               : 0)
          };
          return ret;
        }
      }

      return {
        line: null,
        column: null
      };
    };

  /**
   * Parse the mappings in a string in to a data structure which we can easily
   * query (the ordered arrays in the `this.__generatedMappings` and
   * `this.__originalMappings` properties).
   */
  IndexedSourceMapConsumer.prototype._parseMappings =
    function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      this.__generatedMappings = [];
      this.__originalMappings = [];
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];
        var sectionMappings = section.consumer._generatedMappings;
        for (var j = 0; j < sectionMappings.length; j++) {
          var mapping = sectionMappings[j];

          var source = section.consumer._sources.at(mapping.source);
          source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
          this._sources.add(source);
          source = this._sources.indexOf(source);

          var name = null;
          if (mapping.name) {
            name = section.consumer._names.at(mapping.name);
            this._names.add(name);
            name = this._names.indexOf(name);
          }

          // The mappings coming from the consumer for the section have
          // generated positions relative to the start of the section, so we
          // need to offset them to be relative to the start of the concatenated
          // generated file.
          var adjustedMapping = {
            source: source,
            generatedLine: mapping.generatedLine +
              (section.generatedOffset.generatedLine - 1),
            generatedColumn: mapping.generatedColumn +
              (section.generatedOffset.generatedLine === mapping.generatedLine
              ? section.generatedOffset.generatedColumn - 1
              : 0),
            originalLine: mapping.originalLine,
            originalColumn: mapping.originalColumn,
            name: name
          };

          this.__generatedMappings.push(adjustedMapping);
          if (typeof adjustedMapping.originalLine === 'number') {
            this.__originalMappings.push(adjustedMapping);
          }
        }
      }

      quickSort$1(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
      quickSort$1(this.__originalMappings, util.compareByOriginalPositions);
    };

  var IndexedSourceMapConsumer_1 = IndexedSourceMapConsumer;

  var sourceMapConsumer = {
  	SourceMapConsumer: SourceMapConsumer_1,
  	BasicSourceMapConsumer: BasicSourceMapConsumer_1,
  	IndexedSourceMapConsumer: IndexedSourceMapConsumer_1
  };

  /* -*- Mode: js; js-indent-level: 2; -*- */
  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */

  var SourceMapGenerator$1 = sourceMapGenerator.SourceMapGenerator;


  // Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
  // operating systems these days (capturing the result).
  var REGEX_NEWLINE = /(\r?\n)/;

  // Newline character code for charCodeAt() comparisons
  var NEWLINE_CODE = 10;

  // Private symbol for identifying `SourceNode`s when multiple versions of
  // the source-map library are loaded. This MUST NOT CHANGE across
  // versions!
  var isSourceNode = "$$$isSourceNode$$$";

  /**
   * SourceNodes provide a way to abstract over interpolating/concatenating
   * snippets of generated JavaScript source code while maintaining the line and
   * column information associated with the original source code.
   *
   * @param aLine The original line number.
   * @param aColumn The original column number.
   * @param aSource The original source's filename.
   * @param aChunks Optional. An array of strings which are snippets of
   *        generated JS, or other SourceNodes.
   * @param aName The original identifier.
   */
  function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
    this.children = [];
    this.sourceContents = {};
    this.line = aLine == null ? null : aLine;
    this.column = aColumn == null ? null : aColumn;
    this.source = aSource == null ? null : aSource;
    this.name = aName == null ? null : aName;
    this[isSourceNode] = true;
    if (aChunks != null) this.add(aChunks);
  }

  /**
   * Creates a SourceNode from generated code and a SourceMapConsumer.
   *
   * @param aGeneratedCode The generated code
   * @param aSourceMapConsumer The SourceMap for the generated code
   * @param aRelativePath Optional. The path that relative sources in the
   *        SourceMapConsumer should be relative to.
   */
  SourceNode.fromStringWithSourceMap =
    function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
      // The SourceNode we want to fill with the generated code
      // and the SourceMap
      var node = new SourceNode();

      // All even indices of this array are one line of the generated code,
      // while all odd indices are the newlines between two adjacent lines
      // (since `REGEX_NEWLINE` captures its match).
      // Processed fragments are accessed by calling `shiftNextLine`.
      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
      var remainingLinesIndex = 0;
      var shiftNextLine = function() {
        var lineContents = getNextLine();
        // The last line of a file might not have a newline.
        var newLine = getNextLine() || "";
        return lineContents + newLine;

        function getNextLine() {
          return remainingLinesIndex < remainingLines.length ?
              remainingLines[remainingLinesIndex++] : undefined;
        }
      };

      // We need to remember the position of "remainingLines"
      var lastGeneratedLine = 1, lastGeneratedColumn = 0;

      // The generate SourceNodes we need a code range.
      // To extract it current and last mapping is used.
      // Here we store the last mapping.
      var lastMapping = null;

      aSourceMapConsumer.eachMapping(function (mapping) {
        if (lastMapping !== null) {
          // We add the code from "lastMapping" to "mapping":
          // First check if there is a new line in between.
          if (lastGeneratedLine < mapping.generatedLine) {
            // Associate first line with "lastMapping"
            addMappingWithCode(lastMapping, shiftNextLine());
            lastGeneratedLine++;
            lastGeneratedColumn = 0;
            // The remaining code is added without mapping
          } else {
            // There is no new line in between.
            // Associate the code between "lastGeneratedColumn" and
            // "mapping.generatedColumn" with "lastMapping"
            var nextLine = remainingLines[remainingLinesIndex] || '';
            var code = nextLine.substr(0, mapping.generatedColumn -
                                          lastGeneratedColumn);
            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -
                                                lastGeneratedColumn);
            lastGeneratedColumn = mapping.generatedColumn;
            addMappingWithCode(lastMapping, code);
            // No more remaining code, continue
            lastMapping = mapping;
            return;
          }
        }
        // We add the generated code until the first mapping
        // to the SourceNode without any mapping.
        // Each line is added as separate string.
        while (lastGeneratedLine < mapping.generatedLine) {
          node.add(shiftNextLine());
          lastGeneratedLine++;
        }
        if (lastGeneratedColumn < mapping.generatedColumn) {
          var nextLine = remainingLines[remainingLinesIndex] || '';
          node.add(nextLine.substr(0, mapping.generatedColumn));
          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
        }
        lastMapping = mapping;
      }, this);
      // We have processed all mappings.
      if (remainingLinesIndex < remainingLines.length) {
        if (lastMapping) {
          // Associate the remaining code in the current line with "lastMapping"
          addMappingWithCode(lastMapping, shiftNextLine());
        }
        // and add the remaining lines without any mapping
        node.add(remainingLines.splice(remainingLinesIndex).join(""));
      }

      // Copy sourcesContent into SourceNode
      aSourceMapConsumer.sources.forEach(function (sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          if (aRelativePath != null) {
            sourceFile = util.join(aRelativePath, sourceFile);
          }
          node.setSourceContent(sourceFile, content);
        }
      });

      return node;

      function addMappingWithCode(mapping, code) {
        if (mapping === null || mapping.source === undefined) {
          node.add(code);
        } else {
          var source = aRelativePath
            ? util.join(aRelativePath, mapping.source)
            : mapping.source;
          node.add(new SourceNode(mapping.originalLine,
                                  mapping.originalColumn,
                                  source,
                                  code,
                                  mapping.name));
        }
      }
    };

  /**
   * Add a chunk of generated JS to this source node.
   *
   * @param aChunk A string snippet of generated JS code, another instance of
   *        SourceNode, or an array where each member is one of those things.
   */
  SourceNode.prototype.add = function SourceNode_add(aChunk) {
    if (Array.isArray(aChunk)) {
      aChunk.forEach(function (chunk) {
        this.add(chunk);
      }, this);
    }
    else if (aChunk[isSourceNode] || typeof aChunk === "string") {
      if (aChunk) {
        this.children.push(aChunk);
      }
    }
    else {
      throw new TypeError(
        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
      );
    }
    return this;
  };

  /**
   * Add a chunk of generated JS to the beginning of this source node.
   *
   * @param aChunk A string snippet of generated JS code, another instance of
   *        SourceNode, or an array where each member is one of those things.
   */
  SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
    if (Array.isArray(aChunk)) {
      for (var i = aChunk.length-1; i >= 0; i--) {
        this.prepend(aChunk[i]);
      }
    }
    else if (aChunk[isSourceNode] || typeof aChunk === "string") {
      this.children.unshift(aChunk);
    }
    else {
      throw new TypeError(
        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
      );
    }
    return this;
  };

  /**
   * Walk over the tree of JS snippets in this node and its children. The
   * walking function is called once for each snippet of JS and is passed that
   * snippet and the its original associated source's line/column location.
   *
   * @param aFn The traversal function.
   */
  SourceNode.prototype.walk = function SourceNode_walk(aFn) {
    var chunk;
    for (var i = 0, len = this.children.length; i < len; i++) {
      chunk = this.children[i];
      if (chunk[isSourceNode]) {
        chunk.walk(aFn);
      }
      else {
        if (chunk !== '') {
          aFn(chunk, { source: this.source,
                       line: this.line,
                       column: this.column,
                       name: this.name });
        }
      }
    }
  };

  /**
   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
   * each of `this.children`.
   *
   * @param aSep The separator.
   */
  SourceNode.prototype.join = function SourceNode_join(aSep) {
    var newChildren;
    var i;
    var len = this.children.length;
    if (len > 0) {
      newChildren = [];
      for (i = 0; i < len-1; i++) {
        newChildren.push(this.children[i]);
        newChildren.push(aSep);
      }
      newChildren.push(this.children[i]);
      this.children = newChildren;
    }
    return this;
  };

  /**
   * Call String.prototype.replace on the very right-most source snippet. Useful
   * for trimming whitespace from the end of a source node, etc.
   *
   * @param aPattern The pattern to replace.
   * @param aReplacement The thing to replace the pattern with.
   */
  SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
    var lastChild = this.children[this.children.length - 1];
    if (lastChild[isSourceNode]) {
      lastChild.replaceRight(aPattern, aReplacement);
    }
    else if (typeof lastChild === 'string') {
      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
    }
    else {
      this.children.push(''.replace(aPattern, aReplacement));
    }
    return this;
  };

  /**
   * Set the source content for a source file. This will be added to the SourceMapGenerator
   * in the sourcesContent field.
   *
   * @param aSourceFile The filename of the source file
   * @param aSourceContent The content of the source file
   */
  SourceNode.prototype.setSourceContent =
    function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
    };

  /**
   * Walk over the tree of SourceNodes. The walking function is called for each
   * source file content and is passed the filename and source content.
   *
   * @param aFn The traversal function.
   */
  SourceNode.prototype.walkSourceContents =
    function SourceNode_walkSourceContents(aFn) {
      for (var i = 0, len = this.children.length; i < len; i++) {
        if (this.children[i][isSourceNode]) {
          this.children[i].walkSourceContents(aFn);
        }
      }

      var sources = Object.keys(this.sourceContents);
      for (var i = 0, len = sources.length; i < len; i++) {
        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
      }
    };

  /**
   * Return the string representation of this source node. Walks over the tree
   * and concatenates all the various snippets together to one string.
   */
  SourceNode.prototype.toString = function SourceNode_toString() {
    var str = "";
    this.walk(function (chunk) {
      str += chunk;
    });
    return str;
  };

  /**
   * Returns the string representation of this source node along with a source
   * map.
   */
  SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
    var generated = {
      code: "",
      line: 1,
      column: 0
    };
    var map = new SourceMapGenerator$1(aArgs);
    var sourceMappingActive = false;
    var lastOriginalSource = null;
    var lastOriginalLine = null;
    var lastOriginalColumn = null;
    var lastOriginalName = null;
    this.walk(function (chunk, original) {
      generated.code += chunk;
      if (original.source !== null
          && original.line !== null
          && original.column !== null) {
        if(lastOriginalSource !== original.source
           || lastOriginalLine !== original.line
           || lastOriginalColumn !== original.column
           || lastOriginalName !== original.name) {
          map.addMapping({
            source: original.source,
            original: {
              line: original.line,
              column: original.column
            },
            generated: {
              line: generated.line,
              column: generated.column
            },
            name: original.name
          });
        }
        lastOriginalSource = original.source;
        lastOriginalLine = original.line;
        lastOriginalColumn = original.column;
        lastOriginalName = original.name;
        sourceMappingActive = true;
      } else if (sourceMappingActive) {
        map.addMapping({
          generated: {
            line: generated.line,
            column: generated.column
          }
        });
        lastOriginalSource = null;
        sourceMappingActive = false;
      }
      for (var idx = 0, length = chunk.length; idx < length; idx++) {
        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
          generated.line++;
          generated.column = 0;
          // Mappings end at eol
          if (idx + 1 === length) {
            lastOriginalSource = null;
            sourceMappingActive = false;
          } else if (sourceMappingActive) {
            map.addMapping({
              source: original.source,
              original: {
                line: original.line,
                column: original.column
              },
              generated: {
                line: generated.line,
                column: generated.column
              },
              name: original.name
            });
          }
        } else {
          generated.column++;
        }
      }
    });
    this.walkSourceContents(function (sourceFile, sourceContent) {
      map.setSourceContent(sourceFile, sourceContent);
    });

    return { code: generated.code, map: map };
  };

  var SourceNode_1 = SourceNode;

  var sourceNode = {
  	SourceNode: SourceNode_1
  };

  /*
   * Copyright 2009-2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE.txt or:
   * http://opensource.org/licenses/BSD-3-Clause
   */
  var SourceMapGenerator$2 = sourceMapGenerator.SourceMapGenerator;
  var SourceMapConsumer$1 = sourceMapConsumer.SourceMapConsumer;
  var SourceNode$1 = sourceNode.SourceNode;

  var sourceMap = {
  	SourceMapGenerator: SourceMapGenerator$2,
  	SourceMapConsumer: SourceMapConsumer$1,
  	SourceNode: SourceNode$1
  };

  var require$$1 = /*@__PURE__*/getAugmentedNamespace(path$1);

  let { dirname: dirname$1, resolve: resolve$1, relative: relative$1, sep: sep$1 } = require$$1;
  let { pathToFileURL } = url$2;


  class MapGenerator {
    constructor (stringify, root, opts) {
      this.stringify = stringify;
      this.mapOpts = opts.map || {};
      this.root = root;
      this.opts = opts;
    }

    isMap () {
      if (typeof this.opts.map !== 'undefined') {
        return !!this.opts.map
      }
      return this.previous().length > 0
    }

    previous () {
      if (!this.previousMaps) {
        this.previousMaps = [];
        this.root.walk(node => {
          if (node.source && node.source.input.map) {
            let map = node.source.input.map;
            if (!this.previousMaps.includes(map)) {
              this.previousMaps.push(map);
            }
          }
        });
      }

      return this.previousMaps
    }

    isInline () {
      if (typeof this.mapOpts.inline !== 'undefined') {
        return this.mapOpts.inline
      }

      let annotation = this.mapOpts.annotation;
      if (typeof annotation !== 'undefined' && annotation !== true) {
        return false
      }

      if (this.previous().length) {
        return this.previous().some(i => i.inline)
      }
      return true
    }

    isSourcesContent () {
      if (typeof this.mapOpts.sourcesContent !== 'undefined') {
        return this.mapOpts.sourcesContent
      }
      if (this.previous().length) {
        return this.previous().some(i => i.withContent())
      }
      return true
    }

    clearAnnotation () {
      if (this.mapOpts.annotation === false) return

      let node;
      for (let i = this.root.nodes.length - 1; i >= 0; i--) {
        node = this.root.nodes[i];
        if (node.type !== 'comment') continue
        if (node.text.indexOf('# sourceMappingURL=') === 0) {
          this.root.removeChild(i);
        }
      }
    }

    setSourcesContent () {
      let already = {};
      this.root.walk(node => {
        if (node.source) {
          let from = node.source.input.from;
          if (from && !already[from]) {
            already[from] = true;
            this.map.setSourceContent(
              this.toUrl(this.path(from)),
              node.source.input.css
            );
          }
        }
      });
    }

    applyPrevMaps () {
      for (let prev of this.previous()) {
        let from = this.toUrl(this.path(prev.file));
        let root = prev.root || dirname$1(prev.file);
        let map;

        if (this.mapOpts.sourcesContent === false) {
          map = new sourceMap.SourceMapConsumer(prev.text);
          if (map.sourcesContent) {
            map.sourcesContent = map.sourcesContent.map(() => null);
          }
        } else {
          map = prev.consumer();
        }

        this.map.applySourceMap(map, from, this.toUrl(this.path(root)));
      }
    }

    isAnnotation () {
      if (this.isInline()) {
        return true
      }
      if (typeof this.mapOpts.annotation !== 'undefined') {
        return this.mapOpts.annotation
      }
      if (this.previous().length) {
        return this.previous().some(i => i.annotation)
      }
      return true
    }

    toBase64 (str) {
      if (Buffer) {
        return Buffer.from(str).toString('base64')
      } else {
        // istanbul ignore next
        return window.btoa(unescape(encodeURIComponent(str)))
      }
    }

    addAnnotation () {
      let content;

      if (this.isInline()) {
        content =
          'data:application/json;base64,' + this.toBase64(this.map.toString());
      } else if (typeof this.mapOpts.annotation === 'string') {
        content = this.mapOpts.annotation;
      } else if (typeof this.mapOpts.annotation === 'function') {
        content = this.mapOpts.annotation(this.opts.to, this.root);
      } else {
        content = this.outputFile() + '.map';
      }

      let eol = '\n';
      if (this.css.includes('\r\n')) eol = '\r\n';

      this.css += eol + '/*# sourceMappingURL=' + content + ' */';
    }

    outputFile () {
      if (this.opts.to) {
        return this.path(this.opts.to)
      }
      if (this.opts.from) {
        return this.path(this.opts.from)
      }
      return 'to.css'
    }

    generateMap () {
      this.generateString();
      if (this.isSourcesContent()) this.setSourcesContent();
      if (this.previous().length > 0) this.applyPrevMaps();
      if (this.isAnnotation()) this.addAnnotation();

      if (this.isInline()) {
        return [this.css]
      }
      return [this.css, this.map]
    }

    path (file) {
      if (file.indexOf('<') === 0) return file
      if (/^\w+:\/\//.test(file)) return file
      if (this.mapOpts.absolute) return file

      let from = this.opts.to ? dirname$1(this.opts.to) : '.';

      if (typeof this.mapOpts.annotation === 'string') {
        from = dirname$1(resolve$1(from, this.mapOpts.annotation));
      }

      file = relative$1(from, file);
      return file
    }

    toUrl (path) {
      if (sep$1 === '\\') {
        // istanbul ignore next
        path = path.replace(/\\/g, '/');
      }
      return encodeURI(path).replace(/[#?]/g, encodeURIComponent)
    }

    sourcePath (node) {
      if (this.mapOpts.from) {
        return this.toUrl(this.mapOpts.from)
      } else if (this.mapOpts.absolute) {
        return pathToFileURL(node.source.input.from).toString()
      } else {
        return this.toUrl(this.path(node.source.input.from))
      }
    }

    generateString () {
      this.css = '';
      this.map = new sourceMap.SourceMapGenerator({ file: this.outputFile() });

      let line = 1;
      let column = 1;

      let lines, last;
      this.stringify(this.root, (str, node, type) => {
        this.css += str;

        if (node && type !== 'end') {
          if (node.source && node.source.start) {
            this.map.addMapping({
              source: this.sourcePath(node),
              generated: { line, column: column - 1 },
              original: {
                line: node.source.start.line,
                column: node.source.start.column - 1
              }
            });
          } else {
            this.map.addMapping({
              source: '<no source>',
              original: { line: 1, column: 0 },
              generated: { line, column: column - 1 }
            });
          }
        }

        lines = str.match(/\n/g);
        if (lines) {
          line += lines.length;
          last = str.lastIndexOf('\n');
          column = str.length - last;
        } else {
          column += str.length;
        }

        if (node && type !== 'start') {
          let p = node.parent || { raws: {} };
          if (node.type !== 'decl' || node !== p.last || p.raws.semicolon) {
            if (node.source && node.source.end) {
              this.map.addMapping({
                source: this.sourcePath(node),
                generated: { line, column: column - 2 },
                original: {
                  line: node.source.end.line,
                  column: node.source.end.column - 1
                }
              });
            } else {
              this.map.addMapping({
                source: '<no source>',
                original: { line: 1, column: 0 },
                generated: { line, column: column - 1 }
              });
            }
          }
        }
      });
    }

    generate () {
      this.clearAnnotation();

      if (this.isMap()) {
        return this.generateMap()
      }

      let result = '';
      this.stringify(this.root, i => {
        result += i;
      });
      return [result]
    }
  }

  var mapGenerator = MapGenerator;

  let printed = {};

  var warnOnce = function warnOnce (message) {
    if (printed[message]) return
    printed[message] = true;

    if (typeof console !== 'undefined' && console.warn) {
      console.warn(message);
    }
  };

  class Warning {
    constructor (text, opts = {}) {
      this.type = 'warning';
      this.text = text;

      if (opts.node && opts.node.source) {
        let pos = opts.node.positionBy(opts);
        this.line = pos.line;
        this.column = pos.column;
      }

      for (let opt in opts) this[opt] = opts[opt];
    }

    toString () {
      if (this.node) {
        return this.node.error(this.text, {
          plugin: this.plugin,
          index: this.index,
          word: this.word
        }).message
      }

      if (this.plugin) {
        return this.plugin + ': ' + this.text
      }

      return this.text
    }
  }

  var warning = Warning;

  class Result {
    constructor (processor, root, opts) {
      this.processor = processor;
      this.messages = [];
      this.root = root;
      this.opts = opts;
      this.css = undefined;
      this.map = undefined;
    }

    toString () {
      return this.css
    }

    warn (text, opts = {}) {
      if (!opts.plugin) {
        if (this.lastPlugin && this.lastPlugin.postcssPlugin) {
          opts.plugin = this.lastPlugin.postcssPlugin;
        }
      }

      let warning$1 = new warning(text, opts);
      this.messages.push(warning$1);

      return warning$1
    }

    warnings () {
      return this.messages.filter(i => i.type === 'warning')
    }

    get content () {
      return this.css
    }
  }

  var result = Result;

  class Comment extends node_1 {
    constructor (defaults) {
      super(defaults);
      this.type = 'comment';
    }
  }

  var comment = Comment;

  let { isClean: isClean$2 } = symbols;



  let parse$2, Rule, AtRule;

  function cleanSource (nodes) {
    return nodes.map(i => {
      if (i.nodes) i.nodes = cleanSource(i.nodes);
      delete i.source;
      return i
    })
  }

  function markDirtyUp (node) {
    node[isClean$2] = false;
    if (node.proxyOf.nodes) {
      for (let i of node.proxyOf.nodes) {
        markDirtyUp(i);
      }
    }
  }

  // istanbul ignore next
  function rebuild (node) {
    if (node.type === 'atrule') {
      Object.setPrototypeOf(node, AtRule.prototype);
    } else if (node.type === 'rule') {
      Object.setPrototypeOf(node, Rule.prototype);
    } else if (node.type === 'decl') {
      Object.setPrototypeOf(node, declaration.prototype);
    } else if (node.type === 'comment') {
      Object.setPrototypeOf(node, comment.prototype);
    }

    if (node.nodes) {
      node.nodes.forEach(child => {
        rebuild(child);
      });
    }
  }

  class Container extends node_1 {
    push (child) {
      child.parent = this;
      this.proxyOf.nodes.push(child);
      return this
    }

    each (callback) {
      if (!this.proxyOf.nodes) return undefined
      let iterator = this.getIterator();

      let index, result;
      while (this.indexes[iterator] < this.proxyOf.nodes.length) {
        index = this.indexes[iterator];
        result = callback(this.proxyOf.nodes[index], index);
        if (result === false) break

        this.indexes[iterator] += 1;
      }

      delete this.indexes[iterator];
      return result
    }

    walk (callback) {
      return this.each((child, i) => {
        let result;
        try {
          result = callback(child, i);
        } catch (e) {
          throw child.addToError(e)
        }
        if (result !== false && child.walk) {
          result = child.walk(callback);
        }

        return result
      })
    }

    walkDecls (prop, callback) {
      if (!callback) {
        callback = prop;
        return this.walk((child, i) => {
          if (child.type === 'decl') {
            return callback(child, i)
          }
        })
      }
      if (prop instanceof RegExp) {
        return this.walk((child, i) => {
          if (child.type === 'decl' && prop.test(child.prop)) {
            return callback(child, i)
          }
        })
      }
      return this.walk((child, i) => {
        if (child.type === 'decl' && child.prop === prop) {
          return callback(child, i)
        }
      })
    }

    walkRules (selector, callback) {
      if (!callback) {
        callback = selector;

        return this.walk((child, i) => {
          if (child.type === 'rule') {
            return callback(child, i)
          }
        })
      }
      if (selector instanceof RegExp) {
        return this.walk((child, i) => {
          if (child.type === 'rule' && selector.test(child.selector)) {
            return callback(child, i)
          }
        })
      }
      return this.walk((child, i) => {
        if (child.type === 'rule' && child.selector === selector) {
          return callback(child, i)
        }
      })
    }

    walkAtRules (name, callback) {
      if (!callback) {
        callback = name;
        return this.walk((child, i) => {
          if (child.type === 'atrule') {
            return callback(child, i)
          }
        })
      }
      if (name instanceof RegExp) {
        return this.walk((child, i) => {
          if (child.type === 'atrule' && name.test(child.name)) {
            return callback(child, i)
          }
        })
      }
      return this.walk((child, i) => {
        if (child.type === 'atrule' && child.name === name) {
          return callback(child, i)
        }
      })
    }

    walkComments (callback) {
      return this.walk((child, i) => {
        if (child.type === 'comment') {
          return callback(child, i)
        }
      })
    }

    append (...children) {
      for (let child of children) {
        let nodes = this.normalize(child, this.last);
        for (let node of nodes) this.proxyOf.nodes.push(node);
      }

      this.markDirty();

      return this
    }

    prepend (...children) {
      children = children.reverse();
      for (let child of children) {
        let nodes = this.normalize(child, this.first, 'prepend').reverse();
        for (let node of nodes) this.proxyOf.nodes.unshift(node);
        for (let id in this.indexes) {
          this.indexes[id] = this.indexes[id] + nodes.length;
        }
      }

      this.markDirty();

      return this
    }

    cleanRaws (keepBetween) {
      super.cleanRaws(keepBetween);
      if (this.nodes) {
        for (let node of this.nodes) node.cleanRaws(keepBetween);
      }
    }

    insertBefore (exist, add) {
      exist = this.index(exist);

      let type = exist === 0 ? 'prepend' : false;
      let nodes = this.normalize(add, this.proxyOf.nodes[exist], type).reverse();
      for (let node of nodes) this.proxyOf.nodes.splice(exist, 0, node);

      let index;
      for (let id in this.indexes) {
        index = this.indexes[id];
        if (exist <= index) {
          this.indexes[id] = index + nodes.length;
        }
      }

      this.markDirty();

      return this
    }

    insertAfter (exist, add) {
      exist = this.index(exist);

      let nodes = this.normalize(add, this.proxyOf.nodes[exist]).reverse();
      for (let node of nodes) this.proxyOf.nodes.splice(exist + 1, 0, node);

      let index;
      for (let id in this.indexes) {
        index = this.indexes[id];
        if (exist < index) {
          this.indexes[id] = index + nodes.length;
        }
      }

      this.markDirty();

      return this
    }

    removeChild (child) {
      child = this.index(child);
      this.proxyOf.nodes[child].parent = undefined;
      this.proxyOf.nodes.splice(child, 1);

      let index;
      for (let id in this.indexes) {
        index = this.indexes[id];
        if (index >= child) {
          this.indexes[id] = index - 1;
        }
      }

      this.markDirty();

      return this
    }

    removeAll () {
      for (let node of this.proxyOf.nodes) node.parent = undefined;
      this.proxyOf.nodes = [];

      this.markDirty();

      return this
    }

    replaceValues (pattern, opts, callback) {
      if (!callback) {
        callback = opts;
        opts = {};
      }

      this.walkDecls(decl => {
        if (opts.props && !opts.props.includes(decl.prop)) return
        if (opts.fast && !decl.value.includes(opts.fast)) return

        decl.value = decl.value.replace(pattern, callback);
      });

      this.markDirty();

      return this
    }

    every (condition) {
      return this.nodes.every(condition)
    }

    some (condition) {
      return this.nodes.some(condition)
    }

    index (child) {
      if (typeof child === 'number') return child
      if (child.proxyOf) child = child.proxyOf;
      return this.proxyOf.nodes.indexOf(child)
    }

    get first () {
      if (!this.proxyOf.nodes) return undefined
      return this.proxyOf.nodes[0]
    }

    get last () {
      if (!this.proxyOf.nodes) return undefined
      return this.proxyOf.nodes[this.proxyOf.nodes.length - 1]
    }

    normalize (nodes, sample) {
      if (typeof nodes === 'string') {
        nodes = cleanSource(parse$2(nodes).nodes);
      } else if (Array.isArray(nodes)) {
        nodes = nodes.slice(0);
        for (let i of nodes) {
          if (i.parent) i.parent.removeChild(i, 'ignore');
        }
      } else if (nodes.type === 'root') {
        nodes = nodes.nodes.slice(0);
        for (let i of nodes) {
          if (i.parent) i.parent.removeChild(i, 'ignore');
        }
      } else if (nodes.type) {
        nodes = [nodes];
      } else if (nodes.prop) {
        if (typeof nodes.value === 'undefined') {
          throw new Error('Value field is missed in node creation')
        } else if (typeof nodes.value !== 'string') {
          nodes.value = String(nodes.value);
        }
        nodes = [new declaration(nodes)];
      } else if (nodes.selector) {
        nodes = [new Rule(nodes)];
      } else if (nodes.name) {
        nodes = [new AtRule(nodes)];
      } else if (nodes.text) {
        nodes = [new comment(nodes)];
      } else {
        throw new Error('Unknown node type in node creation')
      }

      let processed = nodes.map(i => {
        // istanbul ignore next
        if (typeof i.markDirty !== 'function') rebuild(i);
        if (i.parent) i.parent.removeChild(i);
        if (i[isClean$2]) markDirtyUp(i);
        if (typeof i.raws.before === 'undefined') {
          if (sample && typeof sample.raws.before !== 'undefined') {
            i.raws.before = sample.raws.before.replace(/\S/g, '');
          }
        }
        i.parent = this;
        return i
      });

      return processed
    }

    getProxyProcessor () {
      return {
        set (node, prop, value) {
          if (node[prop] === value) return true
          node[prop] = value;
          if (prop === 'name' || prop === 'params' || prop === 'selector') {
            node.markDirty();
          }
          return true
        },

        get (node, prop) {
          if (prop === 'proxyOf') {
            return node
          } else if (!node[prop]) {
            return node[prop]
          } else if (
            prop === 'each' ||
            (typeof prop === 'string' && prop.startsWith('walk'))
          ) {
            return (...args) => {
              return node[prop](
                ...args.map(i => {
                  if (typeof i === 'function') {
                    return (child, index) => i(child.toProxy(), index)
                  } else {
                    return i
                  }
                })
              )
            }
          } else if (prop === 'every' || prop === 'some') {
            return cb => {
              return node[prop]((child, ...other) =>
                cb(child.toProxy(), ...other)
              )
            }
          } else if (prop === 'root') {
            return () => node.root().toProxy()
          } else if (prop === 'nodes') {
            return node.nodes.map(i => i.toProxy())
          } else if (prop === 'first' || prop === 'last') {
            return node[prop].toProxy()
          } else {
            return node[prop]
          }
        }
      }
    }

    getIterator () {
      if (!this.lastEach) this.lastEach = 0;
      if (!this.indexes) this.indexes = {};

      this.lastEach += 1;
      let iterator = this.lastEach;
      this.indexes[iterator] = 0;

      return iterator
    }
  }

  Container.registerParse = dependant => {
    parse$2 = dependant;
  };

  Container.registerRule = dependant => {
    Rule = dependant;
  };

  Container.registerAtRule = dependant => {
    AtRule = dependant;
  };

  var container = Container;

  const SINGLE_QUOTE = "'".charCodeAt(0);
  const DOUBLE_QUOTE = '"'.charCodeAt(0);
  const BACKSLASH = '\\'.charCodeAt(0);
  const SLASH = '/'.charCodeAt(0);
  const NEWLINE = '\n'.charCodeAt(0);
  const SPACE = ' '.charCodeAt(0);
  const FEED = '\f'.charCodeAt(0);
  const TAB = '\t'.charCodeAt(0);
  const CR = '\r'.charCodeAt(0);
  const OPEN_SQUARE = '['.charCodeAt(0);
  const CLOSE_SQUARE = ']'.charCodeAt(0);
  const OPEN_PARENTHESES = '('.charCodeAt(0);
  const CLOSE_PARENTHESES = ')'.charCodeAt(0);
  const OPEN_CURLY = '{'.charCodeAt(0);
  const CLOSE_CURLY = '}'.charCodeAt(0);
  const SEMICOLON = ';'.charCodeAt(0);
  const ASTERISK = '*'.charCodeAt(0);
  const COLON = ':'.charCodeAt(0);
  const AT = '@'.charCodeAt(0);

  const RE_AT_END = /[\t\n\f\r "#'()/;[\\\]{}]/g;
  const RE_WORD_END = /[\t\n\f\r !"#'():;@[\\\]{}]|\/(?=\*)/g;
  const RE_BAD_BRACKET = /.[\n"'(/\\]/;
  const RE_HEX_ESCAPE = /[\da-f]/i;

  var tokenize = function tokenizer (input, options = {}) {
    let css = input.css.valueOf();
    let ignore = options.ignoreErrors;

    let code, next, quote, content, escape;
    let escaped, escapePos, prev, n, currentToken;

    let length = css.length;
    let pos = 0;
    let buffer = [];
    let returned = [];

    function position () {
      return pos
    }

    function unclosed (what) {
      throw input.error('Unclosed ' + what, pos)
    }

    function endOfFile () {
      return returned.length === 0 && pos >= length
    }

    function nextToken (opts) {
      if (returned.length) return returned.pop()
      if (pos >= length) return

      let ignoreUnclosed = opts ? opts.ignoreUnclosed : false;

      code = css.charCodeAt(pos);

      switch (code) {
        case NEWLINE:
        case SPACE:
        case TAB:
        case CR:
        case FEED: {
          next = pos;
          do {
            next += 1;
            code = css.charCodeAt(next);
          } while (
            code === SPACE ||
            code === NEWLINE ||
            code === TAB ||
            code === CR ||
            code === FEED
          )

          currentToken = ['space', css.slice(pos, next)];
          pos = next - 1;
          break
        }

        case OPEN_SQUARE:
        case CLOSE_SQUARE:
        case OPEN_CURLY:
        case CLOSE_CURLY:
        case COLON:
        case SEMICOLON:
        case CLOSE_PARENTHESES: {
          let controlChar = String.fromCharCode(code);
          currentToken = [controlChar, controlChar, pos];
          break
        }

        case OPEN_PARENTHESES: {
          prev = buffer.length ? buffer.pop()[1] : '';
          n = css.charCodeAt(pos + 1);
          if (
            prev === 'url' &&
            n !== SINGLE_QUOTE &&
            n !== DOUBLE_QUOTE &&
            n !== SPACE &&
            n !== NEWLINE &&
            n !== TAB &&
            n !== FEED &&
            n !== CR
          ) {
            next = pos;
            do {
              escaped = false;
              next = css.indexOf(')', next + 1);
              if (next === -1) {
                if (ignore || ignoreUnclosed) {
                  next = pos;
                  break
                } else {
                  unclosed('bracket');
                }
              }
              escapePos = next;
              while (css.charCodeAt(escapePos - 1) === BACKSLASH) {
                escapePos -= 1;
                escaped = !escaped;
              }
            } while (escaped)

            currentToken = ['brackets', css.slice(pos, next + 1), pos, next];

            pos = next;
          } else {
            next = css.indexOf(')', pos + 1);
            content = css.slice(pos, next + 1);

            if (next === -1 || RE_BAD_BRACKET.test(content)) {
              currentToken = ['(', '(', pos];
            } else {
              currentToken = ['brackets', content, pos, next];
              pos = next;
            }
          }

          break
        }

        case SINGLE_QUOTE:
        case DOUBLE_QUOTE: {
          quote = code === SINGLE_QUOTE ? "'" : '"';
          next = pos;
          do {
            escaped = false;
            next = css.indexOf(quote, next + 1);
            if (next === -1) {
              if (ignore || ignoreUnclosed) {
                next = pos + 1;
                break
              } else {
                unclosed('string');
              }
            }
            escapePos = next;
            while (css.charCodeAt(escapePos - 1) === BACKSLASH) {
              escapePos -= 1;
              escaped = !escaped;
            }
          } while (escaped)

          currentToken = ['string', css.slice(pos, next + 1), pos, next];
          pos = next;
          break
        }

        case AT: {
          RE_AT_END.lastIndex = pos + 1;
          RE_AT_END.test(css);
          if (RE_AT_END.lastIndex === 0) {
            next = css.length - 1;
          } else {
            next = RE_AT_END.lastIndex - 2;
          }

          currentToken = ['at-word', css.slice(pos, next + 1), pos, next];

          pos = next;
          break
        }

        case BACKSLASH: {
          next = pos;
          escape = true;
          while (css.charCodeAt(next + 1) === BACKSLASH) {
            next += 1;
            escape = !escape;
          }
          code = css.charCodeAt(next + 1);
          if (
            escape &&
            code !== SLASH &&
            code !== SPACE &&
            code !== NEWLINE &&
            code !== TAB &&
            code !== CR &&
            code !== FEED
          ) {
            next += 1;
            if (RE_HEX_ESCAPE.test(css.charAt(next))) {
              while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {
                next += 1;
              }
              if (css.charCodeAt(next + 1) === SPACE) {
                next += 1;
              }
            }
          }

          currentToken = ['word', css.slice(pos, next + 1), pos, next];

          pos = next;
          break
        }

        default: {
          if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {
            next = css.indexOf('*/', pos + 2) + 1;
            if (next === 0) {
              if (ignore || ignoreUnclosed) {
                next = css.length;
              } else {
                unclosed('comment');
              }
            }

            currentToken = ['comment', css.slice(pos, next + 1), pos, next];
            pos = next;
          } else {
            RE_WORD_END.lastIndex = pos + 1;
            RE_WORD_END.test(css);
            if (RE_WORD_END.lastIndex === 0) {
              next = css.length - 1;
            } else {
              next = RE_WORD_END.lastIndex - 2;
            }

            currentToken = ['word', css.slice(pos, next + 1), pos, next];
            buffer.push(currentToken);
            pos = next;
          }

          break
        }
      }

      pos++;
      return currentToken
    }

    function back (token) {
      returned.push(token);
    }

    return {
      back,
      nextToken,
      endOfFile,
      position
    }
  };

  class AtRule$1 extends container {
    constructor (defaults) {
      super(defaults);
      this.type = 'atrule';
    }

    append (...children) {
      if (!this.proxyOf.nodes) this.nodes = [];
      return super.append(...children)
    }

    prepend (...children) {
      if (!this.proxyOf.nodes) this.nodes = [];
      return super.prepend(...children)
    }
  }

  var atRule = AtRule$1;

  container.registerAtRule(AtRule$1);

  let LazyResult, Processor;

  class Root extends container {
    constructor (defaults) {
      super(defaults);
      this.type = 'root';
      if (!this.nodes) this.nodes = [];
    }

    removeChild (child, ignore) {
      let index = this.index(child);

      if (!ignore && index === 0 && this.nodes.length > 1) {
        this.nodes[1].raws.before = this.nodes[index].raws.before;
      }

      return super.removeChild(child)
    }

    normalize (child, sample, type) {
      let nodes = super.normalize(child);

      if (sample) {
        if (type === 'prepend') {
          if (this.nodes.length > 1) {
            sample.raws.before = this.nodes[1].raws.before;
          } else {
            delete sample.raws.before;
          }
        } else if (this.first !== sample) {
          for (let node of nodes) {
            node.raws.before = sample.raws.before;
          }
        }
      }

      return nodes
    }

    toResult (opts = {}) {
      let lazy = new LazyResult(new Processor(), this, opts);
      return lazy.stringify()
    }
  }

  Root.registerLazyResult = dependant => {
    LazyResult = dependant;
  };

  Root.registerProcessor = dependant => {
    Processor = dependant;
  };

  var root = Root;

  let list = {
    split (string, separators, last) {
      let array = [];
      let current = '';
      let split = false;

      let func = 0;
      let quote = false;
      let escape = false;

      for (let letter of string) {
        if (quote) {
          if (escape) {
            escape = false;
          } else if (letter === '\\') {
            escape = true;
          } else if (letter === quote) {
            quote = false;
          }
        } else if (letter === '"' || letter === "'") {
          quote = letter;
        } else if (letter === '(') {
          func += 1;
        } else if (letter === ')') {
          if (func > 0) func -= 1;
        } else if (func === 0) {
          if (separators.includes(letter)) split = true;
        }

        if (split) {
          if (current !== '') array.push(current.trim());
          current = '';
          split = false;
        } else {
          current += letter;
        }
      }

      if (last || current !== '') array.push(current.trim());
      return array
    },

    space (string) {
      let spaces = [' ', '\n', '\t'];
      return list.split(string, spaces)
    },

    comma (string) {
      return list.split(string, [','], true)
    }
  };

  var list_1 = list;

  class Rule$1 extends container {
    constructor (defaults) {
      super(defaults);
      this.type = 'rule';
      if (!this.nodes) this.nodes = [];
    }

    get selectors () {
      return list_1.comma(this.selector)
    }

    set selectors (values) {
      let match = this.selector ? this.selector.match(/,\s*/) : null;
      let sep = match ? match[0] : ',' + this.raw('between', 'beforeOpen');
      this.selector = values.join(sep);
    }
  }

  var rule = Rule$1;

  container.registerRule(Rule$1);

  class Parser {
    constructor (input) {
      this.input = input;

      this.root = new root();
      this.current = this.root;
      this.spaces = '';
      this.semicolon = false;
      this.customProperty = false;

      this.createTokenizer();
      this.root.source = { input, start: { offset: 0, line: 1, column: 1 } };
    }

    createTokenizer () {
      this.tokenizer = tokenize(this.input);
    }

    parse () {
      let token;
      while (!this.tokenizer.endOfFile()) {
        token = this.tokenizer.nextToken();

        switch (token[0]) {
          case 'space':
            this.spaces += token[1];
            break

          case ';':
            this.freeSemicolon(token);
            break

          case '}':
            this.end(token);
            break

          case 'comment':
            this.comment(token);
            break

          case 'at-word':
            this.atrule(token);
            break

          case '{':
            this.emptyRule(token);
            break

          default:
            this.other(token);
            break
        }
      }
      this.endFile();
    }

    comment (token) {
      let node = new comment();
      this.init(node, token[2]);
      node.source.end = this.getPosition(token[3] || token[2]);

      let text = token[1].slice(2, -2);
      if (/^\s*$/.test(text)) {
        node.text = '';
        node.raws.left = text;
        node.raws.right = '';
      } else {
        let match = text.match(/^(\s*)([^]*\S)(\s*)$/);
        node.text = match[2];
        node.raws.left = match[1];
        node.raws.right = match[3];
      }
    }

    emptyRule (token) {
      let node = new rule();
      this.init(node, token[2]);
      node.selector = '';
      node.raws.between = '';
      this.current = node;
    }

    other (start) {
      let end = false;
      let type = null;
      let colon = false;
      let bracket = null;
      let brackets = [];
      let customProperty = start[1].startsWith('--');

      let tokens = [];
      let token = start;
      while (token) {
        type = token[0];
        tokens.push(token);

        if (type === '(' || type === '[') {
          if (!bracket) bracket = token;
          brackets.push(type === '(' ? ')' : ']');
        } else if (customProperty && colon && type === '{') {
          if (!bracket) bracket = token;
          brackets.push('}');
        } else if (brackets.length === 0) {
          if (type === ';') {
            if (colon) {
              this.decl(tokens, customProperty);
              return
            } else {
              break
            }
          } else if (type === '{') {
            this.rule(tokens);
            return
          } else if (type === '}') {
            this.tokenizer.back(tokens.pop());
            end = true;
            break
          } else if (type === ':') {
            colon = true;
          }
        } else if (type === brackets[brackets.length - 1]) {
          brackets.pop();
          if (brackets.length === 0) bracket = null;
        }

        token = this.tokenizer.nextToken();
      }

      if (this.tokenizer.endOfFile()) end = true;
      if (brackets.length > 0) this.unclosedBracket(bracket);

      if (end && colon) {
        while (tokens.length) {
          token = tokens[tokens.length - 1][0];
          if (token !== 'space' && token !== 'comment') break
          this.tokenizer.back(tokens.pop());
        }
        this.decl(tokens, customProperty);
      } else {
        this.unknownWord(tokens);
      }
    }

    rule (tokens) {
      tokens.pop();

      let node = new rule();
      this.init(node, tokens[0][2]);

      node.raws.between = this.spacesAndCommentsFromEnd(tokens);
      this.raw(node, 'selector', tokens);
      this.current = node;
    }

    decl (tokens, customProperty) {
      let node = new declaration();
      this.init(node, tokens[0][2]);

      let last = tokens[tokens.length - 1];
      if (last[0] === ';') {
        this.semicolon = true;
        tokens.pop();
      }
      node.source.end = this.getPosition(last[3] || last[2]);

      while (tokens[0][0] !== 'word') {
        if (tokens.length === 1) this.unknownWord(tokens);
        node.raws.before += tokens.shift()[1];
      }
      node.source.start = this.getPosition(tokens[0][2]);

      node.prop = '';
      while (tokens.length) {
        let type = tokens[0][0];
        if (type === ':' || type === 'space' || type === 'comment') {
          break
        }
        node.prop += tokens.shift()[1];
      }

      node.raws.between = '';

      let token;
      while (tokens.length) {
        token = tokens.shift();

        if (token[0] === ':') {
          node.raws.between += token[1];
          break
        } else {
          if (token[0] === 'word' && /\w/.test(token[1])) {
            this.unknownWord([token]);
          }
          node.raws.between += token[1];
        }
      }

      if (node.prop[0] === '_' || node.prop[0] === '*') {
        node.raws.before += node.prop[0];
        node.prop = node.prop.slice(1);
      }
      let firstSpaces = this.spacesAndCommentsFromStart(tokens);
      this.precheckMissedSemicolon(tokens);

      for (let i = tokens.length - 1; i >= 0; i--) {
        token = tokens[i];
        if (token[1].toLowerCase() === '!important') {
          node.important = true;
          let string = this.stringFrom(tokens, i);
          string = this.spacesFromEnd(tokens) + string;
          if (string !== ' !important') node.raws.important = string;
          break
        } else if (token[1].toLowerCase() === 'important') {
          let cache = tokens.slice(0);
          let str = '';
          for (let j = i; j > 0; j--) {
            let type = cache[j][0];
            if (str.trim().indexOf('!') === 0 && type !== 'space') {
              break
            }
            str = cache.pop()[1] + str;
          }
          if (str.trim().indexOf('!') === 0) {
            node.important = true;
            node.raws.important = str;
            tokens = cache;
          }
        }

        if (token[0] !== 'space' && token[0] !== 'comment') {
          break
        }
      }

      let hasWord = tokens.some(i => i[0] !== 'space' && i[0] !== 'comment');
      this.raw(node, 'value', tokens);
      if (hasWord) {
        node.raws.between += firstSpaces;
      } else {
        node.value = firstSpaces + node.value;
      }

      if (node.value.includes(':') && !customProperty) {
        this.checkMissedSemicolon(tokens);
      }
    }

    atrule (token) {
      let node = new atRule();
      node.name = token[1].slice(1);
      if (node.name === '') {
        this.unnamedAtrule(node, token);
      }
      this.init(node, token[2]);

      let type;
      let prev;
      let shift;
      let last = false;
      let open = false;
      let params = [];
      let brackets = [];

      while (!this.tokenizer.endOfFile()) {
        token = this.tokenizer.nextToken();
        type = token[0];

        if (type === '(' || type === '[') {
          brackets.push(type === '(' ? ')' : ']');
        } else if (type === '{' && brackets.length > 0) {
          brackets.push('}');
        } else if (type === brackets[brackets.length - 1]) {
          brackets.pop();
        }

        if (brackets.length === 0) {
          if (type === ';') {
            node.source.end = this.getPosition(token[2]);
            this.semicolon = true;
            break
          } else if (type === '{') {
            open = true;
            break
          } else if (type === '}') {
            if (params.length > 0) {
              shift = params.length - 1;
              prev = params[shift];
              while (prev && prev[0] === 'space') {
                prev = params[--shift];
              }
              if (prev) {
                node.source.end = this.getPosition(prev[3] || prev[2]);
              }
            }
            this.end(token);
            break
          } else {
            params.push(token);
          }
        } else {
          params.push(token);
        }

        if (this.tokenizer.endOfFile()) {
          last = true;
          break
        }
      }

      node.raws.between = this.spacesAndCommentsFromEnd(params);
      if (params.length) {
        node.raws.afterName = this.spacesAndCommentsFromStart(params);
        this.raw(node, 'params', params);
        if (last) {
          token = params[params.length - 1];
          node.source.end = this.getPosition(token[3] || token[2]);
          this.spaces = node.raws.between;
          node.raws.between = '';
        }
      } else {
        node.raws.afterName = '';
        node.params = '';
      }

      if (open) {
        node.nodes = [];
        this.current = node;
      }
    }

    end (token) {
      if (this.current.nodes && this.current.nodes.length) {
        this.current.raws.semicolon = this.semicolon;
      }
      this.semicolon = false;

      this.current.raws.after = (this.current.raws.after || '') + this.spaces;
      this.spaces = '';

      if (this.current.parent) {
        this.current.source.end = this.getPosition(token[2]);
        this.current = this.current.parent;
      } else {
        this.unexpectedClose(token);
      }
    }

    endFile () {
      if (this.current.parent) this.unclosedBlock();
      if (this.current.nodes && this.current.nodes.length) {
        this.current.raws.semicolon = this.semicolon;
      }
      this.current.raws.after = (this.current.raws.after || '') + this.spaces;
    }

    freeSemicolon (token) {
      this.spaces += token[1];
      if (this.current.nodes) {
        let prev = this.current.nodes[this.current.nodes.length - 1];
        if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {
          prev.raws.ownSemicolon = this.spaces;
          this.spaces = '';
        }
      }
    }

    // Helpers

    getPosition (offset) {
      let pos = this.input.fromOffset(offset);
      return {
        offset,
        line: pos.line,
        column: pos.col
      }
    }

    init (node, offset) {
      this.current.push(node);
      node.source = {
        start: this.getPosition(offset),
        input: this.input
      };
      node.raws.before = this.spaces;
      this.spaces = '';
      if (node.type !== 'comment') this.semicolon = false;
    }

    raw (node, prop, tokens) {
      let token, type;
      let length = tokens.length;
      let value = '';
      let clean = true;
      let next, prev;
      let pattern = /^([#.|])?(\w)+/i;

      for (let i = 0; i < length; i += 1) {
        token = tokens[i];
        type = token[0];

        if (type === 'comment' && node.type === 'rule') {
          prev = tokens[i - 1];
          next = tokens[i + 1];

          if (
            prev[0] !== 'space' &&
            next[0] !== 'space' &&
            pattern.test(prev[1]) &&
            pattern.test(next[1])
          ) {
            value += token[1];
          } else {
            clean = false;
          }

          continue
        }

        if (type === 'comment' || (type === 'space' && i === length - 1)) {
          clean = false;
        } else {
          value += token[1];
        }
      }
      if (!clean) {
        let raw = tokens.reduce((all, i) => all + i[1], '');
        node.raws[prop] = { value, raw };
      }
      node[prop] = value;
    }

    spacesAndCommentsFromEnd (tokens) {
      let lastTokenType;
      let spaces = '';
      while (tokens.length) {
        lastTokenType = tokens[tokens.length - 1][0];
        if (lastTokenType !== 'space' && lastTokenType !== 'comment') break
        spaces = tokens.pop()[1] + spaces;
      }
      return spaces
    }

    spacesAndCommentsFromStart (tokens) {
      let next;
      let spaces = '';
      while (tokens.length) {
        next = tokens[0][0];
        if (next !== 'space' && next !== 'comment') break
        spaces += tokens.shift()[1];
      }
      return spaces
    }

    spacesFromEnd (tokens) {
      let lastTokenType;
      let spaces = '';
      while (tokens.length) {
        lastTokenType = tokens[tokens.length - 1][0];
        if (lastTokenType !== 'space') break
        spaces = tokens.pop()[1] + spaces;
      }
      return spaces
    }

    stringFrom (tokens, from) {
      let result = '';
      for (let i = from; i < tokens.length; i++) {
        result += tokens[i][1];
      }
      tokens.splice(from, tokens.length - from);
      return result
    }

    colon (tokens) {
      let brackets = 0;
      let token, type, prev;
      for (let [i, element] of tokens.entries()) {
        token = element;
        type = token[0];

        if (type === '(') {
          brackets += 1;
        }
        if (type === ')') {
          brackets -= 1;
        }
        if (brackets === 0 && type === ':') {
          if (!prev) {
            this.doubleColon(token);
          } else if (prev[0] === 'word' && prev[1] === 'progid') {
            continue
          } else {
            return i
          }
        }

        prev = token;
      }
      return false
    }

    // Errors

    unclosedBracket (bracket) {
      throw this.input.error('Unclosed bracket', bracket[2])
    }

    unknownWord (tokens) {
      throw this.input.error('Unknown word', tokens[0][2])
    }

    unexpectedClose (token) {
      throw this.input.error('Unexpected }', token[2])
    }

    unclosedBlock () {
      let pos = this.current.source.start;
      throw this.input.error('Unclosed block', pos.line, pos.column)
    }

    doubleColon (token) {
      throw this.input.error('Double colon', token[2])
    }

    unnamedAtrule (node, token) {
      throw this.input.error('At-rule without name', token[2])
    }

    precheckMissedSemicolon (/* tokens */) {
      // Hook for Safe Parser
    }

    checkMissedSemicolon (tokens) {
      let colon = this.colon(tokens);
      if (colon === false) return

      let founded = 0;
      let token;
      for (let j = colon - 1; j >= 0; j--) {
        token = tokens[j];
        if (token[0] !== 'space') {
          founded += 1;
          if (founded === 2) break
        }
      }
      throw this.input.error('Missed semicolon', token[2])
    }
  }

  var parser = Parser;

  // This alphabet uses `A-Za-z0-9_-` symbols. The genetic algorithm helped
  // optimize the gzip compression for this alphabet.
  let urlAlphabet =
    'ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW';

  let customAlphabet = (alphabet, size) => {
    return () => {
      let id = '';
      // A compact alternative for `for (var i = 0; i < step; i++)`.
      let i = size;
      while (i--) {
        // `| 0` is more compact and faster than `Math.floor()`.
        id += alphabet[(Math.random() * alphabet.length) | 0];
      }
      return id
    }
  };

  let nanoid = (size = 21) => {
    let id = '';
    // A compact alternative for `for (var i = 0; i < step; i++)`.
    let i = size;
    while (i--) {
      // `| 0` is more compact and faster than `Math.floor()`.
      id += urlAlphabet[(Math.random() * 64) | 0];
    }
    return id
  };

  var nonSecure = /*#__PURE__*/Object.freeze({
    __proto__: null,
    nanoid: nanoid,
    customAlphabet: customAlphabet
  });

  var toString$1 = {}.toString;

  var isarray = Array.isArray || function (arr) {
    return toString$1.call(arr) == '[object Array]';
  };

  var isobject = function isObject(val) {
    return val != null && typeof val === 'object' && isarray(val) === false;
  };

  var lineColumn = LineColumnFinder;

  /**
   * Finder for index and line-column from given string.
   *
   * You can call this without `new` operator as it returns an instance anyway.
   *
   * @class
   * @param {string} str - A string to be parsed.
   * @param {Object|number} [options] - Options.
   *     This can be an index in the string for shorthand of `lineColumn(str, index)`.
   * @param {number} [options.origin=1] - The origin value of line and column.
   */
  function LineColumnFinder(str, options) {
    if (!(this instanceof LineColumnFinder)) {
      if (typeof options === "number") {
        return (new LineColumnFinder(str)).fromIndex(options);
      }
      return new LineColumnFinder(str, options);
    }

    this.str = str || "";
    this.lineToIndex = buildLineToIndex(this.str);

    options = options || {};
    this.origin = typeof options.origin === "undefined" ? 1 : options.origin;
  }

  /**
   * Find line and column from index in the string.
   *
   * @param  {number} index - Index in the string. (0-origin)
   * @return {Object|null}
   *     Found line number and column number in object `{ line: X, col: Y }`.
   *     If the given index is out of range, it returns `null`.
   */
  LineColumnFinder.prototype.fromIndex = function (index) {
    if (index < 0 || index >= this.str.length || isNaN(index)) {
      return null;
    }

    var line = findLowerIndexInRangeArray(index, this.lineToIndex);
    return {
      line: line + this.origin,
      col:  index - this.lineToIndex[line] + this.origin
    };
  };

  /**
   * Find index from line and column in the string.
   *
   * @param  {number|Object|Array} line - Line number in the string.
   *     This can be an Object of `{ line: X, col: Y }`, or
   *     an Array of `[line, col]`.
   * @param  {number} [column] - Column number in the string.
   *     This must be omitted or undefined when Object or Array is given
   *     to the first argument.
   * @return {number}
   *     Found index in the string. (always 0-origin)
   *     If the given line or column is out of range, it returns `-1`.
   */
  LineColumnFinder.prototype.toIndex = function (line, column) {
    if (typeof column === "undefined") {
      if (isarray(line) && line.length >= 2) {
        return this.toIndex(line[0], line[1]);
      }
      if (isobject(line) && "line" in line && ("col" in line || "column" in line)) {
        return this.toIndex(line.line, ("col" in line ? line.col : line.column));
      }
      return -1;
    }
    if (isNaN(line) || isNaN(column)) {
      return -1;
    }

    line -= this.origin;
    column -= this.origin;

    if (line >= 0 && column >= 0 && line < this.lineToIndex.length) {
      var lineIndex = this.lineToIndex[line];
      var nextIndex = (
        line === this.lineToIndex.length - 1
          ? this.str.length
          : this.lineToIndex[line + 1]
      );

      if (column < nextIndex - lineIndex) {
        return lineIndex + column;
      }
    }
    return -1;
  };

  /**
   * Build an array of indexes of each line from a string.
   *
   * @private
   * @param   str {string}  An input string.
   * @return  {number[]}    Built array of indexes. The key is line number.
   */
  function buildLineToIndex(str) {
    var lines = str.split("\n"),
        lineToIndex = new Array(lines.length),
        index = 0;

    for (var i = 0, l = lines.length; i < l; i++) {
      lineToIndex[i] = index;
      index += lines[i].length + /* "\n".length */ 1;
    }
    return lineToIndex;
  }

  /**
   * Find a lower-bound index of a value in a sorted array of ranges.
   *
   * Assume `arr = [0, 5, 10, 15, 20]` and
   * this returns `1` for `value = 7` (5 <= value < 10),
   * and returns `3` for `value = 18` (15 <= value < 20).
   *
   * @private
   * @param  arr   {number[]} An array of values representing ranges.
   * @param  value {number}   A value to be searched.
   * @return {number} Found index. If not found `-1`.
   */
  function findLowerIndexInRangeArray(value, arr) {
    if (value >= arr[arr.length - 1]) {
      return arr.length - 1;
    }

    var min = 0, max = arr.length - 2, mid;
    while (min < max) {
      mid = min + ((max - min) >> 1);

      if (value < arr[mid]) {
        max = mid - 1;
      } else if (value >= arr[mid + 1]) {
        min = mid + 1;
      } else { // value >= arr[mid] && value < arr[mid + 1]
        min = mid;
        break;
      }
    }
    return min;
  }

  let { existsSync, readFileSync } = colorette;
  let { dirname: dirname$2, join: join$1 } = require$$1;


  function fromBase64 (str) {
    if (Buffer) {
      return Buffer.from(str, 'base64').toString()
    } else {
      // istanbul ignore next
      return window.atob(str)
    }
  }

  class PreviousMap {
    constructor (css, opts) {
      if (opts.map === false) return
      this.loadAnnotation(css);
      this.inline = this.startWith(this.annotation, 'data:');

      let prev = opts.map ? opts.map.prev : undefined;
      let text = this.loadMap(opts.from, prev);
      if (!this.mapFile && opts.from) {
        this.mapFile = opts.from;
      }
      if (this.mapFile) this.root = dirname$2(this.mapFile);
      if (text) this.text = text;
    }

    consumer () {
      if (!this.consumerCache) {
        this.consumerCache = new sourceMap.SourceMapConsumer(this.text);
      }
      return this.consumerCache
    }

    withContent () {
      return !!(
        this.consumer().sourcesContent &&
        this.consumer().sourcesContent.length > 0
      )
    }

    startWith (string, start) {
      if (!string) return false
      return string.substr(0, start.length) === start
    }

    getAnnotationURL (sourceMapString) {
      return sourceMapString
        .match(/\/\*\s*# sourceMappingURL=(.*)\s*\*\//)[1]
        .trim()
    }

    loadAnnotation (css) {
      let annotations = css.match(/\/\*\s*# sourceMappingURL=.*\s*\*\//gm);

      if (annotations && annotations.length > 0) {
        // Locate the last sourceMappingURL to avoid picking up
        // sourceMappingURLs from comments, strings, etc.
        let lastAnnotation = annotations[annotations.length - 1];
        if (lastAnnotation) {
          this.annotation = this.getAnnotationURL(lastAnnotation);
        }
      }
    }

    decodeInline (text) {
      let baseCharsetUri = /^data:application\/json;charset=utf-?8;base64,/;
      let baseUri = /^data:application\/json;base64,/;
      let charsetUri = /^data:application\/json;charset=utf-?8,/;
      let uri = /^data:application\/json,/;

      if (charsetUri.test(text) || uri.test(text)) {
        return decodeURIComponent(text.substr(RegExp.lastMatch.length))
      }

      if (baseCharsetUri.test(text) || baseUri.test(text)) {
        return fromBase64(text.substr(RegExp.lastMatch.length))
      }

      let encoding = text.match(/data:application\/json;([^,]+),/)[1];
      throw new Error('Unsupported source map encoding ' + encoding)
    }

    loadFile (path) {
      this.root = dirname$2(path);
      if (void(path)) {
        this.mapFile = path;
        return readFileSync(path, 'utf-8').toString().trim()
      }
    }

    loadMap (file, prev) {
      if (prev === false) return false

      if (prev) {
        if (typeof prev === 'string') {
          return prev
        } else if (typeof prev === 'function') {
          let prevPath = prev(file);
          if (prevPath) {
            let map = this.loadFile(prevPath);
            if (!map) {
              throw new Error(
                'Unable to load previous source map: ' + prevPath.toString()
              )
            }
            return map
          }
        } else if (prev instanceof sourceMap.SourceMapConsumer) {
          return sourceMap.SourceMapGenerator.fromSourceMap(prev).toString()
        } else if (prev instanceof sourceMap.SourceMapGenerator) {
          return prev.toString()
        } else if (this.isMap(prev)) {
          return JSON.stringify(prev)
        } else {
          throw new Error(
            'Unsupported previous source map format: ' + prev.toString()
          )
        }
      } else if (this.inline) {
        return this.decodeInline(this.annotation)
      } else if (this.annotation) {
        let map = this.annotation;
        if (file) map = join$1(dirname$2(file), map);
        return this.loadFile(map)
      }
    }

    isMap (map) {
      if (typeof map !== 'object') return false
      return (
        typeof map.mappings === 'string' ||
        typeof map._mappings === 'string' ||
        Array.isArray(map.sections)
      )
    }
  }

  var previousMap = PreviousMap;

  var require$$2 = /*@__PURE__*/getAugmentedNamespace(nonSecure);

  let { fileURLToPath, pathToFileURL: pathToFileURL$1 } = url$2;
  let { resolve: resolve$2, isAbsolute: isAbsolute$1 } = require$$1;
  let { nanoid: nanoid$1 } = require$$2;






  class Input {
    constructor (css, opts = {}) {
      if (
        css === null ||
        typeof css === 'undefined' ||
        (typeof css === 'object' && !css.toString)
      ) {
        throw new Error(`PostCSS received ${css} instead of CSS string`)
      }

      this.css = css.toString();

      if (this.css[0] === '\uFEFF' || this.css[0] === '\uFFFE') {
        this.hasBOM = true;
        this.css = this.css.slice(1);
      } else {
        this.hasBOM = false;
      }

      if (opts.from) {
        if (/^\w+:\/\//.test(opts.from) || isAbsolute$1(opts.from)) {
          this.file = opts.from;
        } else {
          this.file = resolve$2(opts.from);
        }
      }

      let map = new previousMap(this.css, opts);
      if (map.text) {
        this.map = map;
        let file = map.consumer().file;
        if (!this.file && file) this.file = this.mapResolve(file);
      }

      if (!this.file) {
        this.id = '<input css ' + nanoid$1(6) + '>';
      }
      if (this.map) this.map.file = this.from;
    }

    fromOffset (offset) {
      let finder = lineColumn(this.css);
      this.fromOffset = i => finder.fromIndex(i);
      return this.fromOffset(offset)
    }

    error (message, line, column, opts = {}) {
      let result;
      if (!column) {
        let pos = this.fromOffset(line);
        line = pos.line;
        column = pos.col;
      }
      let origin = this.origin(line, column);
      if (origin) {
        result = new cssSyntaxError(
          message,
          origin.line,
          origin.column,
          origin.source,
          origin.file,
          opts.plugin
        );
      } else {
        result = new cssSyntaxError(
          message,
          line,
          column,
          this.css,
          this.file,
          opts.plugin
        );
      }

      result.input = { line, column, source: this.css };
      if (this.file) {
        result.input.url = pathToFileURL$1(this.file).toString();
        result.input.file = this.file;
      }

      return result
    }

    origin (line, column) {
      if (!this.map) return false
      let consumer = this.map.consumer();

      let from = consumer.originalPositionFor({ line, column });
      if (!from.source) return false

      let fromUrl;

      if (isAbsolute$1(from.source)) {
        fromUrl = pathToFileURL$1(from.source);
      } else {
        fromUrl = new URL(
          from.source,
          this.map.consumer().sourceRoot || pathToFileURL$1(this.map.mapFile)
        );
      }

      let result = {
        url: fromUrl.toString(),
        line: from.line,
        column: from.column
      };

      if (fromUrl.protocol === 'file:') {
        result.file = fileURLToPath(fromUrl);
      }

      let source = consumer.sourceContentFor(from.source);
      if (source) result.source = source;

      return result
    }

    mapResolve (file) {
      if (/^\w+:\/\//.test(file)) {
        return file
      }
      return resolve$2(this.map.consumer().sourceRoot || this.map.root || '.', file)
    }

    get from () {
      return this.file || this.id
    }
  }

  var input = Input;

  if (colorette && colorette.registerInput) {
    colorette.registerInput(Input);
  }

  function parse$3 (css, opts) {
    let input$1 = new input(css, opts);
    let parser$1 = new parser(input$1);
    try {
      parser$1.parse();
    } catch (e) {
      if (browser$1.env.NODE_ENV !== 'production') {
        if (e.name === 'CssSyntaxError' && opts && opts.from) {
          if (/\.scss$/i.test(opts.from)) {
            e.message +=
              '\nYou tried to parse SCSS with ' +
              'the standard CSS parser; ' +
              'try again with the postcss-scss parser';
          } else if (/\.sass/i.test(opts.from)) {
            e.message +=
              '\nYou tried to parse Sass with ' +
              'the standard CSS parser; ' +
              'try again with the postcss-sass parser';
          } else if (/\.less$/i.test(opts.from)) {
            e.message +=
              '\nYou tried to parse Less with ' +
              'the standard CSS parser; ' +
              'try again with the postcss-less parser';
          }
        }
      }
      throw e
    }

    return parser$1.root
  }

  var parse_1 = parse$3;

  container.registerParse(parse$3);

  let { isClean: isClean$3 } = symbols;






  const TYPE_TO_CLASS_NAME = {
    root: 'Root',
    atrule: 'AtRule',
    rule: 'Rule',
    decl: 'Declaration',
    comment: 'Comment'
  };

  const CHILDREN = 0;

  function isPromise (obj) {
    return typeof obj === 'object' && typeof obj.then === 'function'
  }

  function getEvents (node) {
    let key = false;
    let type = TYPE_TO_CLASS_NAME[node.type];
    if (node.type === 'decl') {
      key = node.prop.toLowerCase();
    } else if (node.type === 'atrule') {
      key = node.name.toLowerCase();
    }

    if (key && node.append) {
      return [
        type,
        type + '-' + key,
        CHILDREN,
        type + 'Exit',
        type + 'Exit-' + key
      ]
    } else if (key) {
      return [type, type + '-' + key, type + 'Exit', type + 'Exit-' + key]
    } else if (node.append) {
      return [type, CHILDREN, type + 'Exit']
    } else {
      return [type, type + 'Exit']
    }
  }

  function toStack (node) {
    let events;
    if (node.type === 'root') {
      events = ['Root', CHILDREN, 'RootExit'];
    } else {
      events = getEvents(node);
    }

    return {
      node,
      events,
      eventIndex: 0,
      visitors: [],
      visitorIndex: 0,
      iterator: 0
    }
  }

  function cleanMarks (node) {
    node[isClean$3] = false;
    if (node.nodes) node.nodes.forEach(i => cleanMarks(i));
    return node
  }

  let postcss = {};

  class LazyResult$1 {
    constructor (processor, css, opts) {
      this.stringified = false;
      this.processed = false;

      let root;
      if (typeof css === 'object' && css !== null && css.type === 'root') {
        root = cleanMarks(css);
      } else if (css instanceof LazyResult$1 || css instanceof result) {
        root = cleanMarks(css.root);
        if (css.map) {
          if (typeof opts.map === 'undefined') opts.map = {};
          if (!opts.map.inline) opts.map.inline = false;
          opts.map.prev = css.map;
        }
      } else {
        let parser = parse_1;
        if (opts.syntax) parser = opts.syntax.parse;
        if (opts.parser) parser = opts.parser;
        if (parser.parse) parser = parser.parse;

        try {
          root = parser(css, opts);
        } catch (error) {
          this.processed = true;
          this.error = error;
        }
      }

      this.result = new result(processor, root, opts);
      this.helpers = { ...postcss, result: this.result, postcss };
      this.plugins = this.processor.plugins.map(plugin => {
        if (typeof plugin === 'object' && plugin.prepare) {
          return { ...plugin, ...plugin.prepare(this.result) }
        } else {
          return plugin
        }
      });
    }

    get processor () {
      return this.result.processor
    }

    get opts () {
      return this.result.opts
    }

    get css () {
      return this.stringify().css
    }

    get content () {
      return this.stringify().content
    }

    get map () {
      return this.stringify().map
    }

    get root () {
      return this.sync().root
    }

    get messages () {
      return this.sync().messages
    }

    warnings () {
      return this.sync().warnings()
    }

    toString () {
      return this.css
    }

    then (onFulfilled, onRejected) {
      if (browser$1.env.NODE_ENV !== 'production') {
        if (!('from' in this.opts)) {
          warnOnce(
            'Without `from` option PostCSS could generate wrong source map ' +
              'and will not find Browserslist config. Set it to CSS file path ' +
              'or to `undefined` to prevent this warning.'
          );
        }
      }
      return this.async().then(onFulfilled, onRejected)
    }

    catch (onRejected) {
      return this.async().catch(onRejected)
    }

    finally (onFinally) {
      return this.async().then(onFinally, onFinally)
    }

    async () {
      if (this.error) return Promise.reject(this.error)
      if (this.processed) return Promise.resolve(this.result)
      if (!this.processing) {
        this.processing = this.runAsync();
      }
      return this.processing
    }

    sync () {
      if (this.error) throw this.error
      if (this.processed) return this.result
      this.processed = true;

      if (this.processing) {
        throw this.getAsyncError()
      }

      for (let plugin of this.plugins) {
        let promise = this.runOnRoot(plugin);
        if (isPromise(promise)) {
          throw this.getAsyncError()
        }
      }

      this.prepareVisitors();
      if (this.hasListener) {
        let root = this.result.root;
        while (!root[isClean$3]) {
          root[isClean$3] = true;
          this.walkSync(root);
        }
        if (this.listeners.OnceExit) {
          this.visitSync(this.listeners.OnceExit, root);
        }
      }

      return this.result
    }

    stringify () {
      if (this.error) throw this.error
      if (this.stringified) return this.result
      this.stringified = true;

      this.sync();

      let opts = this.result.opts;
      let str = stringify;
      if (opts.syntax) str = opts.syntax.stringify;
      if (opts.stringifier) str = opts.stringifier;
      if (str.stringify) str = str.stringify;

      let map = new mapGenerator(str, this.result.root, this.result.opts);
      let data = map.generate();
      this.result.css = data[0];
      this.result.map = data[1];

      return this.result
    }

    walkSync (node) {
      node[isClean$3] = true;
      let events = getEvents(node);
      for (let event of events) {
        if (event === CHILDREN) {
          if (node.nodes) {
            node.each(child => {
              if (!child[isClean$3]) this.walkSync(child);
            });
          }
        } else {
          let visitors = this.listeners[event];
          if (visitors) {
            if (this.visitSync(visitors, node.toProxy())) return
          }
        }
      }
    }

    visitSync (visitors, node) {
      for (let [plugin, visitor] of visitors) {
        this.result.lastPlugin = plugin;
        let promise;
        try {
          promise = visitor(node, this.helpers);
        } catch (e) {
          throw this.handleError(e, node.proxyOf)
        }
        if (node.type !== 'root' && !node.parent) return true
        if (isPromise(promise)) {
          throw this.getAsyncError()
        }
      }
    }

    runOnRoot (plugin) {
      this.result.lastPlugin = plugin;
      try {
        if (typeof plugin === 'object' && plugin.Once) {
          return plugin.Once(this.result.root, this.helpers)
        } else if (typeof plugin === 'function') {
          return plugin(this.result.root, this.result)
        }
      } catch (error) {
        throw this.handleError(error)
      }
    }

    getAsyncError () {
      throw new Error('Use process(css).then(cb) to work with async plugins')
    }

    handleError (error, node) {
      let plugin = this.result.lastPlugin;
      try {
        if (node) node.addToError(error);
        this.error = error;
        if (error.name === 'CssSyntaxError' && !error.plugin) {
          error.plugin = plugin.postcssPlugin;
          error.setMessage();
        } else if (plugin.postcssVersion) {
          if (browser$1.env.NODE_ENV !== 'production') {
            let pluginName = plugin.postcssPlugin;
            let pluginVer = plugin.postcssVersion;
            let runtimeVer = this.result.processor.version;
            let a = pluginVer.split('.');
            let b = runtimeVer.split('.');

            if (a[0] !== b[0] || parseInt(a[1]) > parseInt(b[1])) {
              console.error(
                'Unknown error from PostCSS plugin. Your current PostCSS ' +
                  'version is ' +
                  runtimeVer +
                  ', but ' +
                  pluginName +
                  ' uses ' +
                  pluginVer +
                  '. Perhaps this is the source of the error below.'
              );
            }
          }
        }
      } catch (err) {
        // istanbul ignore next
        if (console && console.error) console.error(err);
      }
      return error
    }

    async runAsync () {
      this.plugin = 0;
      for (let i = 0; i < this.plugins.length; i++) {
        let plugin = this.plugins[i];
        let promise = this.runOnRoot(plugin);
        if (isPromise(promise)) {
          try {
            await promise;
          } catch (error) {
            throw this.handleError(error)
          }
        }
      }

      this.prepareVisitors();
      if (this.hasListener) {
        let root = this.result.root;
        while (!root[isClean$3]) {
          root[isClean$3] = true;
          let stack = [toStack(root)];
          while (stack.length > 0) {
            let promise = this.visitTick(stack);
            if (isPromise(promise)) {
              try {
                await promise;
              } catch (e) {
                let node = stack[stack.length - 1].node;
                throw this.handleError(e, node)
              }
            }
          }
        }

        if (this.listeners.OnceExit) {
          for (let [plugin, visitor] of this.listeners.OnceExit) {
            this.result.lastPlugin = plugin;
            try {
              await visitor(root, this.helpers);
            } catch (e) {
              throw this.handleError(e)
            }
          }
        }
      }

      this.processed = true;
      return this.stringify()
    }

    prepareVisitors () {
      this.listeners = {};
      let add = (plugin, type, cb) => {
        if (!this.listeners[type]) this.listeners[type] = [];
        this.listeners[type].push([plugin, cb]);
      };
      for (let plugin of this.plugins) {
        if (typeof plugin === 'object') {
          for (let type of [
            'Root',
            'Declaration',
            'Rule',
            'AtRule',
            'Comment',
            'DeclarationExit',
            'RuleExit',
            'AtRuleExit',
            'CommentExit',
            'RootExit',
            'OnceExit'
          ]) {
            if (typeof plugin[type] === 'object') {
              for (let filter in plugin[type]) {
                if (filter === '*') {
                  add(plugin, type, plugin[type][filter]);
                } else {
                  add(
                    plugin,
                    type + '-' + filter.toLowerCase(),
                    plugin[type][filter]
                  );
                }
              }
            } else if (typeof plugin[type] === 'function') {
              add(plugin, type, plugin[type]);
            }
          }
        }
      }
      this.hasListener = Object.keys(this.listeners).length > 0;
    }

    visitTick (stack) {
      let visit = stack[stack.length - 1];
      let { node, visitors } = visit;

      if (node.type !== 'root' && !node.parent) {
        stack.pop();
        return
      }

      if (visitors.length > 0 && visit.visitorIndex < visitors.length) {
        let [plugin, visitor] = visitors[visit.visitorIndex];
        visit.visitorIndex += 1;
        if (visit.visitorIndex === visitors.length) {
          visit.visitors = [];
          visit.visitorIndex = 0;
        }
        this.result.lastPlugin = plugin;
        try {
          return visitor(node.toProxy(), this.helpers)
        } catch (e) {
          throw this.handleError(e, node)
        }
      }

      if (visit.iterator !== 0) {
        let iterator = visit.iterator;
        let child;
        while ((child = node.nodes[node.indexes[iterator]])) {
          node.indexes[iterator] += 1;
          if (!child[isClean$3]) {
            child[isClean$3] = true;
            stack.push(toStack(child));
            return
          }
        }
        visit.iterator = 0;
        delete node.indexes[iterator];
      }

      let events = visit.events;
      while (visit.eventIndex < events.length) {
        let event = events[visit.eventIndex];
        visit.eventIndex += 1;
        if (event === CHILDREN) {
          if (node.nodes && node.nodes.length) {
            node[isClean$3] = true;
            visit.iterator = node.getIterator();
          }
          return
        } else if (this.listeners[event]) {
          visit.visitors = this.listeners[event];
          return
        }
      }
      stack.pop();
    }
  }

  LazyResult$1.registerPostcss = dependant => {
    postcss = dependant;
  };

  var lazyResult = LazyResult$1;

  root.registerLazyResult(LazyResult$1);

  class Processor$1 {
    constructor (plugins = []) {
      this.version = '8.1.4';
      this.plugins = this.normalize(plugins);
    }

    use (plugin) {
      this.plugins = this.plugins.concat(this.normalize([plugin]));
      return this
    }

    process (css, opts = {}) {
      if (
        this.plugins.length === 0 &&
        opts.parser === opts.stringifier &&
        !opts.hideNothingWarning
      ) {
        if (browser$1.env.NODE_ENV !== 'production') {
          if (typeof console !== 'undefined' && console.warn) {
            console.warn(
              'You did not set any plugins, parser, or stringifier. ' +
                'Right now, PostCSS does nothing. Pick plugins for your case ' +
                'on https://www.postcss.parts/ and use them in postcss.config.js.'
            );
          }
        }
      }
      return new lazyResult(this, css, opts)
    }

    normalize (plugins) {
      let normalized = [];
      for (let i of plugins) {
        if (i.postcss === true) {
          i = i();
        } else if (i.postcss) {
          i = i.postcss;
        }

        if (typeof i === 'object' && Array.isArray(i.plugins)) {
          normalized = normalized.concat(i.plugins);
        } else if (typeof i === 'object' && i.postcssPlugin) {
          normalized.push(i);
        } else if (typeof i === 'function') {
          normalized.push(i);
        } else if (typeof i === 'object' && (i.parse || i.stringify)) {
          if (browser$1.env.NODE_ENV !== 'production') {
            throw new Error(
              'PostCSS syntaxes cannot be used as plugins. Instead, please use ' +
                'one of the syntax/parser/stringifier options as outlined ' +
                'in your PostCSS runner documentation.'
            )
          }
        } else {
          throw new Error(i + ' is not a PostCSS plugin')
        }
      }
      return normalized
    }
  }

  var processor = Processor$1;

  root.registerProcessor(Processor$1);

  function postcss$1 (...plugins) {
    if (plugins.length === 1 && Array.isArray(plugins[0])) {
      plugins = plugins[0];
    }
    return new processor(plugins, postcss$1)
  }

  postcss$1.plugin = function plugin (name, initializer) {
    if (console && console.warn) {
      console.warn(
        'postcss.plugin was deprecated. Migration guide:\n' +
          'https://evilmartians.com/chronicles/postcss-8-plugin-migration'
      );
      if (browser$1.env.LANG && browser$1.env.LANG.startsWith('cn')) {
        // istanbul ignore next
        console.warn(
          'postcss.plugin 被弃用. 迁移指南:\n' +
            'https://www.w3ctech.com/topic/2226'
        );
      }
    }
    function creator (...args) {
      let transformer = initializer(...args);
      transformer.postcssPlugin = name;
      transformer.postcssVersion = new processor().version;
      return transformer
    }

    let cache;
    Object.defineProperty(creator, 'postcss', {
      get () {
        if (!cache) cache = creator();
        return cache
      }
    });

    creator.process = function (css, processOpts, pluginOpts) {
      return postcss$1([creator(pluginOpts)]).process(css, processOpts)
    };

    return creator
  };

  postcss$1.stringify = stringify;
  postcss$1.parse = parse_1;
  postcss$1.list = list_1;

  postcss$1.comment = defaults => new comment(defaults);
  postcss$1.atRule = defaults => new atRule(defaults);
  postcss$1.decl = defaults => new declaration(defaults);
  postcss$1.rule = defaults => new rule(defaults);
  postcss$1.root = defaults => new root(defaults);

  postcss$1.CssSyntaxError = cssSyntaxError;
  postcss$1.Declaration = declaration;
  postcss$1.Container = container;
  postcss$1.Comment = comment;
  postcss$1.Warning = warning;
  postcss$1.AtRule = atRule;
  postcss$1.Result = result;
  postcss$1.Input = input;
  postcss$1.Rule = rule;
  postcss$1.Root = root;
  postcss$1.Node = node_1;

  lazyResult.registerPostcss(postcss$1);

  var postcss_1 = postcss$1;

  var jsReleases = [
  	{
  		name: "nodejs",
  		version: "0.2.0",
  		date: "2011-08-26",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "0.3.0",
  		date: "2011-08-26",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "0.4.0",
  		date: "2011-08-26",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "0.5.0",
  		date: "2011-08-26",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "0.6.0",
  		date: "2011-11-04",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "0.7.0",
  		date: "2012-01-17",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "0.8.0",
  		date: "2012-06-22",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "0.9.0",
  		date: "2012-07-20",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "0.10.0",
  		date: "2013-03-11",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "0.11.0",
  		date: "2013-03-28",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "0.12.0",
  		date: "2015-02-06",
  		lts: false,
  		security: false
  	},
  	{
  		name: "iojs",
  		version: "1.0.0",
  		date: "2015-01-14"
  	},
  	{
  		name: "iojs",
  		version: "1.1.0",
  		date: "2015-02-03"
  	},
  	{
  		name: "iojs",
  		version: "1.2.0",
  		date: "2015-02-11"
  	},
  	{
  		name: "iojs",
  		version: "1.3.0",
  		date: "2015-02-20"
  	},
  	{
  		name: "iojs",
  		version: "1.5.0",
  		date: "2015-03-06"
  	},
  	{
  		name: "iojs",
  		version: "1.6.0",
  		date: "2015-03-20"
  	},
  	{
  		name: "iojs",
  		version: "2.0.0",
  		date: "2015-05-04"
  	},
  	{
  		name: "iojs",
  		version: "2.1.0",
  		date: "2015-05-24"
  	},
  	{
  		name: "iojs",
  		version: "2.2.0",
  		date: "2015-06-01"
  	},
  	{
  		name: "iojs",
  		version: "2.3.0",
  		date: "2015-06-13"
  	},
  	{
  		name: "iojs",
  		version: "2.4.0",
  		date: "2015-07-17"
  	},
  	{
  		name: "iojs",
  		version: "2.5.0",
  		date: "2015-07-28"
  	},
  	{
  		name: "iojs",
  		version: "3.0.0",
  		date: "2015-08-04"
  	},
  	{
  		name: "iojs",
  		version: "3.1.0",
  		date: "2015-08-19"
  	},
  	{
  		name: "iojs",
  		version: "3.2.0",
  		date: "2015-08-25"
  	},
  	{
  		name: "iojs",
  		version: "3.3.0",
  		date: "2015-09-02"
  	},
  	{
  		name: "nodejs",
  		version: "4.0.0",
  		date: "2015-09-08",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "4.1.0",
  		date: "2015-09-17",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "4.2.0",
  		date: "2015-10-12",
  		lts: "Argon",
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "4.3.0",
  		date: "2016-02-09",
  		lts: "Argon",
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "4.4.0",
  		date: "2016-03-08",
  		lts: "Argon",
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "4.5.0",
  		date: "2016-08-16",
  		lts: "Argon",
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "4.6.0",
  		date: "2016-09-27",
  		lts: "Argon",
  		security: true
  	},
  	{
  		name: "nodejs",
  		version: "4.7.0",
  		date: "2016-12-06",
  		lts: "Argon",
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "4.8.0",
  		date: "2017-02-21",
  		lts: "Argon",
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "4.9.0",
  		date: "2018-03-28",
  		lts: "Argon",
  		security: true
  	},
  	{
  		name: "nodejs",
  		version: "5.0.0",
  		date: "2015-10-29",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "5.1.0",
  		date: "2015-11-17",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "5.2.0",
  		date: "2015-12-09",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "5.3.0",
  		date: "2015-12-15",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "5.4.0",
  		date: "2016-01-06",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "5.5.0",
  		date: "2016-01-21",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "5.6.0",
  		date: "2016-02-09",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "5.7.0",
  		date: "2016-02-23",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "5.8.0",
  		date: "2016-03-09",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "5.9.0",
  		date: "2016-03-16",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "5.10.0",
  		date: "2016-04-01",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "5.11.0",
  		date: "2016-04-21",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "5.12.0",
  		date: "2016-06-23",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "6.0.0",
  		date: "2016-04-26",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "6.1.0",
  		date: "2016-05-05",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "6.2.0",
  		date: "2016-05-17",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "6.3.0",
  		date: "2016-07-06",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "6.4.0",
  		date: "2016-08-12",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "6.5.0",
  		date: "2016-08-26",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "6.6.0",
  		date: "2016-09-14",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "6.7.0",
  		date: "2016-09-27",
  		lts: false,
  		security: true
  	},
  	{
  		name: "nodejs",
  		version: "6.8.0",
  		date: "2016-10-12",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "6.9.0",
  		date: "2016-10-18",
  		lts: "Boron",
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "6.10.0",
  		date: "2017-02-21",
  		lts: "Boron",
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "6.11.0",
  		date: "2017-06-06",
  		lts: "Boron",
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "6.12.0",
  		date: "2017-11-06",
  		lts: "Boron",
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "6.13.0",
  		date: "2018-02-10",
  		lts: "Boron",
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "6.14.0",
  		date: "2018-03-28",
  		lts: "Boron",
  		security: true
  	},
  	{
  		name: "nodejs",
  		version: "6.15.0",
  		date: "2018-11-27",
  		lts: "Boron",
  		security: true
  	},
  	{
  		name: "nodejs",
  		version: "6.16.0",
  		date: "2018-12-26",
  		lts: "Boron",
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "6.17.0",
  		date: "2019-02-28",
  		lts: "Boron",
  		security: true
  	},
  	{
  		name: "nodejs",
  		version: "7.0.0",
  		date: "2016-10-25",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "7.1.0",
  		date: "2016-11-08",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "7.2.0",
  		date: "2016-11-22",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "7.3.0",
  		date: "2016-12-20",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "7.4.0",
  		date: "2017-01-04",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "7.5.0",
  		date: "2017-01-31",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "7.6.0",
  		date: "2017-02-21",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "7.7.0",
  		date: "2017-02-28",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "7.8.0",
  		date: "2017-03-29",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "7.9.0",
  		date: "2017-04-11",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "7.10.0",
  		date: "2017-05-02",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "8.0.0",
  		date: "2017-05-30",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "8.1.0",
  		date: "2017-06-08",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "8.2.0",
  		date: "2017-07-19",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "8.3.0",
  		date: "2017-08-08",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "8.4.0",
  		date: "2017-08-15",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "8.5.0",
  		date: "2017-09-12",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "8.6.0",
  		date: "2017-09-26",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "8.7.0",
  		date: "2017-10-11",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "8.8.0",
  		date: "2017-10-24",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "8.9.0",
  		date: "2017-10-31",
  		lts: "Carbon",
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "8.10.0",
  		date: "2018-03-06",
  		lts: "Carbon",
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "8.11.0",
  		date: "2018-03-28",
  		lts: "Carbon",
  		security: true
  	},
  	{
  		name: "nodejs",
  		version: "8.12.0",
  		date: "2018-09-10",
  		lts: "Carbon",
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "8.13.0",
  		date: "2018-11-20",
  		lts: "Carbon",
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "8.14.0",
  		date: "2018-11-27",
  		lts: "Carbon",
  		security: true
  	},
  	{
  		name: "nodejs",
  		version: "8.15.0",
  		date: "2018-12-26",
  		lts: "Carbon",
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "8.16.0",
  		date: "2019-04-16",
  		lts: "Carbon",
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "8.17.0",
  		date: "2019-12-17",
  		lts: "Carbon",
  		security: true
  	},
  	{
  		name: "nodejs",
  		version: "9.0.0",
  		date: "2017-10-31",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "9.1.0",
  		date: "2017-11-07",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "9.2.0",
  		date: "2017-11-14",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "9.3.0",
  		date: "2017-12-12",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "9.4.0",
  		date: "2018-01-10",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "9.5.0",
  		date: "2018-01-31",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "9.6.0",
  		date: "2018-02-21",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "9.7.0",
  		date: "2018-03-01",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "9.8.0",
  		date: "2018-03-07",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "9.9.0",
  		date: "2018-03-21",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "9.10.0",
  		date: "2018-03-28",
  		lts: false,
  		security: true
  	},
  	{
  		name: "nodejs",
  		version: "9.11.0",
  		date: "2018-04-04",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "10.0.0",
  		date: "2018-04-24",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "10.1.0",
  		date: "2018-05-08",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "10.2.0",
  		date: "2018-05-23",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "10.3.0",
  		date: "2018-05-29",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "10.4.0",
  		date: "2018-06-06",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "10.5.0",
  		date: "2018-06-20",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "10.6.0",
  		date: "2018-07-04",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "10.7.0",
  		date: "2018-07-18",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "10.8.0",
  		date: "2018-08-01",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "10.9.0",
  		date: "2018-08-15",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "10.10.0",
  		date: "2018-09-06",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "10.11.0",
  		date: "2018-09-19",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "10.12.0",
  		date: "2018-10-10",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "10.13.0",
  		date: "2018-10-30",
  		lts: "Dubnium",
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "10.14.0",
  		date: "2018-11-27",
  		lts: "Dubnium",
  		security: true
  	},
  	{
  		name: "nodejs",
  		version: "10.15.0",
  		date: "2018-12-26",
  		lts: "Dubnium",
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "10.16.0",
  		date: "2019-05-28",
  		lts: "Dubnium",
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "10.17.0",
  		date: "2019-10-22",
  		lts: "Dubnium",
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "10.18.0",
  		date: "2019-12-17",
  		lts: "Dubnium",
  		security: true
  	},
  	{
  		name: "nodejs",
  		version: "10.19.0",
  		date: "2020-02-05",
  		lts: "Dubnium",
  		security: true
  	},
  	{
  		name: "nodejs",
  		version: "10.20.0",
  		date: "2020-03-26",
  		lts: "Dubnium",
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "10.21.0",
  		date: "2020-06-02",
  		lts: "Dubnium",
  		security: true
  	},
  	{
  		name: "nodejs",
  		version: "10.22.0",
  		date: "2020-07-21",
  		lts: "Dubnium",
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "10.23.0",
  		date: "2020-10-27",
  		lts: "Dubnium",
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "11.0.0",
  		date: "2018-10-23",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "11.1.0",
  		date: "2018-10-30",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "11.2.0",
  		date: "2018-11-15",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "11.3.0",
  		date: "2018-11-27",
  		lts: false,
  		security: true
  	},
  	{
  		name: "nodejs",
  		version: "11.4.0",
  		date: "2018-12-07",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "11.5.0",
  		date: "2018-12-18",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "11.6.0",
  		date: "2018-12-26",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "11.7.0",
  		date: "2019-01-17",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "11.8.0",
  		date: "2019-01-24",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "11.9.0",
  		date: "2019-01-30",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "11.10.0",
  		date: "2019-02-14",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "11.11.0",
  		date: "2019-03-05",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "11.12.0",
  		date: "2019-03-14",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "11.13.0",
  		date: "2019-03-28",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "11.14.0",
  		date: "2019-04-10",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "11.15.0",
  		date: "2019-04-30",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "12.0.0",
  		date: "2019-04-23",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "12.1.0",
  		date: "2019-04-29",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "12.2.0",
  		date: "2019-05-07",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "12.3.0",
  		date: "2019-05-21",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "12.4.0",
  		date: "2019-06-04",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "12.5.0",
  		date: "2019-06-26",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "12.6.0",
  		date: "2019-07-03",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "12.7.0",
  		date: "2019-07-23",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "12.8.0",
  		date: "2019-08-06",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "12.9.0",
  		date: "2019-08-20",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "12.10.0",
  		date: "2019-09-04",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "12.11.0",
  		date: "2019-09-25",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "12.12.0",
  		date: "2019-10-11",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "12.13.0",
  		date: "2019-10-21",
  		lts: "Erbium",
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "12.14.0",
  		date: "2019-12-17",
  		lts: "Erbium",
  		security: true
  	},
  	{
  		name: "nodejs",
  		version: "12.15.0",
  		date: "2020-02-05",
  		lts: "Erbium",
  		security: true
  	},
  	{
  		name: "nodejs",
  		version: "12.16.0",
  		date: "2020-02-11",
  		lts: "Erbium",
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "12.17.0",
  		date: "2020-05-26",
  		lts: "Erbium",
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "12.18.0",
  		date: "2020-06-02",
  		lts: "Erbium",
  		security: true
  	},
  	{
  		name: "nodejs",
  		version: "12.19.0",
  		date: "2020-10-06",
  		lts: "Erbium",
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "13.0.0",
  		date: "2019-10-22",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "13.1.0",
  		date: "2019-11-05",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "13.2.0",
  		date: "2019-11-21",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "13.3.0",
  		date: "2019-12-03",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "13.4.0",
  		date: "2019-12-17",
  		lts: false,
  		security: true
  	},
  	{
  		name: "nodejs",
  		version: "13.5.0",
  		date: "2019-12-18",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "13.6.0",
  		date: "2020-01-07",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "13.7.0",
  		date: "2020-01-21",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "13.8.0",
  		date: "2020-02-05",
  		lts: false,
  		security: true
  	},
  	{
  		name: "nodejs",
  		version: "13.9.0",
  		date: "2020-02-18",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "13.10.0",
  		date: "2020-03-04",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "13.11.0",
  		date: "2020-03-12",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "13.12.0",
  		date: "2020-03-26",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "13.13.0",
  		date: "2020-04-14",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "13.14.0",
  		date: "2020-04-29",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "14.0.0",
  		date: "2020-04-21",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "14.1.0",
  		date: "2020-04-29",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "14.2.0",
  		date: "2020-05-05",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "14.3.0",
  		date: "2020-05-19",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "14.4.0",
  		date: "2020-06-02",
  		lts: false,
  		security: true
  	},
  	{
  		name: "nodejs",
  		version: "14.5.0",
  		date: "2020-06-30",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "14.6.0",
  		date: "2020-07-20",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "14.7.0",
  		date: "2020-07-29",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "14.8.0",
  		date: "2020-08-11",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "14.9.0",
  		date: "2020-08-27",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "14.10.0",
  		date: "2020-09-08",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "14.11.0",
  		date: "2020-09-15",
  		lts: false,
  		security: true
  	},
  	{
  		name: "nodejs",
  		version: "14.12.0",
  		date: "2020-09-22",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "14.13.0",
  		date: "2020-09-29",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "14.14.0",
  		date: "2020-10-15",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "14.15.0",
  		date: "2020-10-27",
  		lts: "Fermium",
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "15.0.0",
  		date: "2020-10-20",
  		lts: false,
  		security: false
  	},
  	{
  		name: "nodejs",
  		version: "15.1.0",
  		date: "2020-11-04",
  		lts: false,
  		security: false
  	}
  ];

  var browsers={A:"ie",B:"edge",C:"firefox",D:"chrome",E:"safari",F:"opera",G:"ios_saf",H:"op_mini",I:"android",J:"bb",K:"op_mob",L:"and_chr",M:"and_ff",N:"ie_mob",O:"and_uc",P:"samsung",Q:"and_qq",R:"baidu",S:"kaios"};

  var browsers_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var browsers$1 = exports.browsers = browsers;
  });

  var browserVersions={"0":"46","1":"47","2":"48","3":"49","4":"50","5":"51","6":"52","7":"53","8":"54","9":"55",A:"10",B:"11",C:"12",D:"14",E:"9",F:"7",G:"4",H:"8",I:"15",J:"16",K:"17",L:"18",M:"81",N:"13",O:"6",P:"80",Q:"12.1",R:"83",S:"84",T:"11.1",U:"86",V:"72",W:"71",X:"66",Y:"5",Z:"19",a:"20",b:"21",c:"22",d:"23",e:"24",f:"25",g:"26",h:"27",i:"28",j:"29",k:"30",l:"31",m:"32",n:"33",o:"34",p:"35",q:"36",r:"37",s:"38",t:"39",u:"40",v:"41",w:"42",x:"43",y:"44",z:"45",AB:"56",BB:"57",CB:"58",DB:"59",EB:"60",FB:"70",GB:"62",HB:"63",IB:"64",JB:"65",KB:"79",LB:"67",MB:"68",NB:"69",OB:"82",PB:"61",QB:"74",RB:"75",SB:"76",TB:"77",UB:"78",VB:"73",WB:"3.2",XB:"10.1",YB:"85",ZB:"11.5",aB:"4.2-4.3",bB:"3",cB:"89",dB:"3.1",eB:"2",fB:"5.1",gB:"6.1",hB:"7.1",iB:"9.1",jB:"2.5",kB:"3.5",lB:"5.5",mB:"13.1",nB:"TP",oB:"9.5-9.6",pB:"10.0-10.1",qB:"10.5",rB:"10.6",sB:"3.6",tB:"11.6",uB:"4.0-4.1",vB:"87",wB:"88",xB:"6.0-6.1",yB:"7.0-7.1",zB:"8.1-8.4","0B":"9.0-9.2","1B":"9.3","2B":"10.0-10.2","3B":"10.3","4B":"11.0-11.2","5B":"11.3-11.4","6B":"12.0-12.1","7B":"12.2-12.4","8B":"13.0-13.1","9B":"13.2",AC:"13.3",BC:"13.4-13.7",CC:"all",DC:"2.1",EC:"2.2",FC:"2.3",GC:"4.1",HC:"4.4",IC:"4.4.3-4.4.4",JC:"12.12",KC:"5.0-5.4",LC:"6.2-6.4",MC:"7.2-7.4",NC:"8.2",OC:"9.2",PC:"11.1-11.2",QC:"12.0",RC:"10.4",SC:"7.12",TC:"5.0-5.1"};

  var browserVersions_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var browserVersions$1 = exports.browserVersions = browserVersions;
  });

  var agents={A:{A:{O:0.0130886,F:0.00621152,H:0.065443,E:0.209417,A:0.0196329,B:1.08635,lB:0.009298},B:"ms",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lB","O","F","H","E","A","B","","",""],E:"IE",F:{lB:962323200,O:998870400,F:1161129600,H:1237420800,E:1300060800,A:1346716800,B:1381968000}},B:{A:{C:0.009782,N:0.004891,D:0.009782,I:0.009782,J:0.014673,K:0.04891,L:0.29346,KB:0,P:0.009782,M:0.00944,R:0.004891,S:0.019564,YB:0.973309,U:1.82923},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","C","N","D","I","J","K","L","KB","P","M","R","S","YB","U","","",""],E:"Edge",F:{C:1438128000,N:1447286400,D:1470096000,I:1491868800,J:1508198400,K:1525046400,L:1542067200,KB:1579046400,P:1581033600,M:1586736000,R:1590019200,S:1594857600,YB:1598486400,U:1602201600},D:{C:"ms",N:"ms",D:"ms",I:"ms",J:"ms",K:"ms",L:"ms"}},C:{A:{"0":0.004525,"1":0.009782,"2":0.014673,"3":0.004538,"4":0.00472,"5":0.004642,"6":0.092929,"7":0.004335,"8":0.004891,"9":0.004891,eB:0.004827,bB:0.004538,G:0.014673,Y:0.004879,O:0.020136,F:0.005725,H:0.004525,E:0.00533,A:0.004283,B:0.004711,C:0.004471,N:0.004486,D:0.00453,I:0.004465,J:0.004417,K:0.008922,L:0.004393,Z:0.004443,a:0.004283,b:0.013596,c:0.013698,d:0.013614,e:0.008786,f:0.004403,g:0.004317,h:0.004393,i:0.004418,j:0.008834,k:0.004403,l:0.008928,m:0.004471,n:0.009284,o:0.004707,p:0.009076,q:0.004891,r:0.004783,s:0.00472,t:0.004783,u:0.00487,v:0.005029,w:0.0047,x:0.04891,y:0.004891,z:0.004891,AB:0.019564,BB:0.004891,CB:0.00944,DB:0.004891,EB:0.014673,PB:0.00472,GB:0.004891,HB:0.019564,IB:0.009782,JB:0.009782,X:0.014673,LB:0.004891,MB:0.039128,NB:0.004891,FB:0.004891,W:0.004891,V:0.019564,VB:0.004891,QB:0.009782,RB:0.009782,SB:0.009782,TB:0.019564,UB:0.166294,KB:0.029346,P:0.107602,M:2.50908,OB:0.396171,R:0.014673,S:0,kB:0.008786,sB:0.00487},B:"moz",C:["eB","bB","kB","sB","G","Y","O","F","H","E","A","B","C","N","D","I","J","K","L","Z","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5","6","7","8","9","AB","BB","CB","DB","EB","PB","GB","HB","IB","JB","X","LB","MB","NB","FB","W","V","VB","QB","RB","SB","TB","UB","KB","P","M","OB","R","S",""],E:"Firefox",F:{"0":1461628800,"1":1465257600,"2":1470096000,"3":1474329600,"4":1479168000,"5":1485216000,"6":1488844800,"7":1492560000,"8":1497312000,"9":1502150400,eB:1161648000,bB:1213660800,kB:1246320000,sB:1264032000,G:1300752000,Y:1308614400,O:1313452800,F:1317081600,H:1317081600,E:1320710400,A:1324339200,B:1327968000,C:1331596800,N:1335225600,D:1338854400,I:1342483200,J:1346112000,K:1349740800,L:1353628800,Z:1357603200,a:1361232000,b:1364860800,c:1368489600,d:1372118400,e:1375747200,f:1379376000,g:1386633600,h:1391472000,i:1395100800,j:1398729600,k:1402358400,l:1405987200,m:1409616000,n:1413244800,o:1417392000,p:1421107200,q:1424736000,r:1428278400,s:1431475200,t:1435881600,u:1439251200,v:1442880000,w:1446508800,x:1450137600,y:1453852800,z:1457395200,AB:1506556800,BB:1510617600,CB:1516665600,DB:1520985600,EB:1525824000,PB:1529971200,GB:1536105600,HB:1540252800,IB:1544486400,JB:1548720000,X:1552953600,LB:1558396800,MB:1562630400,NB:1567468800,FB:1571788800,W:1575331200,V:1578355200,VB:1581379200,QB:1583798400,RB:1586304000,SB:1588636800,TB:1591056000,UB:1593475200,KB:1595894400,P:1598313600,M:1600732800,OB:1603152000,R:null,S:null}},D:{A:{"0":0.004891,"1":0.009782,"2":0.019564,"3":0.24455,"4":0.004891,"5":0.004891,"6":0.004891,"7":0.039128,"8":0.014673,"9":0.009782,G:0.004706,Y:0.004879,O:0.004879,F:0.005591,H:0.005591,E:0.005591,A:0.004534,B:0.004464,C:0.010424,N:0.009782,D:0.004706,I:0.015087,J:0.004393,K:0.004393,L:0.008652,Z:0.004418,a:0.004393,b:0.004317,c:0.009782,d:0.008786,e:0.004538,f:0.004461,g:0.004711,h:0.004326,i:0.0047,j:0.004538,k:0.004335,l:0.009782,m:0.004566,n:0.009422,o:0.009782,p:0.004335,q:0.004335,r:0.004464,s:0.024455,t:0.004464,u:0.009782,v:0.0236,w:0.004403,x:0.009782,y:0.004465,z:0.004642,AB:0.029346,BB:0.019564,CB:0.014673,DB:0.009782,EB:0.014673,PB:0.039128,GB:0.014673,HB:0.034237,IB:0.014673,JB:0.034237,X:0.024455,LB:0.039128,MB:0.029346,NB:0.088038,FB:0.088038,W:0.107602,V:0.088038,VB:0.063583,QB:0.092929,RB:0.078256,SB:0.092929,TB:0.068474,UB:0.107602,KB:0.161403,P:0.224986,M:0.151621,R:0.303242,S:0.503773,YB:12.1199,U:17.9255,vB:0.034237,wB:0.019564,cB:0},B:"webkit",C:["","G","Y","O","F","H","E","A","B","C","N","D","I","J","K","L","Z","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5","6","7","8","9","AB","BB","CB","DB","EB","PB","GB","HB","IB","JB","X","LB","MB","NB","FB","W","V","VB","QB","RB","SB","TB","UB","KB","P","M","R","S","YB","U","vB","wB","cB"],E:"Chrome",F:{"0":1444780800,"1":1449014400,"2":1453248000,"3":1456963200,"4":1460592000,"5":1464134400,"6":1469059200,"7":1472601600,"8":1476230400,"9":1480550400,G:1264377600,Y:1274745600,O:1283385600,F:1287619200,H:1291248000,E:1296777600,A:1299542400,B:1303862400,C:1307404800,N:1312243200,D:1316131200,I:1316131200,J:1319500800,K:1323734400,L:1328659200,Z:1332892800,a:1337040000,b:1340668800,c:1343692800,d:1348531200,e:1352246400,f:1357862400,g:1361404800,h:1364428800,i:1369094400,j:1374105600,k:1376956800,l:1384214400,m:1389657600,n:1392940800,o:1397001600,p:1400544000,q:1405468800,r:1409011200,s:1412640000,t:1416268800,u:1421798400,v:1425513600,w:1429401600,x:1432080000,y:1437523200,z:1441152000,AB:1485302400,BB:1489017600,CB:1492560000,DB:1496707200,EB:1500940800,PB:1504569600,GB:1508198400,HB:1512518400,IB:1516752000,JB:1520294400,X:1523923200,LB:1527552000,MB:1532390400,NB:1536019200,FB:1539648000,W:1543968000,V:1548720000,VB:1552348800,QB:1555977600,RB:1559606400,SB:1564444800,TB:1568073600,UB:1571702400,KB:1575936000,P:1580860800,M:1586304000,R:1589846400,S:1594684800,YB:1598313600,U:1601942400,vB:null,wB:null,cB:null}},E:{A:{G:0,Y:0.004566,O:0.004656,F:0.004465,H:0.004891,E:0.004891,A:0.004891,B:0.014673,C:0.039128,N:0.224986,D:1.50154,dB:0,WB:0.008692,fB:0.136948,gB:0.00456,hB:0.004283,iB:0.029346,XB:0.039128,T:0.102711,Q:0.180967,mB:2.0102,nB:0},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dB","WB","G","Y","fB","O","gB","F","hB","H","E","iB","A","XB","B","T","C","Q","N","mB","D","nB","",""],E:"Safari",F:{dB:1205798400,WB:1226534400,G:1244419200,Y:1275868800,fB:1311120000,O:1343174400,gB:1382400000,F:1382400000,hB:1410998400,H:1413417600,E:1443657600,iB:1458518400,A:1474329600,XB:1490572800,B:1505779200,T:1522281600,C:1537142400,Q:1553472000,N:1568851200,mB:1585008000,D:1600214400,nB:null}},F:{A:{"0":0.004417,"1":0.008942,"2":0.004707,"3":0.004827,"4":0.004707,"5":0.004707,"6":0.004326,"7":0.008922,"8":0.014349,"9":0.004725,E:0.0082,B:0.016581,C:0.004317,I:0.00685,J:0.00685,K:0.00685,L:0.005014,Z:0.006015,a:0.004879,b:0.006597,c:0.006597,d:0.013434,e:0.006702,f:0.006015,g:0.005595,h:0.004393,i:0.008652,j:0.004879,k:0.004879,l:0.004711,m:0.005152,n:0.005014,o:0.009758,p:0.004879,q:0.009782,r:0.004283,s:0.004367,t:0.004534,u:0.004367,v:0.004227,w:0.004418,x:0.009042,y:0.004227,z:0.004725,AB:0.00472,BB:0.00472,CB:0.00944,EB:0.00472,GB:0.004532,HB:0.004566,IB:0.02283,JB:0.00867,X:0.004656,LB:0.004642,MB:0.009782,NB:0.00944,FB:0.122275,W:0.92929,V:0.019564,oB:0.00685,pB:0,qB:0.008392,rB:0.004706,T:0.006229,ZB:0.004879,tB:0.008786,Q:0.00472},B:"webkit",C:["","","","","","","","","","","","","","","","","E","oB","pB","qB","rB","B","T","ZB","tB","C","Q","I","J","K","L","Z","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5","6","7","8","9","AB","BB","CB","EB","GB","HB","IB","JB","X","LB","MB","NB","FB","W","V","","",""],E:"Opera",F:{"0":1498003200,"1":1502236800,"2":1506470400,"3":1510099200,"4":1515024000,"5":1517961600,"6":1521676800,"7":1525910400,"8":1530144000,"9":1534982400,E:1150761600,oB:1223424000,pB:1251763200,qB:1267488000,rB:1277942400,B:1292457600,T:1302566400,ZB:1309219200,tB:1323129600,C:1323129600,Q:1352073600,I:1372723200,J:1377561600,K:1381104000,L:1386288000,Z:1390867200,a:1393891200,b:1399334400,c:1401753600,d:1405987200,e:1409616000,f:1413331200,g:1417132800,h:1422316800,i:1425945600,j:1430179200,k:1433808000,l:1438646400,m:1442448000,n:1445904000,o:1449100800,p:1454371200,q:1457308800,r:1462320000,s:1465344000,t:1470096000,u:1474329600,v:1477267200,w:1481587200,x:1486425600,y:1490054400,z:1494374400,AB:1537833600,BB:1543363200,CB:1548201600,EB:1554768000,GB:1561593600,HB:1566259200,IB:1570406400,JB:1573689600,X:1578441600,LB:1583971200,MB:1587513600,NB:1592956800,FB:1595894400,W:1600128000,V:1603238400},D:{E:"o",B:"o",C:"o",oB:"o",pB:"o",qB:"o",rB:"o",T:"o",ZB:"o",tB:"o",Q:"o"}},G:{A:{H:0,D:5.38701,WB:0.0129052,uB:0.0110616,aB:0.0018436,TC:0.00921801,xB:0.00553081,yB:0.0129052,zB:0.0424029,"0B":0.0239668,"1B":0.306038,"2B":0.0516209,"3B":0.283915,"4B":0.106929,"5B":0.182517,"6B":0.186204,"7B":1.85651,"8B":0.153019,"9B":0.0755877,AC:0.575204,BC:3.06407},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","WB","uB","aB","TC","xB","yB","H","zB","0B","1B","2B","3B","4B","5B","6B","7B","8B","9B","AC","BC","D","","",""],E:"iOS Safari",F:{WB:1270252800,uB:1283904000,aB:1299628800,TC:1331078400,xB:1359331200,yB:1394409600,H:1410912000,zB:1413763200,"0B":1442361600,"1B":1458518400,"2B":1473724800,"3B":1490572800,"4B":1505779200,"5B":1522281600,"6B":1537142400,"7B":1553472000,"8B":1568851200,"9B":1572220800,AC:1580169600,BC:1585008000,D:1600214400}},H:{A:{CC:0.875474},B:"o",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","CC","","",""],E:"Opera Mini",F:{CC:1426464000}},I:{A:{bB:0,G:0.0373129,M:0,DC:0,EC:0,FC:0.000298503,GC:0.0188057,aB:0.00835809,HC:0,IC:0.0680588},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","DC","EC","FC","bB","G","GC","aB","HC","IC","M","","",""],E:"Android Browser",F:{DC:1256515200,EC:1274313600,FC:1291593600,bB:1298332800,G:1318896000,GC:1341792000,aB:1374624000,HC:1386547200,IC:1401667200,M:1587427200}},J:{A:{F:0,A:0},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","F","A","","",""],E:"Blackberry Browser",F:{F:1325376000,A:1359504000}},K:{A:{A:0,B:0,C:0,DB:0.0111391,T:0,ZB:0,Q:0},B:"o",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A","B","T","ZB","C","Q","DB","","",""],E:"Opera Mobile",F:{A:1287100800,B:1300752000,T:1314835200,ZB:1318291200,C:1330300800,Q:1349740800,DB:1593475200},D:{DB:"webkit"}},L:{A:{U:33.5525},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","U","","",""],E:"Chrome for Android",F:{U:1602028800}},M:{A:{OB:0.229905},B:"moz",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","OB","","",""],E:"Firefox for Android",F:{OB:1601596800}},N:{A:{A:0.0115934,B:0.022664},B:"ms",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A","B","","",""],E:"IE Mobile",F:{A:1340150400,B:1353456000}},O:{A:{JC:1.21083},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","JC","","",""],E:"UC Browser for Android",F:{JC:1471392000},D:{JC:"webkit"}},P:{A:{G:0.251766,KC:0.0104903,LC:0.010304,MC:0.0629416,NC:0.0209805,OC:0.115393,XB:0.0734319,PC:0.178335,QC:2.63306},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","G","KC","LC","MC","NC","OC","XB","PC","QC","","",""],E:"Samsung Internet",F:{G:1461024000,KC:1481846400,LC:1509408000,MC:1528329600,NC:1546128000,OC:1554163200,XB:1567900800,PC:1582588800,QC:1593475200}},Q:{A:{RC:0.199251},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","RC","","",""],E:"QQ Browser",F:{RC:1589846400}},R:{A:{SC:0},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","SC","","",""],E:"Baidu Browser",F:{SC:1491004800}},S:{A:{jB:0.035763},B:"moz",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jB","","",""],E:"KaiOS Browser",F:{jB:1527811200}}};

  var agents_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.agents = undefined;







  function unpackBrowserVersions(versionsData) {
      return Object.keys(versionsData).reduce(function (usage, version) {
          usage[browserVersions_1.browserVersions[version]] = versionsData[version];
          return usage;
      }, {});
  }

  var agents$1 = exports.agents = Object.keys(agents).reduce(function (map, key) {
      var versionsData = agents[key];
      map[browsers_1.browsers[key]] = Object.keys(versionsData).reduce(function (data, entry) {
          if (entry === 'A') {
              data.usage_global = unpackBrowserVersions(versionsData[entry]);
          } else if (entry === 'C') {
              data.versions = versionsData[entry].reduce(function (list, version) {
                  if (version === '') {
                      list.push(null);
                  } else {
                      list.push(browserVersions_1.browserVersions[version]);
                  }
                  return list;
              }, []);
          } else if (entry === 'D') {
              data.prefix_exceptions = unpackBrowserVersions(versionsData[entry]);
          } else if (entry === 'E') {
              data.browser = versionsData[entry];
          } else if (entry === 'F') {
              data.release_date = Object.keys(versionsData[entry]).reduce(function (map, key) {
                  map[browserVersions_1.browserVersions[key]] = versionsData[entry][key];
                  return map;
              }, {});
          } else {
              // entry is B
              data.prefix = versionsData[entry];
          }
          return data;
      }, {});
      return map;
  }, {});
  });

  /*@__PURE__*/getDefaultExportFromCjs(agents_1);

  var v4 = {
  	start: "2015-09-08",
  	lts: "2015-10-12",
  	maintenance: "2017-04-01",
  	end: "2018-04-30",
  	codename: "Argon"
  };
  var v5 = {
  	start: "2015-10-29",
  	maintenance: "2016-04-30",
  	end: "2016-06-30"
  };
  var v6 = {
  	start: "2016-04-26",
  	lts: "2016-10-18",
  	maintenance: "2018-04-30",
  	end: "2019-04-30",
  	codename: "Boron"
  };
  var v7 = {
  	start: "2016-10-25",
  	maintenance: "2017-04-30",
  	end: "2017-06-30"
  };
  var v8 = {
  	start: "2017-05-30",
  	lts: "2017-10-31",
  	maintenance: "2019-01-01",
  	end: "2019-12-31",
  	codename: "Carbon"
  };
  var v9 = {
  	start: "2017-10-01",
  	maintenance: "2018-04-01",
  	end: "2018-06-30"
  };
  var v10 = {
  	start: "2018-04-24",
  	lts: "2018-10-30",
  	maintenance: "2020-05-19",
  	end: "2021-04-30",
  	codename: "Dubnium"
  };
  var v11 = {
  	start: "2018-10-23",
  	maintenance: "2019-04-22",
  	end: "2019-06-01"
  };
  var v12 = {
  	start: "2019-04-23",
  	lts: "2019-10-21",
  	maintenance: "2020-11-30",
  	end: "2022-04-30",
  	codename: "Erbium"
  };
  var v13 = {
  	start: "2019-10-22",
  	maintenance: "2020-04-01",
  	end: "2020-06-01"
  };
  var v14 = {
  	start: "2020-04-21",
  	lts: "2020-10-27",
  	maintenance: "2021-10-19",
  	end: "2023-04-30",
  	codename: "Fermium"
  };
  var v15 = {
  	start: "2020-10-20",
  	maintenance: "2021-04-01",
  	end: "2021-06-01"
  };
  var v16 = {
  	start: "2021-04-20",
  	lts: "2021-10-26",
  	maintenance: "2022-10-18",
  	end: "2024-04-30",
  	codename: ""
  };
  var jsEOL = {
  	"v0.8": {
  	start: "2012-06-25",
  	end: "2014-07-31"
  },
  	"v0.10": {
  	start: "2013-03-11",
  	end: "2016-10-31"
  },
  	"v0.12": {
  	start: "2015-02-06",
  	end: "2016-12-31"
  },
  	v4: v4,
  	v5: v5,
  	v6: v6,
  	v7: v7,
  	v8: v8,
  	v9: v9,
  	v10: v10,
  	v11: v11,
  	v12: v12,
  	v13: v13,
  	v14: v14,
  	v15: v15,
  	v16: v16
  };

  var versions$1 = {
  	"0.20": "39",
  	"0.21": "41",
  	"0.22": "41",
  	"0.23": "41",
  	"0.24": "41",
  	"0.25": "42",
  	"0.26": "42",
  	"0.27": "43",
  	"0.28": "43",
  	"0.29": "43",
  	"0.30": "44",
  	"0.31": "45",
  	"0.32": "45",
  	"0.33": "45",
  	"0.34": "45",
  	"0.35": "45",
  	"0.36": "47",
  	"0.37": "49",
  	"1.0": "49",
  	"1.1": "50",
  	"1.2": "51",
  	"1.3": "52",
  	"1.4": "53",
  	"1.5": "54",
  	"1.6": "56",
  	"1.7": "58",
  	"1.8": "59",
  	"2.0": "61",
  	"2.1": "61",
  	"3.0": "66",
  	"3.1": "66",
  	"4.0": "69",
  	"4.1": "69",
  	"4.2": "69",
  	"5.0": "73",
  	"6.0": "76",
  	"6.1": "76",
  	"7.0": "78",
  	"7.1": "78",
  	"7.2": "78",
  	"7.3": "78",
  	"8.0": "80",
  	"8.1": "80",
  	"8.2": "80",
  	"8.3": "80",
  	"8.4": "80",
  	"8.5": "80",
  	"9.0": "83",
  	"9.1": "83",
  	"9.2": "83",
  	"9.3": "83",
  	"10.0": "85",
  	"10.1": "85",
  	"11.0": "87"
  };

  function BrowserslistError (message) {
    this.name = 'BrowserslistError';
    this.message = message;
    this.browserslist = true;
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, BrowserslistError);
    }
  }

  BrowserslistError.prototype = Error.prototype;

  var error$1 = BrowserslistError;

  function noop$1 () { }

  function fillUsage(result, name, data) { //AH+
    for (var i in data) { //AH+
      result[name + ' ' + i] = data[i]; //AH+
    } //AH+
  } //AH+

  var browser$2 = {
    loadQueries: function loadQueries () {
      throw new error$1(
        'Sharable configs are not supported in client-side build of Browserslist')
    },

    getStat: function getStat (opts) {
      return opts.stats
    },

    loadConfig: function loadConfig (opts) {
      if (opts.config) {
        throw new error$1(
          'Browserslist config are not supported in client-side build')
      }
    },

    loadCountry: function loadCountry (browserslistUsage, country /*AH+*/) {
      /*AH-
      throw new error$1(
        'Country statistics are not supported ' +
        'in client-side build of Browserslist')
      */
      country = country.replace(/[^\w-]/g, ''); //AH+
      if (!browserslistUsage[country]) { //AH+
        var usage = {}; //AH+
        if (!countryStatisticsService.ContainsCountry(country)) { //AH+
            throw new error$1("Could not find the statistics for country code '" + country + "'."); //AH+
        } //AH+

        var rawData = countryStatisticsService.GetStatisticsForCountry(country); //AH+
        var data = region.default(new Function('var module = {};\n' + rawData + ';\nreturn module.exports;')()); //AH+
        for (var i in data) { //AH+
          fillUsage(usage, i, data[i]); //AH+
        } //AH+
        browserslistUsage[country] = usage; //AH+
      } //AH+
    },

    loadFeature: function loadFeature () {
      throw new error$1(
        'Supports queries are not available in client-side build of Browserslist')
    },

    currentNode: function currentNode (resolve, context) {
      return resolve(['maintained node versions'], context)[0]
    },

    parseConfig: noop$1,

    readConfig: noop$1,

    findConfig: noop$1,

    clearCaches: noop$1,

    oldDataWarning: noop$1
  };

  var agents$1 = agents_1.agents;





   // Will load browser.js in webpack

  var YEAR = 365.259641 * 24 * 60 * 60 * 1000;
  var ANDROID_EVERGREEN_FIRST = 37;

  var QUERY_OR = 1;
  var QUERY_AND = 2;

  function isVersionsMatch (versionA, versionB) {
    return (versionA + '.').indexOf(versionB + '.') === 0
  }

  function isEolReleased (name) {
    var version = name.slice(1);
    return jsReleases.some(function (i) {
      return isVersionsMatch(i.version, version)
    })
  }

  function normalize$1 (versions) {
    return versions.filter(function (version) {
      return typeof version === 'string'
    })
  }

  function normalizeElectron (version) {
    var versionToUse = version;
    if (version.split('.').length === 3) {
      versionToUse = version
        .split('.')
        .slice(0, -1)
        .join('.');
    }
    return versionToUse
  }

  function nameMapper (name) {
    return function mapName (version) {
      return name + ' ' + version
    }
  }

  function getMajor (version) {
    return parseInt(version.split('.')[0])
  }

  function getMajorVersions (released, number) {
    if (released.length === 0) return []
    var majorVersions = uniq(released.map(getMajor));
    var minimum = majorVersions[majorVersions.length - number];
    if (!minimum) {
      return released
    }
    var selected = [];
    for (var i = released.length - 1; i >= 0; i--) {
      if (minimum > getMajor(released[i])) break
      selected.unshift(released[i]);
    }
    return selected
  }

  function uniq (array) {
    var filtered = [];
    for (var i = 0; i < array.length; i++) {
      if (filtered.indexOf(array[i]) === -1) filtered.push(array[i]);
    }
    return filtered
  }

  // Helpers

  function fillUsage (result, name, data) {
    for (var i in data) {
      result[name + ' ' + i] = data[i];
    }
  }

  function generateFilter (sign, version) {
    version = parseFloat(version);
    if (sign === '>') {
      return function (v) {
        return parseFloat(v) > version
      }
    } else if (sign === '>=') {
      return function (v) {
        return parseFloat(v) >= version
      }
    } else if (sign === '<') {
      return function (v) {
        return parseFloat(v) < version
      }
    } else {
      return function (v) {
        return parseFloat(v) <= version
      }
    }
  }

  function generateSemverFilter (sign, version) {
    version = version.split('.').map(parseSimpleInt);
    version[1] = version[1] || 0;
    version[2] = version[2] || 0;
    if (sign === '>') {
      return function (v) {
        v = v.split('.').map(parseSimpleInt);
        return compareSemver(v, version) > 0
      }
    } else if (sign === '>=') {
      return function (v) {
        v = v.split('.').map(parseSimpleInt);
        return compareSemver(v, version) >= 0
      }
    } else if (sign === '<') {
      return function (v) {
        v = v.split('.').map(parseSimpleInt);
        return compareSemver(version, v) > 0
      }
    } else {
      return function (v) {
        v = v.split('.').map(parseSimpleInt);
        return compareSemver(version, v) >= 0
      }
    }
  }

  function parseSimpleInt (x) {
    return parseInt(x)
  }

  function compare (a, b) {
    if (a < b) return -1
    if (a > b) return +1
    return 0
  }

  function compareSemver (a, b) {
    return (
      compare(parseInt(a[0]), parseInt(b[0])) ||
      compare(parseInt(a[1] || '0'), parseInt(b[1] || '0')) ||
      compare(parseInt(a[2] || '0'), parseInt(b[2] || '0'))
    )
  }

  // this follows the npm-like semver behavior
  function semverFilterLoose (operator, range) {
    range = range.split('.').map(parseSimpleInt);
    if (typeof range[1] === 'undefined') {
      range[1] = 'x';
    }
    // ignore any patch version because we only return minor versions
    // range[2] = 'x'
    switch (operator) {
      case '<=':
        return function (version) {
          version = version.split('.').map(parseSimpleInt);
          return compareSemverLoose(version, range) <= 0
        }
      default:
      case '>=':
        return function (version) {
          version = version.split('.').map(parseSimpleInt);
          return compareSemverLoose(version, range) >= 0
        }
    }
  }

  // this follows the npm-like semver behavior
  function compareSemverLoose (version, range) {
    if (version[0] !== range[0]) {
      return version[0] < range[0] ? -1 : +1
    }
    if (range[1] === 'x') {
      return 0
    }
    if (version[1] !== range[1]) {
      return version[1] < range[1] ? -1 : +1
    }
    return 0
  }

  function resolveVersion (data, version) {
    if (data.versions.indexOf(version) !== -1) {
      return version
    } else if (browserslist.versionAliases[data.name][version]) {
      return browserslist.versionAliases[data.name][version]
    } else {
      return false
    }
  }

  function normalizeVersion (data, version) {
    var resolved = resolveVersion(data, version);
    if (resolved) {
      return resolved
    } else if (data.versions.length === 1) {
      return data.versions[0]
    } else {
      return false
    }
  }

  function filterByYear (since, context) {
    since = since / 1000;
    return Object.keys(agents$1).reduce(function (selected, name) {
      var data = byName(name, context);
      if (!data) return selected
      var versions = Object.keys(data.releaseDate).filter(function (v) {
        return data.releaseDate[v] >= since
      });
      return selected.concat(versions.map(nameMapper(data.name)))
    }, [])
  }

  function cloneData (data) {
    return {
      name: data.name,
      versions: data.versions,
      released: data.released,
      releaseDate: data.releaseDate
    }
  }

  function mapVersions (data, map) {
    data.versions = data.versions.map(function (i) {
      return map[i] || i
    });
    data.released = data.versions.map(function (i) {
      return map[i] || i
    });
    var fixedDate = { };
    for (var i in data.releaseDate) {
      fixedDate[map[i] || i] = data.releaseDate[i];
    }
    data.releaseDate = fixedDate;
    return data
  }

  function byName (name, context) {
    name = name.toLowerCase();
    name = browserslist.aliases[name] || name;
    if (context.mobileToDesktop && browserslist.desktopNames[name]) {
      var desktop = browserslist.data[browserslist.desktopNames[name]];
      if (name === 'android') {
        return normalizeAndroidData(cloneData(browserslist.data[name]), desktop)
      } else {
        var cloned = cloneData(desktop);
        cloned.name = name;
        if (name === 'op_mob') {
          cloned = mapVersions(cloned, { '10.0-10.1': '10' });
        }
        return cloned
      }
    }
    return browserslist.data[name]
  }

  function normalizeAndroidVersions (androidVersions, chromeVersions) {
    var firstEvergreen = ANDROID_EVERGREEN_FIRST;
    var last = chromeVersions[chromeVersions.length - 1];
    return androidVersions
      .filter(function (version) { return /^(?:[2-4]\.|[34]$)/.test(version) })
      .concat(chromeVersions.slice(firstEvergreen - last - 1))
  }

  function normalizeAndroidData (android, chrome) {
    android.released = normalizeAndroidVersions(android.released, chrome.released);
    android.versions = normalizeAndroidVersions(android.versions, chrome.versions);
    return android
  }

  function checkName (name, context) {
    var data = byName(name, context);
    if (!data) throw new error$1('Unknown browser ' + name)
    return data
  }

  function unknownQuery (query) {
    return new error$1(
      'Unknown browser query `' + query + '`. ' +
      'Maybe you are using old Browserslist or made typo in query.'
    )
  }

  function filterAndroid (list, versions, context) {
    if (context.mobileToDesktop) return list
    var released = browserslist.data.android.released;
    var last = released[released.length - 1];
    var diff = last - ANDROID_EVERGREEN_FIRST - versions;
    if (diff > 0) {
      return list.slice(-1)
    } else {
      return list.slice(diff - 1)
    }
  }

  /**
   * Resolves queries into a browser list.
   * @param {string|string[]} queries Queries to combine.
   * Either an array of queries or a long string of queries.
   * @param {object} [context] Optional arguments to
   * the select function in `queries`.
   * @returns {string[]} A list of browsers
   */
  function resolve$3 (queries, context) {
    if (Array.isArray(queries)) {
      queries = flatten(queries.map(parse$4));
    } else {
      queries = parse$4(queries);
    }

    return queries.reduce(function (result, query, index) {
      var selection = query.queryString;

      var isExclude = selection.indexOf('not ') === 0;
      if (isExclude) {
        if (index === 0) {
          throw new error$1(
            'Write any browsers query (for instance, `defaults`) ' +
            'before `' + selection + '`')
        }
        selection = selection.slice(4);
      }

      for (var i = 0; i < QUERIES.length; i++) {
        var type = QUERIES[i];
        var match = selection.match(type.regexp);
        if (match) {
          var args = [context].concat(match.slice(1));
          var array = type.select.apply(browserslist, args).map(function (j) {
            var parts = j.split(' ');
            if (parts[1] === '0') {
              return parts[0] + ' ' + byName(parts[0], context).versions[0]
            } else {
              return j
            }
          });

          switch (query.type) {
            case QUERY_AND:
              if (isExclude) {
                return result.filter(function (j) {
                  return array.indexOf(j) === -1
                })
              } else {
                return result.filter(function (j) {
                  return array.indexOf(j) !== -1
                })
              }
            case QUERY_OR:
            default:
              if (isExclude) {
                var filter = { };
                array.forEach(function (j) {
                  filter[j] = true;
                });
                return result.filter(function (j) {
                  return !filter[j]
                })
              }
              return result.concat(array)
          }
        }
      }

      throw unknownQuery(selection)
    }, [])
  }

  var cache = { };

  /**
   * Return array of browsers by selection queries.
   *
   * @param {(string|string[])} [queries=browserslist.defaults] Browser queries.
   * @param {object} [opts] Options.
   * @param {string} [opts.path="."] Path to processed file.
   *                                 It will be used to find config files.
   * @param {string} [opts.env="production"] Processing environment.
   *                                         It will be used to take right
   *                                         queries from config file.
   * @param {string} [opts.config] Path to config file with queries.
   * @param {object} [opts.stats] Custom browser usage statistics
   *                              for "> 1% in my stats" query.
   * @param {boolean} [opts.ignoreUnknownVersions=false] Do not throw on unknown
   *                                                     version in direct query.
   * @param {boolean} [opts.dangerousExtend] Disable security checks
   *                                         for extend query.
   * @param {boolean} [opts.mobileToDesktop] Alias mobile browsers to the desktop
   *                                         version when Can I Use doesn't have
   *                                         data about the specified version.
   * @returns {string[]} Array with browser names in Can I Use.
   *
   * @example
   * browserslist('IE >= 10, IE 8') //=> ['ie 11', 'ie 10', 'ie 8']
   */
  function browserslist (queries, opts) {
    if (typeof opts === 'undefined') opts = { };

    if (typeof opts.path === 'undefined') {
      opts.path = colorette.resolve ? colorette.resolve('.') : '.';
    }

    if (typeof queries === 'undefined' || queries === null) {
      var config = browserslist.loadConfig(opts);
      if (config) {
        queries = config;
      } else {
        queries = browserslist.defaults;
      }
    }

    if (!(typeof queries === 'string' || Array.isArray(queries))) {
      throw new error$1(
        'Browser queries must be an array or string. Got ' + typeof queries + '.')
    }

    var context = {
      ignoreUnknownVersions: opts.ignoreUnknownVersions,
      dangerousExtend: opts.dangerousExtend,
      mobileToDesktop: opts.mobileToDesktop,
      env: opts.env
    };

    browser$2.oldDataWarning(browserslist.data);
    var stats = browser$2.getStat(opts, browserslist.data);
    if (stats) {
      context.customUsage = { };
      for (var browser in stats) {
        fillUsage(context.customUsage, browser, stats[browser]);
      }
    }

    var cacheKey = JSON.stringify([queries, context]);
    if (cache[cacheKey]) return cache[cacheKey]

    var result = uniq(resolve$3(queries, context)).sort(function (name1, name2) {
      name1 = name1.split(' ');
      name2 = name2.split(' ');
      if (name1[0] === name2[0]) {
        // assumptions on caniuse data
        // 1) version ranges never overlaps
        // 2) if version is not a range, it never contains `-`
        var version1 = name1[1].split('-')[0];
        var version2 = name2[1].split('-')[0];
        return compareSemver(version2.split('.'), version1.split('.'))
      } else {
        return compare(name1[0], name2[0])
      }
    });
    if (!browser$1.env.BROWSERSLIST_DISABLE_CACHE) {
      cache[cacheKey] = result;
    }
    return result
  }

  function parse$4 (queries) {
    var qs = [];
    do {
      queries = doMatch(queries, qs);
    } while (queries)
    return qs
  }

  function doMatch (string, qs) {
    var or = /^(?:,\s*|\s+or\s+)(.*)/i;
    var and = /^\s+and\s+(.*)/i;

    return find(string, function (parsed, n, max) {
      if (and.test(parsed)) {
        qs.unshift({ type: QUERY_AND, queryString: parsed.match(and)[1] });
        return true
      } else if (or.test(parsed)) {
        qs.unshift({ type: QUERY_OR, queryString: parsed.match(or)[1] });
        return true
      } else if (n === max) {
        qs.unshift({ type: QUERY_OR, queryString: parsed.trim() });
        return true
      }
      return false
    })
  }

  function find (string, predicate) {
    for (var n = 1, max = string.length; n <= max; n++) {
      var parsed = string.substr(-n, n);
      if (predicate(parsed, n, max)) {
        return string.slice(0, -n)
      }
    }
    return ''
  }

  function flatten (array) {
    if (!Array.isArray(array)) return [array]
    return array.reduce(function (a, b) {
      return a.concat(flatten(b))
    }, [])
  }

  // Will be filled by Can I Use data below
  browserslist.cache = { };
  browserslist.data = { };
  browserslist.usage = {
    global: { },
    custom: null
  };

  // Default browsers query
  browserslist.defaults = [
    '> 0.5%',
    'last 2 versions',
    'Firefox ESR',
    'not dead'
  ];

  // Browser names aliases
  browserslist.aliases = {
    fx: 'firefox',
    ff: 'firefox',
    ios: 'ios_saf',
    explorer: 'ie',
    blackberry: 'bb',
    explorermobile: 'ie_mob',
    operamini: 'op_mini',
    operamobile: 'op_mob',
    chromeandroid: 'and_chr',
    firefoxandroid: 'and_ff',
    ucandroid: 'and_uc',
    qqandroid: 'and_qq'
  };

  // Can I Use only provides a few versions for some browsers (e.g. and_chr).
  // Fallback to a similar browser for unknown versions
  browserslist.desktopNames = {
    and_chr: 'chrome',
    and_ff: 'firefox',
    ie_mob: 'ie',
    op_mob: 'opera',
    android: 'chrome' // has extra processing logic
  };

  // Aliases to work with joined versions like `ios_saf 7.0-7.1`
  browserslist.versionAliases = { };

  browserslist.clearCaches = browser$2.clearCaches;
  browserslist.parseConfig = browser$2.parseConfig;
  browserslist.readConfig = browser$2.readConfig;
  browserslist.findConfig = browser$2.findConfig;
  browserslist.loadConfig = browser$2.loadConfig;

  /**
   * Return browsers market coverage.
   *
   * @param {string[]} browsers Browsers names in Can I Use.
   * @param {string|object} [stats="global"] Which statistics should be used.
   *                                         Country code or custom statistics.
   *                                         Pass `"my stats"` to load statistics
   *                                         from Browserslist files.
   *
   * @return {number} Total market coverage for all selected browsers.
   *
   * @example
   * browserslist.coverage(browserslist('> 1% in US'), 'US') //=> 83.1
   */
  browserslist.coverage = function (browsers, stats) {
    var data;
    if (typeof stats === 'undefined') {
      data = browserslist.usage.global;
    } else if (stats === 'my stats') {
      var opts = {};
      opts.path = colorette.resolve ? colorette.resolve('.') : '.';
      var customStats = browser$2.getStat(opts);
      if (!customStats) {
        throw new error$1('Custom usage statistics was not provided')
      }
      data = {};
      for (var browser in customStats) {
        fillUsage(data, browser, customStats[browser]);
      }
    } else if (typeof stats === 'string') {
      if (stats.length > 2) {
        stats = stats.toLowerCase();
      } else {
        stats = stats.toUpperCase();
      }
      browser$2.loadCountry(browserslist.usage, stats, browserslist.data);
      data = browserslist.usage[stats];
    } else {
      if ('dataByBrowser' in stats) {
        stats = stats.dataByBrowser;
      }
      data = { };
      for (var name in stats) {
        for (var version in stats[name]) {
          data[name + ' ' + version] = stats[name][version];
        }
      }
    }

    return browsers.reduce(function (all, i) {
      var usage = data[i];
      if (usage === undefined) {
        usage = data[i.replace(/ \S+$/, ' 0')];
      }
      return all + (usage || 0)
    }, 0)
  };

  var QUERIES = [
    {
      regexp: /^last\s+(\d+)\s+major\s+versions?$/i,
      select: function (context, versions) {
        return Object.keys(agents$1).reduce(function (selected, name) {
          var data = byName(name, context);
          if (!data) return selected
          var list = getMajorVersions(data.released, versions);
          list = list.map(nameMapper(data.name));
          if (data.name === 'android') {
            list = filterAndroid(list, versions, context);
          }
          return selected.concat(list)
        }, [])
      }
    },
    {
      regexp: /^last\s+(\d+)\s+versions?$/i,
      select: function (context, versions) {
        return Object.keys(agents$1).reduce(function (selected, name) {
          var data = byName(name, context);
          if (!data) return selected
          var list = data.released.slice(-versions);
          list = list.map(nameMapper(data.name));
          if (data.name === 'android') {
            list = filterAndroid(list, versions, context);
          }
          return selected.concat(list)
        }, [])
      }
    },
    {
      regexp: /^last\s+(\d+)\s+electron\s+major\s+versions?$/i,
      select: function (context, versions) {
        var validVersions = getMajorVersions(Object.keys(versions$1), versions);
        return validVersions.map(function (i) {
          return 'chrome ' + versions$1[i]
        })
      }
    },
    {
      regexp: /^last\s+(\d+)\s+(\w+)\s+major\s+versions?$/i,
      select: function (context, versions, name) {
        var data = checkName(name, context);
        var validVersions = getMajorVersions(data.released, versions);
        var list = validVersions.map(nameMapper(data.name));
        if (data.name === 'android') {
          list = filterAndroid(list, versions, context);
        }
        return list
      }
    },
    {
      regexp: /^last\s+(\d+)\s+electron\s+versions?$/i,
      select: function (context, versions) {
        return Object.keys(versions$1).slice(-versions).map(function (i) {
          return 'chrome ' + versions$1[i]
        })
      }
    },
    {
      regexp: /^last\s+(\d+)\s+(\w+)\s+versions?$/i,
      select: function (context, versions, name) {
        var data = checkName(name, context);
        var list = data.released.slice(-versions).map(nameMapper(data.name));
        if (data.name === 'android') {
          list = filterAndroid(list, versions, context);
        }
        return list
      }
    },
    {
      regexp: /^unreleased\s+versions$/i,
      select: function (context) {
        return Object.keys(agents$1).reduce(function (selected, name) {
          var data = byName(name, context);
          if (!data) return selected
          var list = data.versions.filter(function (v) {
            return data.released.indexOf(v) === -1
          });
          list = list.map(nameMapper(data.name));
          return selected.concat(list)
        }, [])
      }
    },
    {
      regexp: /^unreleased\s+electron\s+versions?$/i,
      select: function () {
        return []
      }
    },
    {
      regexp: /^unreleased\s+(\w+)\s+versions?$/i,
      select: function (context, name) {
        var data = checkName(name, context);
        return data.versions.filter(function (v) {
          return data.released.indexOf(v) === -1
        }).map(nameMapper(data.name))
      }
    },
    {
      regexp: /^last\s+(\d*.?\d+)\s+years?$/i,
      select: function (context, years) {
        return filterByYear(Date.now() - YEAR * years, context)
      }
    },
    {
      regexp: /^since (\d+)(?:-(\d+))?(?:-(\d+))?$/i,
      select: function (context, year, month, date) {
        year = parseInt(year);
        month = parseInt(month || '01') - 1;
        date = parseInt(date || '01');
        return filterByYear(Date.UTC(year, month, date, 0, 0, 0), context)
      }
    },
    {
      regexp: /^(>=?|<=?)\s*(\d*\.?\d+)%$/,
      select: function (context, sign, popularity) {
        popularity = parseFloat(popularity);
        var usage = browserslist.usage.global;
        return Object.keys(usage).reduce(function (result, version) {
          if (sign === '>') {
            if (usage[version] > popularity) {
              result.push(version);
            }
          } else if (sign === '<') {
            if (usage[version] < popularity) {
              result.push(version);
            }
          } else if (sign === '<=') {
            if (usage[version] <= popularity) {
              result.push(version);
            }
          } else if (usage[version] >= popularity) {
            result.push(version);
          }
          return result
        }, [])
      }
    },
    {
      regexp: /^(>=?|<=?)\s*(\d*\.?\d+)%\s+in\s+my\s+stats$/,
      select: function (context, sign, popularity) {
        popularity = parseFloat(popularity);
        if (!context.customUsage) {
          throw new error$1('Custom usage statistics was not provided')
        }
        var usage = context.customUsage;
        return Object.keys(usage).reduce(function (result, version) {
          if (sign === '>') {
            if (usage[version] > popularity) {
              result.push(version);
            }
          } else if (sign === '<') {
            if (usage[version] < popularity) {
              result.push(version);
            }
          } else if (sign === '<=') {
            if (usage[version] <= popularity) {
              result.push(version);
            }
          } else if (usage[version] >= popularity) {
            result.push(version);
          }
          return result
        }, [])
      }
    },
    {
      regexp: /^(>=?|<=?)\s*(\d*\.?\d+)%\s+in\s+(\S+)\s+stats$/,
      select: function (context, sign, popularity, name) {
        popularity = parseFloat(popularity);
        var stats = browser$2.loadStat(context, name, browserslist.data);
        if (stats) {
          context.customUsage = { };
          for (var browser in stats) {
            fillUsage(context.customUsage, browser, stats[browser]);
          }
        }
        if (!context.customUsage) {
          throw new error$1('Custom usage statistics was not provided')
        }
        var usage = context.customUsage;
        return Object.keys(usage).reduce(function (result, version) {
          if (sign === '>') {
            if (usage[version] > popularity) {
              result.push(version);
            }
          } else if (sign === '<') {
            if (usage[version] < popularity) {
              result.push(version);
            }
          } else if (sign === '<=') {
            if (usage[version] <= popularity) {
              result.push(version);
            }
          } else if (usage[version] >= popularity) {
            result.push(version);
          }
          return result
        }, [])
      }
    },
    {
      regexp: /^(>=?|<=?)\s*(\d*\.?\d+)%\s+in\s+((alt-)?\w\w)$/,
      select: function (context, sign, popularity, place) {
        popularity = parseFloat(popularity);
        if (place.length === 2) {
          place = place.toUpperCase();
        } else {
          place = place.toLowerCase();
        }
        browser$2.loadCountry(browserslist.usage, place, browserslist.data);
        var usage = browserslist.usage[place];
        return Object.keys(usage).reduce(function (result, version) {
          if (sign === '>') {
            if (usage[version] > popularity) {
              result.push(version);
            }
          } else if (sign === '<') {
            if (usage[version] < popularity) {
              result.push(version);
            }
          } else if (sign === '<=') {
            if (usage[version] <= popularity) {
              result.push(version);
            }
          } else if (usage[version] >= popularity) {
            result.push(version);
          }
          return result
        }, [])
      }
    },
    {
      regexp: /^cover\s+(\d*\.?\d+)%(\s+in\s+(my\s+stats|(alt-)?\w\w))?$/,
      select: function (context, coverage, statMode) {
        coverage = parseFloat(coverage);
        var usage = browserslist.usage.global;
        if (statMode) {
          if (statMode.match(/^\s+in\s+my\s+stats$/)) {
            if (!context.customUsage) {
              throw new error$1(
                'Custom usage statistics was not provided'
              )
            }
            usage = context.customUsage;
          } else {
            var match = statMode.match(/\s+in\s+((alt-)?\w\w)/);
            var place = match[1];
            if (place.length === 2) {
              place = place.toUpperCase();
            } else {
              place = place.toLowerCase();
            }
            browser$2.loadCountry(browserslist.usage, place, browserslist.data);
            usage = browserslist.usage[place];
          }
        }
        var versions = Object.keys(usage).sort(function (a, b) {
          return usage[b] - usage[a]
        });
        var coveraged = 0;
        var result = [];
        var version;
        for (var i = 0; i <= versions.length; i++) {
          version = versions[i];
          if (usage[version] === 0) break
          coveraged += usage[version];
          result.push(version);
          if (coveraged >= coverage) break
        }
        return result
      }
    },
    {
      regexp: /^supports\s+([\w-]+)$/,
      select: function (context, feature) {
        browser$2.loadFeature(browserslist.cache, feature);
        var features = browserslist.cache[feature];
        return Object.keys(features).reduce(function (result, version) {
          var flags = features[version];
          if (flags.indexOf('y') >= 0 || flags.indexOf('a') >= 0) {
            result.push(version);
          }
          return result
        }, [])
      }
    },
    {
      regexp: /^electron\s+([\d.]+)\s*-\s*([\d.]+)$/i,
      select: function (context, from, to) {
        var fromToUse = normalizeElectron(from);
        var toToUse = normalizeElectron(to);
        if (!versions$1[fromToUse]) {
          throw new error$1('Unknown version ' + from + ' of electron')
        }
        if (!versions$1[toToUse]) {
          throw new error$1('Unknown version ' + to + ' of electron')
        }
        from = parseFloat(from);
        to = parseFloat(to);
        return Object.keys(versions$1).filter(function (i) {
          var parsed = parseFloat(i);
          return parsed >= from && parsed <= to
        }).map(function (i) {
          return 'chrome ' + versions$1[i]
        })
      }
    },
    {
      regexp: /^node\s+([\d.]+)\s*-\s*([\d.]+)$/i,
      select: function (context, from, to) {
        var nodeVersions = jsReleases.filter(function (i) {
          return i.name === 'nodejs'
        }).map(function (i) {
          return i.version
        });
        var semverRegExp = /^(0|[1-9]\d*)(\.(0|[1-9]\d*)){0,2}$/;
        if (!semverRegExp.test(from)) {
          throw new error$1(
            'Unknown version ' + from + ' of Node.js')
        }
        if (!semverRegExp.test(to)) {
          throw new error$1(
            'Unknown version ' + to + ' of Node.js')
        }
        return nodeVersions
          .filter(semverFilterLoose('>=', from))
          .filter(semverFilterLoose('<=', to))
          .map(function (v) {
            return 'node ' + v
          })
      }
    },
    {
      regexp: /^(\w+)\s+([\d.]+)\s*-\s*([\d.]+)$/i,
      select: function (context, name, from, to) {
        var data = checkName(name, context);
        from = parseFloat(normalizeVersion(data, from) || from);
        to = parseFloat(normalizeVersion(data, to) || to);
        function filter (v) {
          var parsed = parseFloat(v);
          return parsed >= from && parsed <= to
        }
        return data.released.filter(filter).map(nameMapper(data.name))
      }
    },
    {
      regexp: /^electron\s*(>=?|<=?)\s*([\d.]+)$/i,
      select: function (context, sign, version) {
        var versionToUse = normalizeElectron(version);
        return Object.keys(versions$1)
          .filter(generateFilter(sign, versionToUse))
          .map(function (i) {
            return 'chrome ' + versions$1[i]
          })
      }
    },
    {
      regexp: /^node\s*(>=?|<=?)\s*([\d.]+)$/i,
      select: function (context, sign, version) {
        var nodeVersions = jsReleases.filter(function (i) {
          return i.name === 'nodejs'
        }).map(function (i) {
          return i.version
        });
        return nodeVersions
          .filter(generateSemverFilter(sign, version))
          .map(function (v) {
            return 'node ' + v
          })
      }
    },
    {
      regexp: /^(\w+)\s*(>=?|<=?)\s*([\d.]+)$/,
      select: function (context, name, sign, version) {
        var data = checkName(name, context);
        var alias = browserslist.versionAliases[data.name][version];
        if (alias) {
          version = alias;
        }
        return data.released
          .filter(generateFilter(sign, version))
          .map(function (v) {
            return data.name + ' ' + v
          })
      }
    },
    {
      regexp: /^(firefox|ff|fx)\s+esr$/i,
      select: function () {
        return ['firefox 78']
      }
    },
    {
      regexp: /(operamini|op_mini)\s+all/i,
      select: function () {
        return ['op_mini all']
      }
    },
    {
      regexp: /^electron\s+([\d.]+)$/i,
      select: function (context, version) {
        var versionToUse = normalizeElectron(version);
        var chrome = versions$1[versionToUse];
        if (!chrome) {
          throw new error$1(
            'Unknown version ' + version + ' of electron')
        }
        return ['chrome ' + chrome]
      }
    },
    {
      regexp: /^node\s+(\d+(\.\d+)?(\.\d+)?)$/i,
      select: function (context, version) {
        var nodeReleases = jsReleases.filter(function (i) {
          return i.name === 'nodejs'
        });
        var matched = nodeReleases.filter(function (i) {
          return isVersionsMatch(i.version, version)
        });
        if (matched.length === 0) {
          if (context.ignoreUnknownVersions) {
            return []
          } else {
            throw new error$1(
              'Unknown version ' + version + ' of Node.js')
          }
        }
        return ['node ' + matched[matched.length - 1].version]
      }
    },
    {
      regexp: /^current\s+node$/i,
      select: function (context) {
        return [browser$2.currentNode(resolve$3, context)]
      }
    },
    {
      regexp: /^maintained\s+node\s+versions$/i,
      select: function (context) {
        var now = Date.now();
        var queries = Object.keys(jsEOL).filter(function (key) {
          return now < Date.parse(jsEOL[key].end) &&
            now > Date.parse(jsEOL[key].start) &&
            isEolReleased(key)
        }).map(function (key) {
          return 'node ' + key.slice(1)
        });
        return resolve$3(queries, context)
      }
    },
    {
      regexp: /^phantomjs\s+1.9$/i,
      select: function () {
        return ['safari 5']
      }
    },
    {
      regexp: /^phantomjs\s+2.1$/i,
      select: function () {
        return ['safari 6']
      }
    },
    {
      regexp: /^(\w+)\s+(tp|[\d.]+)$/i,
      select: function (context, name, version) {
        if (/^tp$/i.test(version)) version = 'TP';
        var data = checkName(name, context);
        var alias = normalizeVersion(data, version);
        if (alias) {
          version = alias;
        } else {
          if (version.indexOf('.') === -1) {
            alias = version + '.0';
          } else {
            alias = version.replace(/\.0$/, '');
          }
          alias = normalizeVersion(data, alias);
          if (alias) {
            version = alias;
          } else if (context.ignoreUnknownVersions) {
            return []
          } else {
            throw new error$1(
              'Unknown version ' + version + ' of ' + name)
          }
        }
        return [data.name + ' ' + version]
      }
    },
    {
      regexp: /^extends (.+)$/i,
      select: function (context, name) {
        return resolve$3(browser$2.loadQueries(context, name), context)
      }
    },
    {
      regexp: /^defaults$/i,
      select: function (context) {
        return resolve$3(browserslist.defaults, context)
      }
    },
    {
      regexp: /^dead$/i,
      select: function (context) {
        var dead = [
          'ie <= 10',
          'ie_mob <= 11',
          'bb <= 10',
          'op_mob <= 12.1',
          'samsung 4'
        ];
        return resolve$3(dead, context)
      }
    },
    {
      regexp: /^(\w+)$/i,
      select: function (context, name) {
        if (byName(name, context)) {
          throw new error$1(
            'Specify versions in Browserslist query for browser ' + name)
        } else {
          throw unknownQuery(name)
        }
      }
    }
  ];

  // Get and convert Can I Use data

  (function () {
    for (var name in agents$1) {
      var browser = agents$1[name];
      browserslist.data[name] = {
        name: name,
        versions: normalize$1(agents$1[name].versions),
        released: normalize$1(agents$1[name].versions.slice(0, -3)),
        releaseDate: agents$1[name].release_date
      };
      fillUsage(browserslist.usage.global, name, browser.usage_global);

      browserslist.versionAliases[name] = { };
      for (var i = 0; i < browser.versions.length; i++) {
        var full = browser.versions[i];
        if (!full) continue

        if (full.indexOf('-') !== -1) {
          var interval = full.split('-');
          for (var j = 0; j < interval.length; j++) {
            browserslist.versionAliases[name][interval[j]] = full;
          }
        }
      }
    }

    browserslist.versionAliases.op_mob['59'] = '58';
  }());

  var browserslist_1 = browserslist;

  var statuses = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.default = {
      1: "ls", // WHATWG Living Standard
      2: "rec", // W3C Recommendation
      3: "pr", // W3C Proposed Recommendation
      4: "cr", // W3C Candidate Recommendation
      5: "wd", // W3C Working Draft
      6: "other", // Non-W3C, but reputable
      7: "unoff" // Unofficial, Editor's Draft or W3C "Note"
  };
  });

  var supported = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.default = {
      y: 1 << 0,
      n: 1 << 1,
      a: 1 << 2,
      p: 1 << 3,
      u: 1 << 4,
      x: 1 << 5,
      d: 1 << 6
  };
  });

  var feature = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.default = unpackFeature;



  var _statuses2 = _interopRequireDefault(statuses);



  var _supported2 = _interopRequireDefault(supported);





  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var MATH2LOG = Math.log(2);

  function unpackSupport(cipher) {
      // bit flags
      var stats = Object.keys(_supported2.default).reduce(function (list, support) {
          if (cipher & _supported2.default[support]) list.push(support);
          return list;
      }, []);

      // notes
      var notes = cipher >> 7;
      var notesArray = [];
      while (notes) {
          var note = Math.floor(Math.log(notes) / MATH2LOG) + 1;
          notesArray.unshift('#' + note);
          notes -= Math.pow(2, note - 1);
      }

      return stats.concat(notesArray).join(' ');
  }

  function unpackFeature(packed) {
      var unpacked = { status: _statuses2.default[packed.B], title: packed.C };
      unpacked.stats = Object.keys(packed.A).reduce(function (browserStats, key) {
          var browser = packed.A[key];
          browserStats[browsers_1.browsers[key]] = Object.keys(browser).reduce(function (stats, support) {
              var packedVersions = browser[support].split(' ');
              var unpacked = unpackSupport(support);
              packedVersions.forEach(function (v) {
                  return stats[browserVersions_1.browserVersions[v]] = unpacked;
              });
              return stats;
          }, {});
          return browserStats;
      }, {});
      return unpacked;
  }
  });

  var aac={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"2":"eB bB G Y O F H E A B C N D I J K L Z a b kB sB","132":"0 1 2 3 4 5 6 7 8 9 c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"1":"0 1 2 3 4 5 6 7 8 9 C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E","16":"A B"},E:{"1":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"1":"H D uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB"},H:{"2":"CC"},I:{"1":"bB G M GC aB HC IC","2":"DC EC FC"},J:{"1":"A","2":"F"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"132":"OB"},N:{"1":"A","2":"B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"132":"jB"}},B:6,C:"AAC audio file format"};

  var abortcontroller={A:{A:{"2":"O F H E A B lB"},B:{"1":"J K L KB P M R S YB U","2":"C N D I"},C:{"1":"BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB kB sB"},D:{"1":"X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB"},E:{"1":"N D Q mB nB","2":"G Y O F H E A B dB WB fB gB hB iB XB","130":"C T"},F:{"1":"7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"0 1 2 3 4 5 6 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q"},G:{"1":"D 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"OC XB PC QC","2":"G KC LC MC NC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:1,C:"AbortController & AbortSignal"};

  var ac3Ec3={A:{A:{"2":"O F H E A B lB"},B:{"1":"C N D I J K L","2":"KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H WB uB aB TC xB yB zB","132":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F","132":"A"},K:{"2":"A B C DB T ZB","132":"Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"132":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:6,C:"AC-3 (Dolby Digital) and EC-3 (Dolby Digital Plus) codecs"};

  var accelerometer={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB","194":"CB DB EB PB GB HB IB JB X"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"0 1 2 3 4 5 6 7 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:4,C:"Accelerometer"};

  var addeventlistener={A:{A:{"1":"E A B","130":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","257":"eB bB G Y O kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"1":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"EventTarget.addEventListener()"};

  var alternateStylesheet={A:{A:{"1":"H E A B","2":"O F lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"E B C oB pB qB rB T ZB tB Q","16":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"16":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"16":"F A"},K:{"16":"A B C DB T ZB Q"},L:{"16":"U"},M:{"16":"OB"},N:{"16":"A B"},O:{"16":"JC"},P:{"16":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"16":"SC"},S:{"1":"jB"}},B:1,C:"Alternate stylesheet"};

  var ambientLight={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N","132":"D I J K L","322":"KB P M R S YB U"},C:{"2":"eB bB G Y O F H E A B C N D I J K L Z a b kB sB","132":"0 1 2 3 4 5 6 7 8 9 c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB","194":"EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB","322":"CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"132":"jB"}},B:4,C:"Ambient Light Sensor"};

  var apng={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","2":"eB"},D:{"1":"DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB"},E:{"1":"H E A B C N D iB XB T Q mB nB","2":"G Y O F dB WB fB gB hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q","2":"E I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},G:{"1":"H D zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC xB yB"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"MC NC OC XB PC QC","2":"G KC LC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"1":"jB"}},B:7,C:"Animated PNG (APNG)"};

  var arrayFindIndex={A:{A:{"2":"O F H E A B lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y"},E:{"1":"H E A B C N D hB iB XB T Q mB nB","2":"G Y O F dB WB fB gB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l oB pB qB rB T ZB tB Q"},G:{"1":"H D zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC xB yB"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F","16":"A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:6,C:"Array.prototype.findIndex"};

  var arrayFind={A:{A:{"2":"O F H E A B lB"},B:{"1":"I J K L KB P M R S YB U","16":"C N D"},C:{"1":"0 1 2 3 4 5 6 7 8 9 f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y"},E:{"1":"H E A B C N D hB iB XB T Q mB nB","2":"G Y O F dB WB fB gB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l oB pB qB rB T ZB tB Q"},G:{"1":"H D zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC xB yB"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F","16":"A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:6,C:"Array.prototype.find"};

  var arrayFlat={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB kB sB"},D:{"1":"NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB"},E:{"1":"C N D Q mB nB","2":"G Y O F H E A B dB WB fB gB hB iB XB T"},F:{"1":"AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q"},G:{"1":"D 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"XB PC QC","2":"G KC LC MC NC OC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:6,C:"flat & flatMap array methods"};

  var arrayIncludes={A:{A:{"2":"O F H E A B lB"},B:{"1":"D I J K L KB P M R S YB U","2":"C N"},C:{"1":"0 1 2 3 4 5 6 7 8 9 x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w kB sB"},D:{"1":"1 2 3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},E:{"1":"E A B C N D iB XB T Q mB nB","2":"G Y O F H dB WB fB gB hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n oB pB qB rB T ZB tB Q"},G:{"1":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:6,C:"Array.prototype.includes"};

  var arrowFunctions={A:{A:{"2":"O F H E A B lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y"},E:{"1":"A B C N D XB T Q mB nB","2":"G Y O F H E dB WB fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l oB pB qB rB T ZB tB Q"},G:{"1":"D 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:6,C:"Arrow functions"};

  var asmjs={A:{A:{"2":"O F H E A B lB"},B:{"1":"N D I J K L","132":"KB P M R S YB U","322":"C"},C:{"1":"0 1 2 3 4 5 6 7 8 9 c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b kB sB"},D:{"2":"G Y O F H E A B C N D I J K L Z a b c d e f g h","132":"0 1 2 3 4 5 6 7 8 9 i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"E B C oB pB qB rB T ZB tB Q","132":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G DC EC FC GC aB HC IC","132":"M"},J:{"2":"F A"},K:{"2":"A B C T ZB Q","132":"DB"},L:{"132":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G","132":"KC LC MC NC OC XB PC QC"},Q:{"132":"RC"},R:{"132":"SC"},S:{"1":"jB"}},B:6,C:"asm.js"};

  var asyncClipboard={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB kB sB","132":"HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"1":"GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB","66":"CB DB EB PB"},E:{"1":"D mB nB","2":"G Y O F H E A B C N dB WB fB gB hB iB XB T Q"},F:{"1":"3 4 5 6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"0 1 2 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q"},G:{"2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","260":"D"},H:{"2":"CC"},I:{"2":"bB G DC EC FC GC aB HC IC","260":"M"},J:{"2":"F A"},K:{"2":"A B C T ZB Q","260":"DB"},L:{"1":"U"},M:{"132":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC","260":"OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"Asynchronous Clipboard API"};

  var asyncFunctions={A:{A:{"2":"O F H E A B lB"},B:{"1":"I J K L KB P M R S YB U","2":"C N","194":"D"},C:{"1":"6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB"},D:{"1":"9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},E:{"1":"B C N D T Q mB nB","2":"G Y O F H E A dB WB fB gB hB iB","514":"XB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v oB pB qB rB T ZB tB Q"},G:{"1":"D 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B","514":"3B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"LC MC NC OC XB PC QC","2":"G KC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:6,C:"Async functions"};

  var asyncIterationsAndGenerators={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB kB sB"},D:{"1":"HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB"},E:{"1":"C N D Q mB nB","2":"G Y O F H E A B dB WB fB gB hB iB XB T"},F:{"1":"4 5 6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"0 1 2 3 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:6,C:"Async iterators and generators"};

  var atobBtoa={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V rB T ZB tB Q","2":"E oB pB","16":"qB"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"1":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"B C DB T ZB Q","16":"A"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Base64 encoding and decoding"};

  var audioApi={A:{A:{"2":"O F H E A B lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E","33":"A B C N D I J K L Z a b c d e f g h i j k l m n"},E:{"1":"nB","2":"G Y dB WB fB","33":"O F H E A B C N D gB hB iB XB T Q mB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q","33":"I J K L Z a b"},G:{"2":"WB uB aB TC","33":"H D xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:5,C:"Web Audio API"};

  var audio={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB","132":"G Y O F H E A B C N D I J K L Z kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V qB rB T ZB tB Q","2":"E","4":"oB pB"},G:{"1":"H D uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB"},H:{"2":"CC"},I:{"1":"bB G M FC GC aB HC IC","2":"DC EC"},J:{"1":"F A"},K:{"1":"B C DB T ZB Q","2":"A"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Audio element"};

  var audiotracks={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L","322":"KB P M R S YB U"},C:{"2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m kB sB","194":"0 1 2 3 4 5 6 7 8 9 n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y","322":"0 1 2 3 4 5 6 7 8 9 z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"F H E A B C N D gB hB iB XB T Q mB nB","2":"G Y O dB WB fB"},F:{"2":"E B C I J K L Z a b c d e f g h i j k l oB pB qB rB T ZB tB Q","322":"0 1 2 3 4 5 6 7 8 9 m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"1":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC xB"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C T ZB Q","322":"DB"},L:{"322":"U"},M:{"2":"OB"},N:{"1":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"194":"jB"}},B:1,C:"Audio Tracks"};

  var autofocus={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G"},E:{"1":"Y O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"G dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q","2":"E"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"bB G M GC aB HC IC","2":"DC EC FC"},J:{"1":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"2":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:1,C:"Autofocus attribute"};

  var auxclick={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"2":"0 1 2 3 4 5 6 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB","129":"7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"1":"9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C T ZB Q","16":"DB"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:5,C:"Auxclick"};

  var av1={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K","194":"L"},C:{"1":"LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 6 7 8 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB","66":"9 AB BB CB DB EB","1090":"PB GB HB IB","1284":"JB","1540":"X"},D:{"1":"FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X","66":"LB MB NB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"BB CB EB GB HB IB JB X LB MB NB FB W V","2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"1090":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:6,C:"AV1 video format"};

  var avif={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB kB sB","194":"TB UB KB P M OB R S"},D:{"1":"YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"W V","2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"194":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:6,C:"AVIF image format"};

  var backgroundAttachment={A:{A:{"1":"E A B","132":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","132":"eB bB G Y O F H E A B C N D I J K L Z a b c d e kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"Y O F H E A B C N D fB gB hB iB XB T Q mB nB","132":"G dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V qB rB T ZB tB Q","132":"E oB pB"},G:{"2":"WB uB aB","772":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC HC IC","132":"GC aB"},J:{"260":"F A"},K:{"1":"B C DB T ZB Q","132":"A"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"2":"G","1028":"KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1028":"SC"},S:{"1":"jB"}},B:4,C:"CSS background-attachment"};

  var backgroundClipText={A:{A:{"2":"O F H E A B lB"},B:{"36":"KB P M R S YB U","257":"I J K L","548":"C N D"},C:{"1":"3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","16":"0 1 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB","130":"2"},D:{"36":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"16":"dB WB","36":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB"},F:{"16":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"16":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"16":"CC"},I:{"16":"bB G M DC EC FC GC aB HC IC"},J:{"16":"F A"},K:{"16":"A B C DB T ZB Q"},L:{"16":"U"},M:{"16":"OB"},N:{"16":"A B"},O:{"16":"JC"},P:{"16":"G KC LC MC NC OC XB PC QC"},Q:{"16":"RC"},R:{"16":"SC"},S:{"130":"jB"}},B:1,C:"CSS3 Background-clip: text"};

  var backgroundImgOpts={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB","36":"sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","516":"G Y O F H E A B C N D"},E:{"1":"F H E A B C N D hB iB XB T Q mB nB","772":"G Y O dB WB fB gB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V qB rB T ZB tB Q","2":"E oB","36":"pB"},G:{"1":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","4":"WB uB aB xB","516":"TC"},H:{"132":"CC"},I:{"1":"M HC IC","36":"DC","516":"bB G GC aB","548":"EC FC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"CSS3 Background-image options"};

  var backgroundPositionXY={A:{A:{"1":"O F H E A B lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:7,C:"background-position-x & background-position-y"};

  var backgroundRepeatRoundSpace={A:{A:{"1":"A B","2":"O F H lB","132":"E"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l"},E:{"1":"F H E A B C N D hB iB XB T Q mB nB","2":"G Y O dB WB fB gB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V qB rB T ZB tB Q","2":"E I J K L oB pB"},G:{"1":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC xB"},H:{"1":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"1":"A","2":"F"},K:{"1":"B C DB T ZB Q","2":"A"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:4,C:"CSS background-repeat round and space"};

  var backgroundSync={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB kB sB","16":"R S"},D:{"1":"3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"1":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:7,C:"Background Sync API"};

  var batteryStatus={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 x y z","2":"6 7 8 9 eB bB G Y O F H E AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","132":"J K L Z a b c d e f g h i j k l m n o p q r s t u v w","164":"A B C N D I"},D:{"1":"0 1 2 3 4 5 6 7 8 9 s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q","66":"r"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"Battery Status API"};

  var beacon={A:{A:{"2":"O F H E A B lB"},B:{"1":"D I J K L KB P M R S YB U","2":"C N"},C:{"1":"0 1 2 3 4 5 6 7 8 9 l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s"},E:{"1":"C N D T Q mB nB","2":"G Y O F H E A B dB WB fB gB hB iB XB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f oB pB qB rB T ZB tB Q"},G:{"1":"D 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:5,C:"Beacon API"};

  var beforeafterprint={A:{A:{"1":"O F H E A B","16":"lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y kB sB"},D:{"1":"HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"4 5 6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"0 1 2 3 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"16":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"16":"A B"},O:{"16":"JC"},P:{"2":"KC LC MC NC OC XB PC QC","16":"G"},Q:{"1":"RC"},R:{"2":"SC"},S:{"1":"jB"}},B:1,C:"Printing Events"};

  var bigint={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB kB sB","194":"JB X LB"},D:{"1":"LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X"},E:{"1":"D nB","2":"G Y O F H E A B C N dB WB fB gB hB iB XB T Q mB"},F:{"1":"8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"0 1 2 3 4 5 6 7 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q"},G:{"1":"D","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"OC XB PC QC","2":"G KC LC MC NC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:6,C:"BigInt"};

  var blobbuilder={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y kB sB","36":"O F H E A B C"},D:{"1":"0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F","36":"H E A B C N D I J K L Z"},E:{"1":"O F H E A B C N D gB hB iB XB T Q mB nB","2":"G Y dB WB fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V Q","2":"E B C oB pB qB rB T ZB tB"},G:{"1":"H D xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC"},H:{"2":"CC"},I:{"1":"M","2":"DC EC FC","36":"bB G GC aB HC IC"},J:{"1":"A","2":"F"},K:{"1":"DB Q","2":"A B C T ZB"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:5,C:"Blob constructing"};

  var bloburls={A:{A:{"2":"O F H E lB","129":"A B"},B:{"1":"I J K L KB P M R S YB U","129":"C N D"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F","33":"H E A B C N D I J K L Z a b c"},E:{"1":"F H E A B C N D gB hB iB XB T Q mB nB","2":"G Y dB WB fB","33":"O"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"1":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC","33":"xB"},H:{"2":"CC"},I:{"1":"M HC IC","2":"bB DC EC FC","33":"G GC aB"},J:{"1":"A","2":"F"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"B","2":"A"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:5,C:"Blob URLs"};

  var borderImage={A:{A:{"1":"B","2":"O F H E A lB"},B:{"1":"D I J K L KB P M R S YB U","129":"C N"},C:{"1":"4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB","260":"0 1 2 3 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","804":"G Y O F H E A B C N D kB sB"},D:{"1":"AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","260":"5 6 7 8 9","388":"0 1 2 3 4 k l m n o p q r s t u v w x y z","1412":"I J K L Z a b c d e f g h i j","1956":"G Y O F H E A B C N D"},E:{"129":"A B C N D iB XB T Q mB nB","1412":"O F H E gB hB","1956":"G Y dB WB fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E oB pB","260":"s t u v w","388":"I J K L Z a b c d e f g h i j k l m n o p q r","1796":"qB rB","1828":"B C T ZB tB Q"},G:{"129":"D 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","1412":"H xB yB zB 0B","1956":"WB uB aB TC"},H:{"1828":"CC"},I:{"388":"M HC IC","1956":"bB G DC EC FC GC aB"},J:{"1412":"A","1924":"F"},K:{"1":"DB","2":"A","1828":"B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"B","2":"A"},O:{"388":"JC"},P:{"1":"MC NC OC XB PC QC","260":"KC LC","388":"G"},Q:{"260":"RC"},R:{"260":"SC"},S:{"260":"jB"}},B:4,C:"CSS3 Border images"};

  var borderRadius={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","257":"0 1 2 3 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","289":"bB kB sB","292":"eB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","33":"G"},E:{"1":"Y F H E A B C N D hB iB XB T Q mB nB","33":"G dB WB","129":"O fB gB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V qB rB T ZB tB Q","2":"E oB pB"},G:{"1":"H D uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","33":"WB"},H:{"2":"CC"},I:{"1":"bB G M EC FC GC aB HC IC","33":"DC"},J:{"1":"F A"},K:{"1":"B C DB T ZB Q","2":"A"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"257":"jB"}},B:4,C:"CSS3 Border-radius (rounded corners)"};

  var broadcastchannel={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r kB sB"},D:{"1":"8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"MC NC OC XB PC QC","2":"G KC LC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"1":"jB"}},B:1,C:"BroadcastChannel"};

  var brotli={A:{A:{"2":"O F H E A B lB"},B:{"1":"I J K L KB P M R S YB U","2":"C N D"},C:{"1":"0 1 2 3 4 5 6 7 8 9 y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x kB sB"},D:{"1":"5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","194":"3","257":"4"},E:{"1":"N D mB nB","2":"G Y O F H E A dB WB fB gB hB iB XB","513":"B C T Q"},F:{"1":"0 1 2 3 4 5 6 7 8 9 s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p oB pB qB rB T ZB tB Q","194":"q r"},G:{"1":"D 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"1":"RC"},R:{"2":"SC"},S:{"1":"jB"}},B:6,C:"Brotli Accept-Encoding/Content-Encoding"};

  var calc={A:{A:{"2":"O F H lB","260":"E","516":"A B"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB","33":"G Y O F H E A B C N D I"},D:{"1":"0 1 2 3 4 5 6 7 8 9 g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L","33":"Z a b c d e f"},E:{"1":"F H E A B C N D gB hB iB XB T Q mB nB","2":"G Y dB WB fB","33":"O"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"1":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC","33":"xB"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB","132":"HC IC"},J:{"1":"A","2":"F"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"calc() as CSS unit value"};

  var canvasBlending={A:{A:{"2":"O F H E A B lB"},B:{"1":"N D I J K L KB P M R S YB U","2":"C"},C:{"1":"0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j"},E:{"1":"F H E A B C N D gB hB iB XB T Q mB nB","2":"G Y O dB WB fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J oB pB qB rB T ZB tB Q"},G:{"1":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC xB"},H:{"2":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"Canvas blend modes"};

  var canvasText={A:{A:{"1":"E A B","2":"lB","8":"O F H"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","8":"eB bB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB","8":"dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V qB rB T ZB tB Q","8":"E oB pB"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"B C DB T ZB Q","8":"A"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Text API for Canvas"};

  var canvas={A:{A:{"1":"E A B","2":"lB","8":"O F H"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S sB","132":"eB bB kB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB","132":"dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"260":"CC"},I:{"1":"bB G M GC aB HC IC","132":"DC EC FC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Canvas (basic support)"};

  var chUnit={A:{A:{"2":"O F H lB","132":"E A B"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g"},E:{"1":"F H E A B C N D hB iB XB T Q mB nB","2":"G Y O dB WB fB gB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"1":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC xB"},H:{"2":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"1":"A","2":"F"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"ch (character) unit"};

  var chacha20Poly1305={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"1 2 3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB"},D:{"1":"3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m","129":"0 1 2 n o p q r s t u v w x y z"},E:{"1":"C N D T Q mB nB","2":"G Y O F H E A B dB WB fB gB hB iB XB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p oB pB qB rB T ZB tB Q"},G:{"1":"D 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC","16":"IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:6,C:"ChaCha20-Poly1305 cipher suites for TLS"};

  var channelMessaging={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f kB sB","194":"g h i j k l m n o p q r s t u"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"Y O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"G dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V rB T ZB tB Q","2":"E oB pB","16":"qB"},G:{"1":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB"},H:{"2":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"1":"F A"},K:{"1":"B C DB T ZB Q","2":"A"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Channel messaging"};

  var childnodeRemove={A:{A:{"2":"O F H E A B lB"},B:{"1":"N D I J K L KB P M R S YB U","16":"C"},C:{"1":"0 1 2 3 4 5 6 7 8 9 d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d"},E:{"1":"F H E A B C N D gB hB iB XB T Q mB nB","2":"G Y dB WB fB","16":"O"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"1":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC xB"},H:{"2":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"1":"A","2":"F"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"ChildNode.remove()"};

  var classlist={A:{A:{"8":"O F H E lB","1924":"A B"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","8":"eB bB kB","516":"e f","772":"G Y O F H E A B C N D I J K L Z a b c d sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","8":"G Y O F","516":"e f g h","772":"d","900":"H E A B C N D I J K L Z a b c"},E:{"1":"F H E A B C N D hB iB XB T Q mB nB","8":"G Y dB WB","900":"O fB gB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","8":"E B oB pB qB rB T","900":"C ZB tB Q"},G:{"1":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","8":"WB uB aB","900":"TC xB"},H:{"900":"CC"},I:{"1":"M HC IC","8":"DC EC FC","900":"bB G GC aB"},J:{"1":"A","900":"F"},K:{"1":"DB","8":"A B","900":"C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"900":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"classList (DOMTokenList)"};

  var clearSiteDataHeader={A:{A:{"16":"O F H E A B lB"},B:{"1":"KB P M R S YB U","16":"C N D I J K L"},C:{"1":"HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","16":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB kB sB"},D:{"1":"PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","16":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB"},E:{"16":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"2 3 4 5 6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","16":"0 1 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q"},G:{"16":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"16":"CC"},I:{"1":"M","16":"bB G DC EC FC GC aB HC IC"},J:{"16":"F A"},K:{"16":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"16":"A B"},O:{"16":"JC"},P:{"16":"G KC LC MC NC OC XB PC QC"},Q:{"16":"RC"},R:{"16":"SC"},S:{"16":"jB"}},B:5,C:"Clear-Site-Data Header"};

  var clientHintsDprWidthViewport={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"2":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:6,C:"Client Hints: DPR, Width, Viewport-Width"};

  var clipboard={A:{A:{"2436":"O F H E A B lB"},B:{"260":"K L","2436":"C N D I J","8196":"KB P M R S YB U"},C:{"2":"eB bB G Y O F H E A B C N D I J K L Z a b kB sB","772":"c d e f g h i j k l m n o p q r s t u","4100":"0 1 2 3 4 5 6 7 8 9 v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"2":"G Y O F H E A B C","2564":"N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w","8196":"CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","10244":"0 1 2 3 4 5 6 7 8 9 x y z AB BB"},E:{"1":"C N D Q mB nB","16":"dB WB","2308":"A B XB T","2820":"G Y O F H E fB gB hB iB"},F:{"2":"E B oB pB qB rB T ZB tB","16":"C","516":"Q","2564":"I J K L Z a b c d e f g h i j","8196":"0 1 2 3 4 5 6 7 8 9 z AB BB CB EB GB HB IB JB X LB MB NB FB W V","10244":"k l m n o p q r s t u v w x y"},G:{"1":"D 6B 7B 8B 9B AC BC","2":"WB uB aB","2820":"H TC xB yB zB 0B 1B 2B 3B 4B 5B"},H:{"2":"CC"},I:{"2":"bB G DC EC FC GC aB","260":"M","2308":"HC IC"},J:{"2":"F","2308":"A"},K:{"2":"A B C T ZB","16":"Q","1028":"DB"},L:{"8196":"U"},M:{"1028":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2052":"KC LC","2308":"G","8196":"MC NC OC XB PC QC"},Q:{"10244":"RC"},R:{"2052":"SC"},S:{"4100":"jB"}},B:5,C:"Synchronous Clipboard API"};

  var comparedocumentposition={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","16":"eB bB kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","16":"G Y O F H E A B C N D","132":"I J K L Z a b c d e f g h i j"},E:{"1":"A B C N D XB T Q mB nB","16":"G Y O dB WB","132":"F H E gB hB iB","260":"fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 C K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V tB Q","16":"E B oB pB qB rB T ZB","132":"I J"},G:{"1":"D 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB","132":"H uB aB TC xB yB zB 0B 1B"},H:{"1":"CC"},I:{"1":"M HC IC","16":"DC EC","132":"bB G FC GC aB"},J:{"132":"F A"},K:{"1":"C DB Q","16":"A B T ZB"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Node.compareDocumentPosition()"};

  var consoleBasic={A:{A:{"1":"A B","2":"O F lB","132":"H E"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V T ZB tB Q","2":"E oB pB qB rB"},G:{"1":"WB uB aB TC","513":"H D xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"4097":"CC"},I:{"1025":"bB G M DC EC FC GC aB HC IC"},J:{"258":"F A"},K:{"2":"A","258":"B C DB T ZB Q"},L:{"1025":"U"},M:{"2049":"OB"},N:{"258":"A B"},O:{"258":"JC"},P:{"1025":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1025":"SC"},S:{"1":"jB"}},B:1,C:"Basic console logging functions"};

  var consoleTime={A:{A:{"1":"B","2":"O F H E A lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V T ZB tB Q","2":"E oB pB qB rB","16":"B"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"1":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"DB","16":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"B","2":"A"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"console.time and console.timeEnd"};

  var _const={A:{A:{"2":"O F H E A lB","2052":"B"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","132":"eB bB G Y O F H E A B C kB sB","260":"N D I J K L Z a b c d e f g h i j k l m n o p"},D:{"1":"3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","260":"G Y O F H E A B C N D I J K L Z a","772":"b c d e f g h i j k l m n o p q r s t u","1028":"0 1 2 v w x y z"},E:{"1":"A B C N D XB T Q mB nB","260":"G Y dB WB","772":"O F H E fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E oB","132":"B pB qB rB T ZB","644":"C tB Q","772":"I J K L Z a b c d e f g h","1028":"i j k l m n o p"},G:{"1":"D 2B 3B 4B 5B 6B 7B 8B 9B AC BC","260":"WB uB aB","772":"H TC xB yB zB 0B 1B"},H:{"644":"CC"},I:{"1":"M","16":"DC EC","260":"FC","772":"bB G GC aB HC IC"},J:{"772":"F A"},K:{"1":"DB","132":"A B T ZB","644":"C Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"B","2":"A"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","1028":"G"},Q:{"1":"RC"},R:{"1028":"SC"},S:{"1":"jB"}},B:6,C:"const"};

  var constraintValidation={A:{A:{"2":"O F H E lB","900":"A B"},B:{"1":"K L KB P M R S YB U","388":"D I J","900":"C N"},C:{"1":"5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB","260":"3 4","388":"0 1 2 j k l m n o p q r s t u v w x y z","900":"G Y O F H E A B C N D I J K L Z a b c d e f g h i"},D:{"1":"0 1 2 3 4 5 6 7 8 9 u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","16":"G Y O F H E A B C N D","388":"f g h i j k l m n o p q r s t","900":"I J K L Z a b c d e"},E:{"1":"A B C N D XB T Q mB nB","16":"G Y dB WB","388":"H E hB iB","900":"O F fB gB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","16":"E B oB pB qB rB T ZB","388":"I J K L Z a b c d e f g","900":"C tB Q"},G:{"1":"D 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB uB aB","388":"H yB zB 0B 1B","900":"TC xB"},H:{"2":"CC"},I:{"1":"M","16":"bB DC EC FC","388":"HC IC","900":"G GC aB"},J:{"16":"F","388":"A"},K:{"1":"DB","16":"A B T ZB","900":"C Q"},L:{"1":"U"},M:{"1":"OB"},N:{"900":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"388":"jB"}},B:1,C:"Constraint Validation API"};

  var contenteditable={A:{A:{"1":"O F H E A B lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","2":"eB","4":"bB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB"},H:{"2":"CC"},I:{"1":"bB G M GC aB HC IC","2":"DC EC FC"},J:{"1":"F A"},K:{"1":"DB Q","2":"A B C T ZB"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"contenteditable attribute (basic support)"};

  var contentsecuritypolicy={A:{A:{"2":"O F H E lB","132":"A B"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB","129":"G Y O F H E A B C N D I J K L Z a b c"},D:{"1":"0 1 2 3 4 5 6 7 8 9 f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N","257":"D I J K L Z a b c d e"},E:{"1":"F H E A B C N D hB iB XB T Q mB nB","2":"G Y dB WB","257":"O gB","260":"fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"1":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB","257":"xB","260":"TC"},H:{"2":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"2":"F","257":"A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"132":"A B"},O:{"257":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"Content Security Policy 1.0"};

  var contentsecuritypolicy2={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D","32772":"I J K L"},C:{"2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k kB sB","132":"l m n o","260":"p","516":"q r s t u v w x y","8196":"0 1 2 3 4 5 6 7 8 9 z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"1":"0 1 2 3 4 5 6 7 8 9 u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p","1028":"q r s","2052":"t"},E:{"1":"A B C N D XB T Q mB nB","2":"G Y O F H E dB WB fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c oB pB qB rB T ZB tB Q","1028":"d e f","2052":"g"},G:{"1":"D 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"4100":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"8196":"jB"}},B:2,C:"Content Security Policy Level 2"};

  var cookieStoreApi={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L","194":"KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB","194":"IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q","194":"5 6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"194":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:7,C:"Cookie Store API"};

  var cors={A:{A:{"1":"B","2":"O F lB","132":"A","260":"H E"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB W V VB QB RB SB TB UB KB P M OB R S kB sB","2":"eB bB","1025":"PB GB HB IB JB X LB MB NB FB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","132":"G Y O F H E A B C"},E:{"2":"dB WB","513":"O F H E A B C N D gB hB iB XB T Q mB nB","644":"G Y fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V Q","2":"E B oB pB qB rB T ZB tB"},G:{"513":"H D xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","644":"WB uB aB TC"},H:{"2":"CC"},I:{"1":"M HC IC","132":"bB G DC EC FC GC aB"},J:{"1":"A","132":"F"},K:{"1":"C DB Q","2":"A B T ZB"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"B","132":"A"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Cross-Origin Resource Sharing"};

  var createimagebitmap={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v kB sB","3076":"0 1 2 3 4 5 6 7 8 9 w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"1":"DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","132":"4 5","260":"6 7","516":"8 9 AB BB CB"},E:{"2":"G Y O F H E A B C N dB WB fB gB hB iB XB T Q","16":"D mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q oB pB qB rB T ZB tB Q","132":"r s","260":"t u","516":"v w x y z"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"3076":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"LC MC NC OC XB PC QC","16":"G KC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"3076":"jB"}},B:1,C:"createImageBitmap"};

  var credentialManagement={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","66":"2 3 4","129":"5 6 7 8 9 AB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"MC NC OC XB PC QC","2":"G KC LC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"Credential Management API"};

  var cryptography={A:{A:{"2":"lB","8":"O F H E A","164":"B"},B:{"1":"KB P M R S YB U","513":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","8":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l kB sB","66":"m n"},D:{"1":"0 1 2 3 4 5 6 7 8 9 r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","8":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q"},E:{"1":"B C N D T Q mB nB","8":"G Y O F dB WB fB gB","289":"H E A hB iB XB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","8":"E B C I J K L Z a b c d oB pB qB rB T ZB tB Q"},G:{"1":"D 4B 5B 6B 7B 8B 9B AC BC","8":"WB uB aB TC xB yB","289":"H zB 0B 1B 2B 3B"},H:{"2":"CC"},I:{"1":"M","8":"bB G DC EC FC GC aB HC IC"},J:{"8":"F A"},K:{"1":"DB","8":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"8":"A","164":"B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:2,C:"Web Cryptography"};

  var cssAll={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q"},E:{"1":"A B C N D iB XB T Q mB nB","2":"G Y O F H E dB WB fB gB hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d oB pB qB rB T ZB tB Q"},G:{"1":"D 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B"},H:{"2":"CC"},I:{"1":"M IC","2":"bB G DC EC FC GC aB HC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"CSS all property"};

  var cssAnimation={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G kB sB","33":"Y O F H E A B C N D I"},D:{"1":"0 1 2 3 4 5 6 7 8 9 x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","33":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w"},E:{"1":"E A B C N D iB XB T Q mB nB","2":"dB WB","33":"O F H fB gB hB","292":"G Y"},F:{"1":"0 1 2 3 4 5 6 7 8 9 k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V Q","2":"E B oB pB qB rB T ZB tB","33":"C I J K L Z a b c d e f g h i j"},G:{"1":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","33":"H xB yB zB","164":"WB uB aB TC"},H:{"2":"CC"},I:{"1":"M","33":"G GC aB HC IC","164":"bB DC EC FC"},J:{"33":"F A"},K:{"1":"DB Q","2":"A B C T ZB"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"33":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:5,C:"CSS Animation"};

  var cssAnyLink={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","16":"eB","33":"0 1 2 3 bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB"},D:{"1":"JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","16":"G Y O F H E A B C N D","33":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB"},E:{"1":"E A B C N D iB XB T Q mB nB","16":"G Y O dB WB fB","33":"F H gB hB"},F:{"1":"6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q","33":"0 1 2 3 4 5 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},G:{"1":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB uB aB TC","33":"H xB yB zB"},H:{"2":"CC"},I:{"1":"M","16":"bB G DC EC FC GC aB","33":"HC IC"},J:{"16":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"33":"JC"},P:{"1":"OC XB PC QC","16":"G","33":"KC LC MC NC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"33":"jB"}},B:5,C:"CSS :any-link selector"};

  var cssAppearance={A:{A:{"2":"O F H E A B lB"},B:{"1":"S YB U","33":"R","164":"KB P M","388":"C N D I J K L"},C:{"1":"P M OB R S","164":"0 1 2 3 4 5 6 7 8 9 p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB","676":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o kB sB"},D:{"1":"S YB U vB wB cB","33":"R","164":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M"},E:{"164":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"E B C oB pB qB rB T ZB tB Q","33":"FB W V","164":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB"},G:{"164":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"164":"bB G M DC EC FC GC aB HC IC"},J:{"164":"F A"},K:{"2":"A B C T ZB Q","164":"DB"},L:{"1":"U"},M:{"164":"OB"},N:{"2":"A","388":"B"},O:{"164":"JC"},P:{"164":"G KC LC MC NC OC XB PC QC"},Q:{"164":"RC"},R:{"164":"SC"},S:{"164":"jB"}},B:5,C:"CSS Appearance"};

  var cssApplyRule={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L","194":"KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","194":"5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r oB pB qB rB T ZB tB Q","194":"0 1 2 3 4 5 6 7 8 9 s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C T ZB Q","194":"DB"},L:{"194":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G","194":"KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"194":"SC"},S:{"2":"jB"}},B:7,C:"CSS @apply rule"};

  var cssAtCounterStyle={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m kB sB","132":"0 1 2 3 4 5 6 7 8 9 n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"132":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"132":"jB"}},B:4,C:"CSS Counter Styles"};

  var cssBackdropFilter={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J","257":"K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB kB sB","578":"FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"1":"SB TB UB KB P M R S YB U vB wB cB","2":"0 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","194":"1 2 3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB"},E:{"2":"G Y O F H dB WB fB gB hB","33":"E A B C N D iB XB T Q mB nB"},F:{"1":"IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n oB pB qB rB T ZB tB Q","194":"0 1 2 3 4 5 6 7 8 9 o p q r s t u v w x y z AB BB CB EB GB HB"},G:{"2":"H WB uB aB TC xB yB zB","33":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"578":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"QC","2":"G","194":"KC LC MC NC OC XB PC"},Q:{"194":"RC"},R:{"194":"SC"},S:{"2":"jB"}},B:7,C:"CSS Backdrop Filter"};

  var cssBackgroundOffsets={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e"},E:{"1":"F H E A B C N D hB iB XB T Q mB nB","2":"G Y O dB WB fB gB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V qB rB T ZB tB Q","2":"E oB pB"},G:{"1":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC xB"},H:{"1":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"1":"A","2":"F"},K:{"1":"B C DB T ZB Q","2":"A"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"CSS background-position edge offsets"};

  var cssBackgroundblendmode={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j kB sB"},D:{"1":"1 2 3 4 5 6 7 8 9 p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o","260":"0"},E:{"1":"B C N D XB T Q mB nB","2":"G Y O F dB WB fB gB","132":"H E A hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 c d e f g h i j k l m o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b oB pB qB rB T ZB tB Q","260":"n"},G:{"1":"D 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC xB yB","132":"H zB 0B 1B 2B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"CSS background-blend-mode"};

  var cssBoxdecorationbreak={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L","164":"KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l kB sB"},D:{"2":"G Y O F H E A B C N D I J K L Z a b","164":"0 1 2 3 4 5 6 7 8 9 c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O dB WB fB","164":"F H E A B C N D gB hB iB XB T Q mB nB"},F:{"2":"E oB pB qB rB","129":"B C T ZB tB Q","164":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"2":"WB uB aB TC xB","164":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"132":"CC"},I:{"2":"bB G DC EC FC GC aB","164":"M HC IC"},J:{"2":"F","164":"A"},K:{"2":"A","129":"B C T ZB Q","164":"DB"},L:{"164":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"164":"G KC LC MC NC OC XB PC QC"},Q:{"164":"RC"},R:{"164":"SC"},S:{"1":"jB"}},B:5,C:"CSS box-decoration-break"};

  var cssBoxshadow={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB","33":"kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","33":"G Y O F H E"},E:{"1":"O F H E A B C N D fB gB hB iB XB T Q mB nB","33":"Y","164":"G dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V qB rB T ZB tB Q","2":"E oB pB"},G:{"1":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","33":"uB aB","164":"WB"},H:{"2":"CC"},I:{"1":"G M GC aB HC IC","164":"bB DC EC FC"},J:{"1":"A","33":"F"},K:{"1":"B C DB T ZB Q","2":"A"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"CSS3 Box-shadow"};

  var cssCanvas={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB","16":"6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"2":"2 3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","33":"0 1 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},E:{"2":"dB WB","33":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q","33":"I J K L Z a b c d e f g h i j k l m n o"},G:{"33":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"M","33":"bB G DC EC FC GC aB HC IC"},J:{"33":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"KC LC MC NC OC XB PC QC","33":"G"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:7,C:"CSS Canvas Drawings"};

  var cssCaretColor={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 6 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB"},D:{"1":"BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB"},E:{"1":"C N D T Q mB nB","2":"G Y O F H E A B dB WB fB gB hB iB XB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x oB pB qB rB T ZB tB Q"},G:{"1":"D 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"MC NC OC XB PC QC","2":"G KC LC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:4,C:"CSS caret-color"};

  var cssCaseInsensitive={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"1 2 3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB"},D:{"1":"3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},E:{"1":"E A B C N D iB XB T Q mB nB","2":"G Y O F H dB WB fB gB hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p oB pB qB rB T ZB tB Q"},G:{"1":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"1":"RC"},R:{"2":"SC"},S:{"1":"jB"}},B:5,C:"Case-insensitive CSS attribute selectors"};

  var cssClipPath={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K","260":"KB P M R S YB U","3138":"L"},C:{"1":"8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB","132":"0 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB","644":"1 2 3 4 5 6 7"},D:{"2":"G Y O F H E A B C N D I J K L Z a b c d","260":"9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","292":"0 1 2 3 4 5 6 7 8 e f g h i j k l m n o p q r s t u v w x y z"},E:{"2":"G Y O dB WB fB gB","292":"F H E A B C N D hB iB XB T Q mB nB"},F:{"2":"E B C oB pB qB rB T ZB tB Q","260":"0 1 2 3 4 5 6 7 8 9 w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","292":"I J K L Z a b c d e f g h i j k l m n o p q r s t u v"},G:{"2":"WB uB aB TC xB","292":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G DC EC FC GC aB","260":"M","292":"HC IC"},J:{"2":"F A"},K:{"2":"A B C T ZB Q","260":"DB"},L:{"260":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"292":"JC"},P:{"292":"G KC LC MC NC OC XB PC QC"},Q:{"292":"RC"},R:{"260":"SC"},S:{"644":"jB"}},B:4,C:"CSS clip-path property (for HTML)"};

  var cssColorAdjust={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L","33":"KB P M R S YB U"},C:{"1":"2 3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB"},D:{"16":"G Y O F H E A B C N D I J K L","33":"0 1 2 3 4 5 6 7 8 9 Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y dB WB fB","33":"O F H E A B C N D gB hB iB XB T Q mB nB"},F:{"2":"E B C oB pB qB rB T ZB tB Q","33":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"16":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"16":"bB G M DC EC FC GC aB HC IC"},J:{"16":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"16":"U"},M:{"1":"OB"},N:{"16":"A B"},O:{"16":"JC"},P:{"16":"G KC LC MC NC OC XB PC QC"},Q:{"33":"RC"},R:{"16":"SC"},S:{"1":"jB"}},B:5,C:"CSS color-adjust"};

  var cssColorFunction={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"B C N D XB T Q mB nB","2":"G Y O F H E A dB WB fB gB hB iB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"D 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"CSS color function"};

  var cssConicGradients={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"R S","2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB kB sB","578":"RB SB TB UB KB P M OB"},D:{"1":"NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB","194":"DB EB PB GB HB IB JB X LB MB"},E:{"1":"N D Q mB nB","2":"G Y O F H E A B C dB WB fB gB hB iB XB T"},F:{"1":"IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q","194":"0 1 2 3 4 5 6 7 8 9 AB BB CB EB GB HB"},G:{"1":"D 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"578":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"XB PC QC","2":"G KC LC MC NC OC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"CSS Conical Gradients"};

  var cssContainment={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u kB sB","194":"0 1 2 3 4 5 6 7 8 9 v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB"},D:{"1":"6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","66":"5"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r oB pB qB rB T ZB tB Q","66":"s t"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"LC MC NC OC XB PC QC","2":"G KC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"194":"jB"}},B:2,C:"CSS Containment"};

  var cssContentVisibility={A:{A:{"2":"O F H E A B lB"},B:{"1":"YB U","2":"C N D I J K L KB P M R S"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB","16":"nB"},F:{"1":"W V","2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"CSS content-visibility"};

  var cssCounters={A:{A:{"1":"H E A B","2":"O F lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"1":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:2,C:"CSS Counters"};

  var cssCrispEdges={A:{A:{"2":"O lB","2340":"F H E A B"},B:{"2":"C N D I J K L","1025":"KB P M R S YB U"},C:{"2":"eB bB kB","513":"JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","545":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB sB"},D:{"2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u","1025":"0 1 2 3 4 5 6 7 8 9 v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"A B C N D XB T Q mB nB","2":"G Y dB WB fB","164":"O","4644":"F H E gB hB iB"},F:{"2":"E B I J K L Z a b c d e f g h oB pB qB rB T ZB","545":"C tB Q","1025":"0 1 2 3 4 5 6 7 8 9 i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"1":"D 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB","4260":"TC xB","4644":"H yB zB 0B 1B"},H:{"2":"CC"},I:{"2":"bB G DC EC FC GC aB HC IC","1025":"M"},J:{"2":"F","4260":"A"},K:{"2":"A B T ZB","545":"C Q","1025":"DB"},L:{"1025":"U"},M:{"545":"OB"},N:{"2340":"A B"},O:{"1":"JC"},P:{"1025":"G KC LC MC NC OC XB PC QC"},Q:{"1025":"RC"},R:{"1025":"SC"},S:{"4097":"jB"}},B:7,C:"Crisp edges/pixelated images"};

  var cssCrossFade={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L","33":"KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"G Y O F H E A B C N D I J","33":"0 1 2 3 4 5 6 7 8 9 K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"A B C N D XB T Q mB nB","2":"G Y dB WB","33":"O F H E fB gB hB iB"},F:{"2":"E B C oB pB qB rB T ZB tB Q","33":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"1":"D 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB","33":"H TC xB yB zB 0B 1B"},H:{"2":"CC"},I:{"2":"bB G DC EC FC GC aB","33":"M HC IC"},J:{"2":"F A"},K:{"2":"A B C T ZB Q","33":"DB"},L:{"33":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"33":"JC"},P:{"33":"G KC LC MC NC OC XB PC QC"},Q:{"33":"RC"},R:{"33":"SC"},S:{"2":"jB"}},B:4,C:"CSS Cross-Fade Function"};

  var cssDefaultPseudo={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","16":"eB bB kB sB"},D:{"1":"5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","16":"G Y O F H E A B C N D","132":"0 1 2 3 4 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},E:{"1":"B C N D XB T Q mB nB","16":"G Y dB WB","132":"O F H E A fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","16":"E B oB pB qB rB T ZB","132":"I J K L Z a b c d e f g h i j k l m n o p q r","260":"C tB Q"},G:{"1":"D 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB uB aB TC xB","132":"H yB zB 0B 1B 2B"},H:{"260":"CC"},I:{"1":"M","16":"bB DC EC FC","132":"G GC aB HC IC"},J:{"16":"F","132":"A"},K:{"1":"DB","16":"A B C T ZB","260":"Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"132":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","132":"G"},Q:{"1":"RC"},R:{"2":"SC"},S:{"1":"jB"}},B:7,C:":default CSS pseudo-class"};

  var cssDescendantGtgt={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L P M R S YB U","16":"KB"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U","16":"vB wB cB"},E:{"1":"B","2":"G Y O F H E A C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:7,C:"Explicit descendant combinator >>"};

  var cssDeviceadaptation={A:{A:{"2":"O F H E lB","164":"A B"},B:{"66":"KB P M R S YB U","164":"C N D I J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i","66":"0 1 2 3 4 5 6 7 8 9 j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s t oB pB qB rB T ZB tB Q","66":"0 1 2 3 4 5 6 7 8 9 u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"292":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A DB","292":"B C T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"164":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"66":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"CSS Device Adaptation"};

  var cssDirPseudo={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"1":"3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J kB sB","33":"0 1 2 K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"33":"jB"}},B:5,C:":dir() CSS pseudo-class"};

  var cssDisplayContents={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L","260":"KB P M R S YB U"},C:{"1":"GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q kB sB","260":"0 1 2 3 4 5 6 7 8 9 r s t u v w x y z AB BB CB DB EB PB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB","194":"CB DB EB PB GB HB IB","260":"JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"D mB nB","2":"G Y O F H E A B dB WB fB gB hB iB XB","260":"N","772":"C T Q"},F:{"2":"0 1 2 3 4 5 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q","260":"6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"1":"D BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B","260":"5B 6B 7B 8B 9B AC"},H:{"2":"CC"},I:{"2":"bB G DC EC FC GC aB HC IC","260":"M"},J:{"2":"F A"},K:{"2":"A B C T ZB Q","260":"DB"},L:{"260":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC","260":"OC XB PC QC"},Q:{"260":"RC"},R:{"2":"SC"},S:{"260":"jB"}},B:5,C:"CSS display: contents"};

  var cssElementFunction={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"33":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","164":"eB bB kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"33":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"33":"jB"}},B:5,C:"CSS element() function"};

  var cssEnvFunction={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB kB sB"},D:{"1":"NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB"},E:{"1":"C N D T Q mB nB","2":"G Y O F H E A dB WB fB gB hB iB XB","132":"B"},F:{"1":"AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q"},G:{"1":"D 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B","132":"4B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"XB PC QC","2":"G KC LC MC NC OC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:7,C:"CSS Environment Variables env()"};

  var cssExclusions={A:{A:{"2":"O F H E lB","33":"A B"},B:{"2":"KB P M R S YB U","33":"C N D I J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"33":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"CSS Exclusions Level 1"};

  var cssFeaturequeries={A:{A:{"2":"O F H E A B lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h"},E:{"1":"E A B C N D iB XB T Q mB nB","2":"G Y O F H dB WB fB gB hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V Q","2":"E B C oB pB qB rB T ZB tB"},G:{"1":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB"},H:{"1":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"CSS Feature Queries"};

  var cssFilterFunction={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"A B C N D iB XB T Q mB nB","2":"G Y O F H dB WB fB gB hB","33":"E"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"D 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB","33":"0B 1B"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"CSS filter() function"};

  var cssFilters={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","1028":"N D I J K L","1346":"C"},C:{"1":"0 1 2 3 4 5 6 7 8 9 p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB","196":"o","516":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n sB"},D:{"1":"7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K","33":"0 1 2 3 4 5 6 L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},E:{"1":"A B C N D iB XB T Q mB nB","2":"G Y dB WB fB","33":"O F H E gB hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q","33":"I J K L Z a b c d e f g h i j k l m n o p q r s t"},G:{"1":"D 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC","33":"H xB yB zB 0B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB","33":"HC IC"},J:{"2":"F","33":"A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"MC NC OC XB PC QC","33":"G KC LC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:5,C:"CSS Filter Effects"};

  var cssFirstLetter={A:{A:{"1":"E A B","16":"lB","516":"H","1540":"O F"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","132":"bB","260":"eB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","16":"Y O F H","132":"G"},E:{"1":"O F H E A B C N D fB gB hB iB XB T Q mB nB","16":"Y dB","132":"G WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V tB Q","16":"E oB","260":"B pB qB rB T ZB"},G:{"1":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB uB aB"},H:{"1":"CC"},I:{"1":"bB G M GC aB HC IC","16":"DC EC","132":"FC"},J:{"1":"F A"},K:{"1":"C DB Q","260":"A B T ZB"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:2,C:"::first-letter CSS pseudo-element selector"};

  var cssFirstLine={A:{A:{"1":"E A B","132":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"1":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:2,C:"CSS first-line pseudo-element"};

  var cssFixed={A:{A:{"1":"F H E A B","2":"lB","8":"O"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB XB T Q mB nB","1025":"iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"H D zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB","132":"TC xB yB"},H:{"2":"CC"},I:{"1":"bB M HC IC","260":"DC EC FC","513":"G GC aB"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:2,C:"CSS position:fixed"};

  var cssFocusVisible={A:{A:{"2":"O F H E A B lB"},B:{"1":"U","2":"C N D I J K L","328":"KB P M R S YB"},C:{"2":"eB bB kB sB","161":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"1":"U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X","328":"LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"V","2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB oB pB qB rB T ZB tB Q","328":"X LB MB NB FB W"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"161":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"161":"jB"}},B:7,C:":focus-visible CSS pseudo-class"};

  var cssFocusWithin={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB"},D:{"1":"EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB","194":"DB"},E:{"1":"B C N D XB T Q mB nB","2":"G Y O F H E A dB WB fB gB hB iB"},F:{"1":"1 2 3 4 5 6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q","194":"0"},G:{"1":"D 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"NC OC XB PC QC","2":"G KC LC MC"},Q:{"1":"RC"},R:{"16":"SC"},S:{"2":"jB"}},B:7,C:":focus-within CSS pseudo-class"};

  var cssFontRenderingControls={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB","194":"0 1 2 3 4 5 6 7 8 9 AB BB"},D:{"1":"EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","66":"3 4 5 6 7 8 9 AB BB CB DB"},E:{"1":"C N D T Q mB nB","2":"G Y O F H E A B dB WB fB gB hB iB XB"},F:{"1":"1 2 3 4 5 6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p oB pB qB rB T ZB tB Q","66":"0 q r s t u v w x y z"},G:{"1":"D 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"NC OC XB PC QC","2":"G","66":"KC LC MC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"194":"jB"}},B:5,C:"CSS font-rendering controls"};

  var cssFontStretch={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H kB sB"},D:{"1":"2 3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},E:{"1":"B C N D T Q mB nB","2":"G Y O F H E A dB WB fB gB hB iB XB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"CSS font-stretch"};

  var cssGencontent={A:{A:{"1":"E A B","2":"O F lB","132":"H"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"1":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:2,C:"CSS Generated content for pseudo-elements"};

  var cssGradients={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB","260":"J K L Z a b c d e f g h i j k l m n o p","292":"G Y O F H E A B C N D I sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","33":"A B C N D I J K L Z a b c d e f","548":"G Y O F H E"},E:{"2":"dB WB","260":"F H E A B C N D gB hB iB XB T Q mB nB","292":"O fB","804":"G Y"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V Q","2":"E B oB pB qB rB","33":"C tB","164":"T ZB"},G:{"260":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","292":"TC xB","804":"WB uB aB"},H:{"2":"CC"},I:{"1":"M HC IC","33":"G GC aB","548":"bB DC EC FC"},J:{"1":"A","548":"F"},K:{"1":"DB Q","2":"A B","33":"C","164":"T ZB"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"CSS Gradients"};

  var cssGrid={A:{A:{"2":"O F H lB","8":"E","292":"A B"},B:{"1":"J K L KB P M R S YB U","292":"C N D I"},C:{"1":"8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L kB sB","8":"Z a b c d e f g h i j k l m n o p q r s t","584":"0 1 2 3 4 5 u v w x y z","1025":"6 7"},D:{"1":"CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e","8":"f g h i","200":"0 1 2 3 4 5 6 7 8 9 j k l m n o p q r s t u v w x y z AB","1025":"BB"},E:{"1":"B C N D XB T Q mB nB","2":"G Y dB WB fB","8":"O F H E A gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h oB pB qB rB T ZB tB Q","200":"i j k l m n o p q r s t u v w x"},G:{"1":"D 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC","8":"H xB yB zB 0B 1B 2B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC","8":"aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"292":"A B"},O:{"1":"JC"},P:{"1":"LC MC NC OC XB PC QC","2":"KC","8":"G"},Q:{"1":"RC"},R:{"2":"SC"},S:{"1":"jB"}},B:4,C:"CSS Grid Layout (level 1)"};

  var cssHangingPunctuation={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"A B C N D XB T Q mB nB","2":"G Y O F H E dB WB fB gB hB iB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"D 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"CSS hanging-punctuation"};

  var cssHas={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:":has() CSS relational pseudo-class"};

  var cssHyphenate={A:{A:{"16":"O F H E A B lB"},B:{"1":"KB P M R S YB U","16":"C N D I J K L"},C:{"16":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","16":"0 1 2 3 4 5 6 7 8 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},E:{"16":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"16":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"16":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"16":"CC"},I:{"16":"bB G M DC EC FC GC aB HC IC"},J:{"16":"F A"},K:{"16":"A B C DB T ZB Q"},L:{"16":"U"},M:{"16":"OB"},N:{"16":"A B"},O:{"16":"JC"},P:{"16":"G KC LC MC NC OC XB PC QC"},Q:{"16":"RC"},R:{"16":"SC"},S:{"16":"jB"}},B:5,C:"CSS4 Hyphenation"};

  var cssHyphens={A:{A:{"2":"O F H E lB","33":"A B"},B:{"33":"C N D I J K L","132":"KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y kB sB","33":"O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w"},D:{"1":"wB cB","2":"0 1 2 3 4 5 6 7 8 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","132":"9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB"},E:{"2":"G Y dB WB","33":"O F H E A B C N D fB gB hB iB XB T Q mB nB"},F:{"2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v oB pB qB rB T ZB tB Q","132":"0 1 2 3 4 5 6 7 8 9 w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"2":"WB uB","33":"H D aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"4":"JC"},P:{"1":"LC MC NC OC XB PC QC","2":"G","132":"KC"},Q:{"2":"RC"},R:{"132":"SC"},S:{"1":"jB"}},B:5,C:"CSS Hyphenation"};

  var cssImageOrientation={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P","257":"M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P","257":"M R S YB U vB wB cB"},E:{"1":"D mB nB","2":"G Y O F H E A B C N dB WB fB gB hB iB XB T Q"},F:{"1":"MB NB FB W V","2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB oB pB qB rB T ZB tB Q"},G:{"1":"D","132":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"1":"jB"}},B:4,C:"CSS3 image-orientation"};

  var cssImageSet={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L","33":"KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"G Y O F H E A B C N D I J K L Z a","33":"0 1 2 3 4 5 6 7 8 9 b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y dB WB fB","33":"O F H E gB hB iB","129":"A B C N D XB T Q mB nB"},F:{"2":"E B C oB pB qB rB T ZB tB Q","33":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"2":"WB uB aB TC","33":"H xB yB zB 0B 1B","129":"D 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G DC EC FC GC aB","33":"M HC IC"},J:{"2":"F","33":"A"},K:{"2":"A B C T ZB Q","33":"DB"},L:{"33":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"33":"JC"},P:{"33":"G KC LC MC NC OC XB PC QC"},Q:{"33":"RC"},R:{"33":"SC"},S:{"2":"jB"}},B:5,C:"CSS image-set"};

  var cssInOutOfRange={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C","260":"N D I J K L"},C:{"1":"4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i kB sB","516":"0 1 2 3 j k l m n o p q r s t u v w x y z"},D:{"1":"7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G","16":"Y O F H E A B C N D","260":"6","772":"0 1 2 3 4 5 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},E:{"1":"B C N D XB T Q mB nB","2":"G dB WB","16":"Y","772":"O F H E A fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","16":"E oB","260":"B C t pB qB rB T ZB tB Q","772":"I J K L Z a b c d e f g h i j k l m n o p q r s"},G:{"1":"D 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB","772":"H TC xB yB zB 0B 1B 2B"},H:{"132":"CC"},I:{"1":"M","2":"bB DC EC FC","260":"G GC aB HC IC"},J:{"2":"F","260":"A"},K:{"1":"DB","260":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","260":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"516":"jB"}},B:5,C:":in-range and :out-of-range CSS pseudo-classes"};

  var cssIndeterminatePseudo={A:{A:{"2":"O F H lB","132":"A B","388":"E"},B:{"1":"KB P M R S YB U","132":"C N D I J K L"},C:{"1":"5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","16":"eB bB kB sB","132":"0 1 2 3 4 O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","388":"G Y"},D:{"1":"0 1 2 3 4 5 6 7 8 9 t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","16":"G Y O F H E A B C N D","132":"I J K L Z a b c d e f g h i j k l m n o p q r s"},E:{"1":"B C N D XB T Q mB nB","16":"G Y O dB WB","132":"F H E A gB hB iB","388":"fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","16":"E B oB pB qB rB T ZB","132":"I J K L Z a b c d e f","516":"C tB Q"},G:{"1":"D 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB uB aB TC xB","132":"H yB zB 0B 1B 2B"},H:{"516":"CC"},I:{"1":"M","16":"bB DC EC FC IC","132":"HC","388":"G GC aB"},J:{"16":"F","132":"A"},K:{"1":"DB","16":"A B C T ZB","516":"Q"},L:{"1":"U"},M:{"1":"OB"},N:{"132":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"132":"jB"}},B:7,C:":indeterminate CSS pseudo-class"};

  var cssInitialLetter={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H dB WB fB gB hB","4":"E","164":"A B C N D iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H WB uB aB TC xB yB zB","164":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"CSS Initial Letter"};

  var cssInitialValue={A:{A:{"2":"O F H E A B lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","33":"G Y O F H E A B C N D I J K L kB sB","164":"eB bB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D WB fB gB hB iB XB T Q mB nB","16":"dB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"1":"H D uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB"},H:{"2":"CC"},I:{"1":"bB G M FC GC aB HC IC","16":"DC EC"},J:{"1":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"CSS initial value"};

  var cssLetterSpacing={A:{A:{"1":"E A B","16":"lB","132":"O F H"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","132":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j"},E:{"1":"F H E A B C N D gB hB iB XB T Q mB nB","16":"dB","132":"G Y O WB fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","16":"E oB","132":"B C I J pB qB rB T ZB tB Q"},G:{"1":"H D uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB"},H:{"2":"CC"},I:{"1":"M HC IC","16":"DC EC","132":"bB G FC GC aB"},J:{"132":"F A"},K:{"1":"DB","132":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:2,C:"letter-spacing CSS property"};

  var cssLineClamp={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J","33":"KB P M R S YB U","129":"K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB kB sB","33":"MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"16":"G Y O F H E A B C N","33":"0 1 2 3 4 5 6 7 8 9 D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G dB WB","33":"Y O F H E A B C N D fB gB hB iB XB T Q mB nB"},F:{"2":"E B C oB pB qB rB T ZB tB Q","33":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"2":"WB uB aB","33":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"16":"DC EC","33":"bB G M FC GC aB HC IC"},J:{"33":"F A"},K:{"2":"A B C T ZB Q","33":"DB"},L:{"33":"U"},M:{"33":"OB"},N:{"2":"A B"},O:{"33":"JC"},P:{"33":"G KC LC MC NC OC XB PC QC"},Q:{"33":"RC"},R:{"33":"SC"},S:{"2":"jB"}},B:7,C:"CSS line-clamp"};

  var cssLogicalProps={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L","3588":"KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB","164":"bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u kB sB"},D:{"292":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB","2052":"vB wB cB","3588":"NB FB W V VB QB RB SB TB UB KB P M R S YB U"},E:{"292":"G Y O F H E A B C dB WB fB gB hB iB XB T","2052":"nB","3588":"N D Q mB"},F:{"2":"E B C oB pB qB rB T ZB tB Q","292":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","3588":"AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"292":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B","3588":"D 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"292":"bB G DC EC FC GC aB HC IC","3588":"M"},J:{"292":"F A"},K:{"2":"A B C T ZB Q","3588":"DB"},L:{"3588":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"292":"JC"},P:{"292":"G KC LC MC NC OC","3588":"XB PC QC"},Q:{"3588":"RC"},R:{"3588":"SC"},S:{"3588":"jB"}},B:5,C:"CSS Logical Properties"};

  var cssMarkerPseudo={A:{A:{"2":"O F H E A B lB"},B:{"1":"U","2":"C N D I J K L KB P M R S YB"},C:{"1":"MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB kB sB"},D:{"1":"U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB"},E:{"2":"G Y O F H E A B dB WB fB gB hB iB XB","129":"C N D T Q mB nB"},F:{"1":"V","2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W oB pB qB rB T ZB tB Q"},G:{"1":"D 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"CSS ::marker pseudo-element"};

  var cssMasks={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J","164":"KB P M R S YB U","3138":"K","12292":"L"},C:{"1":"7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB","260":"0 1 2 3 4 5 6 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB"},D:{"164":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"dB WB","164":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB"},F:{"2":"E B C oB pB qB rB T ZB tB Q","164":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"164":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"164":"M HC IC","676":"bB G DC EC FC GC aB"},J:{"164":"F A"},K:{"2":"A B C T ZB Q","164":"DB"},L:{"164":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"164":"JC"},P:{"164":"G KC LC MC NC OC XB PC QC"},Q:{"164":"RC"},R:{"164":"SC"},S:{"260":"jB"}},B:4,C:"CSS Masks"};

  var cssMatchesPseudo={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L","8388":"KB P M R S YB U"},C:{"16":"eB bB kB sB","548":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB","4097":"UB KB P M OB R S"},D:{"16":"G Y O F H E A B C N D","164":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB","196":"JB X LB","8388":"MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G dB WB","16":"Y","164":"O F H fB gB hB","260":"E A B C N iB XB T Q mB","3073":"D nB"},F:{"2":"E B C oB pB qB rB T ZB tB Q","164":"0 1 2 3 4 5 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","196":"6 7 8","8388":"9 AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"16":"WB uB aB TC xB","164":"H yB zB","260":"0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","3073":"D"},H:{"2":"CC"},I:{"16":"bB DC EC FC","164":"G M GC aB HC IC"},J:{"16":"F","164":"A"},K:{"2":"A B C T ZB Q","164":"DB"},L:{"8388":"U"},M:{"4097":"OB"},N:{"2":"A B"},O:{"164":"JC"},P:{"164":"G KC LC MC NC OC XB PC QC"},Q:{"8388":"RC"},R:{"164":"SC"},S:{"548":"jB"}},B:5,C:":is() CSS pseudo-class"};

  var cssMathFunctions={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB kB sB"},D:{"1":"KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB"},E:{"1":"D mB nB","2":"G Y O F H E A B dB WB fB gB hB iB XB","132":"C N T Q"},F:{"1":"X LB MB NB FB W V","2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB oB pB qB rB T ZB tB Q"},G:{"1":"D BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B","132":"5B 6B 7B 8B 9B AC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"QC","2":"G KC LC MC NC OC XB PC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"CSS math functions min(), max() and clamp()"};

  var cssMediaInteraction={A:{A:{"2":"O F H E A B lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u"},E:{"1":"E A B C N D iB XB T Q mB nB","2":"G Y O F H dB WB fB gB hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h oB pB qB rB T ZB tB Q"},G:{"1":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:5,C:"Media Queries: interaction media features"};

  var cssMediaResolution={A:{A:{"2":"O F H lB","132":"E A B"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB","260":"G Y O F H E A B C N D I kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","548":"G Y O F H E A B C N D I J K L Z a b c d e f g h i"},E:{"2":"dB WB","548":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V Q","2":"E","548":"B C oB pB qB rB T ZB tB"},G:{"16":"WB","548":"H D uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"132":"CC"},I:{"1":"M HC IC","16":"DC EC","548":"bB G FC GC aB"},J:{"548":"F A"},K:{"1":"DB Q","548":"A B C T ZB"},L:{"1":"U"},M:{"1":"OB"},N:{"132":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:2,C:"Media Queries: resolution feature"};

  var cssMediaScripting={A:{A:{"2":"O F H E A B lB"},B:{"16":"C N D I J K L KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB","16":"6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U","16":"vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"Media Queries: scripting media feature"};

  var cssMediaqueries={A:{A:{"8":"O F H lB","129":"E A B"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","2":"eB bB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","129":"G Y O F H E A B C N D I J K L Z a b c d e f"},E:{"1":"F H E A B C N D gB hB iB XB T Q mB nB","129":"G Y O fB","388":"dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q","2":"E"},G:{"1":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","129":"WB uB aB TC xB"},H:{"1":"CC"},I:{"1":"M HC IC","129":"bB G DC EC FC GC aB"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"129":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:2,C:"CSS3 Media Queries"};

  var cssMixblendmode={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i","194":"j k l m n o p q r s t u"},E:{"2":"G Y O F dB WB fB gB","260":"H E A B C N D hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i oB pB qB rB T ZB tB Q"},G:{"2":"WB uB aB TC xB yB","260":"H D zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"Blending of HTML/SVG elements"};

  var cssMotionPaths={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w","194":"x y z"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j oB pB qB rB T ZB tB Q","194":"k l m"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:5,C:"CSS Motion Path"};

  var cssNamespaces={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB","16":"dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"H D aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB uB"},H:{"1":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:2,C:"CSS namespaces"};

  var cssNotSelList={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L P M R S YB U","16":"KB"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB kB sB","16":"R S"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U","16":"vB wB cB"},E:{"1":"E A B C N D iB XB T Q mB nB","2":"G Y O F H dB WB fB gB hB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"selector list argument of :not()"};

  var cssNthChildOf={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"E A B C N D iB XB T Q mB nB","2":"G Y O F H dB WB fB gB hB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:7,C:"selector list argument of :nth-child and :nth-last-child CSS pseudo-classes"};

  var cssOpacity={A:{A:{"1":"E A B","4":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"1":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:2,C:"CSS3 Opacity"};

  var cssOptionalPseudo={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","16":"G Y O F H E A B C N D"},E:{"1":"Y O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"G dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","16":"E oB","132":"B C pB qB rB T ZB tB Q"},G:{"1":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB"},H:{"132":"CC"},I:{"1":"bB G M FC GC aB HC IC","16":"DC EC"},J:{"1":"F A"},K:{"1":"DB","132":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:7,C:":optional CSS pseudo-class"};

  var cssOverflowAnchor={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB kB sB"},D:{"1":"AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"2":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:5,C:"CSS overflow-anchor (Scroll Anchoring)"};

  var cssOverflow={A:{A:{"388":"O F H E A B lB"},B:{"260":"KB P M R S YB U","388":"C N D I J K L"},C:{"260":"PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","388":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB kB sB"},D:{"260":"MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","388":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB"},E:{"260":"D mB nB","388":"G Y O F H E A B C N dB WB fB gB hB iB XB T Q"},F:{"260":"9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","388":"0 1 2 3 4 5 6 7 8 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q"},G:{"260":"D BC","388":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC"},H:{"388":"CC"},I:{"388":"bB G M DC EC FC GC aB HC IC"},J:{"388":"F A"},K:{"388":"A B C DB T ZB Q"},L:{"260":"U"},M:{"260":"OB"},N:{"388":"A B"},O:{"388":"JC"},P:{"388":"G KC LC MC NC OC XB PC QC"},Q:{"388":"RC"},R:{"388":"SC"},S:{"388":"jB"}},B:5,C:"CSS overflow property"};

  var cssOverscrollBehavior={A:{A:{"2":"O F H E lB","132":"A B"},B:{"1":"KB P M R S YB U","132":"C N D I J K","516":"L"},C:{"1":"DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB kB sB"},D:{"1":"JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB","260":"HB IB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"0 1 2 3 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q","260":"4 5"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"2":"OB"},N:{"132":"A B"},O:{"2":"JC"},P:{"1":"NC OC XB PC QC","2":"G KC LC MC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:7,C:"CSS overscroll-behavior"};

  var cssPageBreak={A:{A:{"388":"A B","900":"O F H E lB"},B:{"388":"C N D I J K L","900":"KB P M R S YB U"},C:{"772":"JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","900":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB kB sB"},D:{"900":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"772":"A","900":"G Y O F H E B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"16":"E oB","129":"B C pB qB rB T ZB tB Q","900":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"900":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"129":"CC"},I:{"900":"bB G M DC EC FC GC aB HC IC"},J:{"900":"F A"},K:{"129":"A B C T ZB Q","900":"DB"},L:{"900":"U"},M:{"900":"OB"},N:{"388":"A B"},O:{"900":"JC"},P:{"900":"G KC LC MC NC OC XB PC QC"},Q:{"900":"RC"},R:{"900":"SC"},S:{"900":"jB"}},B:2,C:"CSS page-break properties"};

  var cssPagedMedia={A:{A:{"2":"O F lB","132":"H E A B"},B:{"1":"KB P M R S YB U","132":"C N D I J K L"},C:{"2":"eB bB G Y O F H E A B C N D I J K L kB sB","132":"0 1 2 3 4 5 6 7 8 9 Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","16":"G Y O F H E A B C N D"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","132":"E B C oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"16":"CC"},I:{"16":"bB G M DC EC FC GC aB HC IC"},J:{"16":"F A"},K:{"16":"A B C T ZB Q","258":"DB"},L:{"1":"U"},M:{"132":"OB"},N:{"258":"A B"},O:{"258":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"132":"jB"}},B:5,C:"CSS Paged Media (@page)"};

  var cssPaintApi={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB"},E:{"2":"G Y O F H E A B C dB WB fB gB hB iB XB T","194":"N D Q mB nB"},F:{"1":"6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"0 1 2 3 4 5 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"CSS Paint API"};

  var cssPlaceholderShown={A:{A:{"2":"O F H E lB","292":"A B"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB","164":"0 1 2 3 4 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},D:{"1":"1 2 3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},E:{"1":"E A B C N D iB XB T Q mB nB","2":"G Y O F H dB WB fB gB hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n oB pB qB rB T ZB tB Q"},G:{"1":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"164":"jB"}},B:5,C:":placeholder-shown CSS pseudo-class"};

  var cssPlaceholder={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","36":"C N D I J K L"},C:{"1":"5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L kB sB","33":"0 1 2 3 4 Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},D:{"1":"BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","36":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB"},E:{"1":"B C N D XB T Q mB nB","2":"G dB WB","36":"Y O F H E A fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q","36":"I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x"},G:{"1":"D 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB","36":"H aB TC xB yB zB 0B 1B 2B"},H:{"2":"CC"},I:{"1":"M","36":"bB G DC EC FC GC aB HC IC"},J:{"36":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"36":"A B"},O:{"1":"JC"},P:{"1":"MC NC OC XB PC QC","36":"G KC LC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"33":"jB"}},B:5,C:"::placeholder CSS pseudo-element"};

  var cssReadOnlyWrite={A:{A:{"2":"O F H E A B lB"},B:{"1":"N D I J K L KB P M R S YB U","2":"C"},C:{"1":"UB KB P M OB R S","16":"eB","33":"0 1 2 3 4 5 6 7 8 9 bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","16":"G Y O F H E A B C N D","132":"I J K L Z a b c d e f g h i j k l m n o p"},E:{"1":"E A B C N D iB XB T Q mB nB","16":"dB WB","132":"G Y O F H fB gB hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","16":"E B oB pB qB rB T","132":"C I J K L Z a b c ZB tB Q"},G:{"1":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB uB","132":"H aB TC xB yB zB"},H:{"2":"CC"},I:{"1":"M","16":"DC EC","132":"bB G FC GC aB HC IC"},J:{"1":"A","132":"F"},K:{"1":"DB","2":"A B T","132":"C ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"33":"jB"}},B:1,C:"CSS :read-only and :read-write selectors"};

  var cssRebeccapurple={A:{A:{"2":"O F H E A lB","132":"B"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r"},E:{"1":"F H E A B C N D hB iB XB T Q mB nB","2":"G Y O dB WB fB","16":"gB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e oB pB qB rB T ZB tB Q"},G:{"1":"H D zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC xB yB"},H:{"2":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:5,C:"Rebeccapurple color"};

  var cssReflections={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L","33":"KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"33":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"dB WB","33":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB"},F:{"2":"E B C oB pB qB rB T ZB tB Q","33":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"33":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"33":"bB G M DC EC FC GC aB HC IC"},J:{"33":"F A"},K:{"2":"A B C T ZB Q","33":"DB"},L:{"33":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"33":"G KC LC MC NC OC XB PC QC"},Q:{"33":"RC"},R:{"33":"SC"},S:{"2":"jB"}},B:7,C:"CSS Reflections"};

  var cssRegions={A:{A:{"2":"O F H E lB","420":"A B"},B:{"2":"KB P M R S YB U","420":"C N D I J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","36":"I J K L","66":"Z a b c d e f g h i j k l m n o"},E:{"2":"G Y O C N D dB WB fB T Q mB nB","33":"F H E A B gB hB iB XB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"D WB uB aB TC xB 5B 6B 7B 8B 9B AC BC","33":"H yB zB 0B 1B 2B 3B 4B"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"420":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"CSS Regions"};

  var cssRepeatingGradients={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB","33":"G Y O F H E A B C N D I sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E","33":"A B C N D I J K L Z a b c d e f"},E:{"1":"F H E A B C N D gB hB iB XB T Q mB nB","2":"G Y dB WB","33":"O fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V Q","2":"E B oB pB qB rB","33":"C tB","36":"T ZB"},G:{"1":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB","33":"TC xB"},H:{"2":"CC"},I:{"1":"M HC IC","2":"bB DC EC FC","33":"G GC aB"},J:{"1":"A","2":"F"},K:{"1":"DB Q","2":"A B","33":"C","36":"T ZB"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"CSS Repeating Gradients"};

  var cssResize={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB","33":"G"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB","132":"Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:4,C:"CSS resize property"};

  var cssRevertValue={A:{A:{"2":"O F H E A B lB"},B:{"1":"S YB U","2":"C N D I J K L KB P M R"},C:{"1":"LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X kB sB"},D:{"1":"S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R"},E:{"1":"A B C N D iB XB T Q mB nB","2":"G Y O F H E dB WB fB gB hB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"D 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"CSS revert value"};

  var cssRrggbbaa={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB"},D:{"1":"GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","194":"6 7 8 9 AB BB CB DB EB PB"},E:{"1":"A B C N D XB T Q mB nB","2":"G Y O F H E dB WB fB gB hB iB"},F:{"1":"6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s oB pB qB rB T ZB tB Q","194":"0 1 2 3 4 5 t u v w x y z"},G:{"1":"D 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"NC OC XB PC QC","2":"G","194":"KC LC MC"},Q:{"2":"RC"},R:{"194":"SC"},S:{"2":"jB"}},B:7,C:"#rrggbbaa hex color notation"};

  var cssScrollBehavior={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L","129":"KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p kB sB"},D:{"2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u","129":"PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","450":"0 1 2 3 4 5 6 7 8 9 v w x y z AB BB CB DB EB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"E B C I J K L Z a b c d e f g h oB pB qB rB T ZB tB Q","129":"2 3 4 5 6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","450":"0 1 i j k l m n o p q r s t u v w x y z"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"129":"JC"},P:{"1":"NC OC XB PC QC","2":"G KC LC MC"},Q:{"129":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"CSSOM Scroll-behavior"};

  var cssScrollbar={A:{A:{"132":"O F H E A B lB"},B:{"2":"C N D I J K L","292":"KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB kB sB","3074":"HB","4100":"IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"292":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"16":"G Y dB WB","292":"O F H E A B C N D fB gB hB iB XB T Q mB nB"},F:{"2":"E B C oB pB qB rB T ZB tB Q","292":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"16":"WB uB aB TC xB","292":"yB","804":"H D zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"16":"DC EC","292":"bB G M FC GC aB HC IC"},J:{"292":"F A"},K:{"2":"A B C T ZB Q","292":"DB"},L:{"292":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"292":"JC"},P:{"292":"G KC LC MC NC OC XB PC QC"},Q:{"292":"RC"},R:{"292":"SC"},S:{"2":"jB"}},B:7,C:"CSS scrollbar styling"};

  var cssSel2={A:{A:{"1":"F H E A B","2":"lB","8":"O"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"1":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:2,C:"CSS 2.1 selectors"};

  var cssSel3={A:{A:{"1":"E A B","2":"lB","8":"O","132":"F H"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","2":"eB bB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D WB fB gB hB iB XB T Q mB nB","2":"dB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q","2":"E"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"1":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:2,C:"CSS3 selectors"};

  var cssSelection={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","33":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q","2":"E"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"1":"A","2":"F"},K:{"1":"C DB ZB Q","16":"A B T"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"33":"jB"}},B:5,C:"::selection CSS pseudo-element"};

  var cssShapes={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB","322":"5 6 7 8 9 AB BB CB DB EB PB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n","194":"o p q"},E:{"1":"B C N D XB T Q mB nB","2":"G Y O F dB WB fB gB","33":"H E A hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d oB pB qB rB T ZB tB Q"},G:{"1":"D 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC xB yB","33":"H zB 0B 1B 2B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:4,C:"CSS Shapes Level 1"};

  var cssSnappoints={A:{A:{"2":"O F H E lB","6308":"A","6436":"B"},B:{"1":"KB P M R S YB U","6436":"C N D I J K L"},C:{"1":"MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s kB sB","2052":"0 1 2 3 4 5 6 7 8 9 t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB"},D:{"1":"NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB","8258":"X LB MB"},E:{"1":"B C N D T Q mB nB","2":"G Y O F H dB WB fB gB hB","3108":"E A iB XB"},F:{"1":"IB JB X LB MB NB FB W V","2":"0 1 2 3 4 5 6 7 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q","8258":"8 9 AB BB CB EB GB HB"},G:{"1":"D 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB","3108":"0B 1B 2B 3B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"XB PC QC","2":"G KC LC MC NC OC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2052":"jB"}},B:4,C:"CSS Scroll Snap"};

  var cssSticky={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I","1028":"KB P M R S YB U","4100":"J K L"},C:{"1":"DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f kB sB","194":"g h i j k l","516":"0 1 2 3 4 5 6 7 8 9 m n o p q r s t u v w x y z AB BB CB"},D:{"2":"0 1 2 3 4 5 G Y O F H E A B C N D I J K L Z a b c r s t u v w x y z","322":"6 7 8 9 d e f g h i j k l m n o p q","1028":"AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"N D mB nB","2":"G Y O dB WB fB","33":"H E A B C hB iB XB T Q","2084":"F gB"},F:{"2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s oB pB qB rB T ZB tB Q","322":"t u v","1028":"0 1 2 3 4 5 6 7 8 9 w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"1":"D 8B 9B AC BC","2":"WB uB aB TC","33":"H zB 0B 1B 2B 3B 4B 5B 6B 7B","2084":"xB yB"},H:{"2":"CC"},I:{"2":"bB G DC EC FC GC aB HC IC","1028":"M"},J:{"2":"F A"},K:{"2":"A B C T ZB Q","1028":"DB"},L:{"1028":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1028":"JC"},P:{"1":"LC MC NC OC XB PC QC","2":"G KC"},Q:{"1028":"RC"},R:{"2":"SC"},S:{"516":"jB"}},B:5,C:"CSS position:sticky"};

  var cssSubgrid={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"1":"W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"CSS Subgrid"};

  var cssSupportsApi={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","260":"C N D I J K L"},C:{"1":"9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z kB sB","66":"a b","260":"0 1 2 3 4 5 6 7 8 c d e f g h i j k l m n o p q r s t u v w x y z"},D:{"1":"PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h","260":"0 1 2 3 4 5 6 7 8 9 i j k l m n o p q r s t u v w x y z AB BB CB DB EB"},E:{"1":"E A B C N D iB XB T Q mB nB","2":"G Y O F H dB WB fB gB hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB","132":"Q"},G:{"1":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB"},H:{"132":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB","132":"Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"CSS.supports() API"};

  var cssTable={A:{A:{"1":"H E A B","2":"O F lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","132":"eB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"1":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:2,C:"CSS Table display"};

  var cssTextAlignLast={A:{A:{"132":"O F H E A B lB"},B:{"1":"KB P M R S YB U","4":"C N D I J K L"},C:{"1":"3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B kB sB","33":"0 1 2 C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},D:{"1":"1 2 3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o","322":"0 p q r s t u v w x y z"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b oB pB qB rB T ZB tB Q","578":"c d e f g h i j k l m n"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"132":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"2":"RC"},R:{"1":"SC"},S:{"33":"jB"}},B:5,C:"CSS3 text-align-last"};

  var cssTextIndent={A:{A:{"132":"O F H E A B lB"},B:{"132":"C N D I J K L","388":"KB P M R S YB U"},C:{"132":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"132":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r","388":"0 1 2 3 4 5 6 7 8 9 s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"132":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"132":"E B C I J K L Z a b c d e oB pB qB rB T ZB tB Q","388":"0 1 2 3 4 5 6 7 8 9 f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"132":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"132":"CC"},I:{"132":"bB G M DC EC FC GC aB HC IC"},J:{"132":"F A"},K:{"132":"A B C T ZB Q","388":"DB"},L:{"388":"U"},M:{"132":"OB"},N:{"132":"A B"},O:{"132":"JC"},P:{"132":"G","388":"KC LC MC NC OC XB PC QC"},Q:{"388":"RC"},R:{"388":"SC"},S:{"132":"jB"}},B:5,C:"CSS text-indent"};

  var cssTextJustify={A:{A:{"16":"O F lB","132":"H E A B"},B:{"132":"C N D I J K L","322":"KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB","1025":"9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","1602":"8"},D:{"2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w","322":"0 1 2 3 4 5 6 7 8 9 x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"E B C I J K L Z a b c d e f g h i j oB pB qB rB T ZB tB Q","322":"0 1 2 3 4 5 6 7 8 9 k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G DC EC FC GC aB HC IC","322":"M"},J:{"2":"F A"},K:{"2":"A B C T ZB Q","322":"DB"},L:{"322":"U"},M:{"1025":"OB"},N:{"132":"A B"},O:{"2":"JC"},P:{"2":"G","322":"KC LC MC NC OC XB PC QC"},Q:{"322":"RC"},R:{"322":"SC"},S:{"2":"jB"}},B:5,C:"CSS text-justify"};

  var cssTextOrientation={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r kB sB","194":"s t u"},D:{"1":"2 3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},E:{"2":"G Y O F H E dB WB fB gB hB iB","16":"A","33":"B C N D XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o oB pB qB rB T ZB tB Q"},G:{"1":"D 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"CSS text-orientation"};

  var cssTextSpacing={A:{A:{"2":"O F lB","161":"H E A B"},B:{"2":"KB P M R S YB U","161":"C N D I J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"16":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"CSS Text 4 text-spacing"};

  var cssTextshadow={A:{A:{"2":"O F H E lB","129":"A B"},B:{"1":"KB P M R S YB U","129":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","2":"eB bB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB","260":"dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q","2":"E"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"4":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"A","4":"F"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"129":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"CSS3 Text-shadow"};

  var cssTouchAction2={A:{A:{"2":"O F H E lB","132":"B","164":"A"},B:{"1":"KB P M R S YB U","132":"C N D I J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","260":"9"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v oB pB qB rB T ZB tB Q","260":"w"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"2":"OB"},N:{"132":"B","164":"A"},O:{"2":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","16":"G"},Q:{"2":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:5,C:"CSS touch-action level 2 values"};

  var cssTouchAction={A:{A:{"1":"B","2":"O F H E lB","289":"A"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i kB sB","194":"0 1 2 3 4 5 j k l m n o p q r s t u v w x y z","1025":"6 7 8 9 AB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c oB pB qB rB T ZB tB Q"},G:{"1":"D 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B","516":"1B 2B 3B 4B 5B 6B 7B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"B","289":"A"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"194":"jB"}},B:2,C:"CSS touch-action property"};

  var cssTransitions={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB","33":"Y O F H E A B C N D I","164":"G"},D:{"1":"0 1 2 3 4 5 6 7 8 9 g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","33":"G Y O F H E A B C N D I J K L Z a b c d e f"},E:{"1":"F H E A B C N D gB hB iB XB T Q mB nB","33":"O fB","164":"G Y dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V Q","2":"E oB pB","33":"C","164":"B qB rB T ZB tB"},G:{"1":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","33":"xB","164":"WB uB aB TC"},H:{"2":"CC"},I:{"1":"M HC IC","33":"bB G DC EC FC GC aB"},J:{"1":"A","33":"F"},K:{"1":"DB Q","33":"C","164":"A B T ZB"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:5,C:"CSS3 Transitions"};

  var cssUnicodeBidi={A:{A:{"132":"O F H E A B lB"},B:{"1":"KB P M R S YB U","132":"C N D I J K L"},C:{"1":"4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","33":"0 1 2 3 K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","132":"eB bB G Y O F H E kB sB","292":"A B C N D I J"},D:{"1":"2 3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","132":"G Y O F H E A B C N D I J","548":"0 1 K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},E:{"132":"G Y O F H dB WB fB gB hB","548":"E A B C N D iB XB T Q mB nB"},F:{"132":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"132":"H WB uB aB TC xB yB zB","548":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"16":"CC"},I:{"1":"M","16":"bB G DC EC FC GC aB HC IC"},J:{"16":"F A"},K:{"16":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"132":"A B"},O:{"16":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","16":"G"},Q:{"16":"RC"},R:{"16":"SC"},S:{"33":"jB"}},B:4,C:"CSS unicode-bidi property"};

  var cssUnsetValue={A:{A:{"2":"O F H E A B lB"},B:{"1":"N D I J K L KB P M R S YB U","2":"C"},C:{"1":"0 1 2 3 4 5 6 7 8 9 h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u"},E:{"1":"A B C N D iB XB T Q mB nB","2":"G Y O F H E dB WB fB gB hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h oB pB qB rB T ZB tB Q"},G:{"1":"D 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"CSS unset value"};

  var cssVariables={A:{A:{"2":"O F H E A B lB"},B:{"1":"J K L KB P M R S YB U","2":"C N D","260":"I"},C:{"1":"0 1 2 3 4 5 6 7 8 9 l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k kB sB"},D:{"1":"3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","194":"2"},E:{"1":"A B C N D iB XB T Q mB nB","2":"G Y O F H E dB WB fB gB hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o oB pB qB rB T ZB tB Q","194":"p"},G:{"1":"D 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"2":"RC"},R:{"2":"SC"},S:{"1":"jB"}},B:4,C:"CSS Variables (Custom Properties)"};

  var cssWidowsOrphans={A:{A:{"1":"A B","2":"O F lB","129":"H E"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e"},E:{"1":"F H E A B C N D hB iB XB T Q mB nB","2":"G Y O dB WB fB gB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V Q","129":"E B oB pB qB rB T ZB tB"},G:{"1":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC xB"},H:{"1":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"2":"F A"},K:{"1":"DB Q","2":"A B C T ZB"},L:{"1":"U"},M:{"2":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:2,C:"CSS widows & orphans"};

  var cssWritingMode={A:{A:{"132":"O F H E A B lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p kB sB","322":"q r s t u"},D:{"1":"2 3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O","16":"F","33":"0 1 H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},E:{"1":"B C N D T Q mB nB","2":"G dB WB","16":"Y","33":"O F H E A fB gB hB iB XB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q","33":"I J K L Z a b c d e f g h i j k l m n o"},G:{"1":"D 4B 5B 6B 7B 8B 9B AC BC","16":"WB uB aB","33":"H TC xB yB zB 0B 1B 2B 3B"},H:{"2":"CC"},I:{"1":"M","2":"DC EC FC","33":"bB G GC aB HC IC"},J:{"33":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"36":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","33":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"CSS writing-mode property"};

  var cssZoom={A:{A:{"1":"O F lB","129":"H E A B"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"1":"H D uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB"},H:{"2":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"2":"OB"},N:{"129":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:7,C:"CSS zoom"};

  var css3Attr={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:4,C:"CSS3 attr() function for all properties"};

  var css3Boxsizing={A:{A:{"1":"H E A B","8":"O F lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","33":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","33":"G Y O F H E"},E:{"1":"O F H E A B C N D fB gB hB iB XB T Q mB nB","33":"G Y dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q","2":"E"},G:{"1":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","33":"WB uB aB"},H:{"1":"CC"},I:{"1":"G M GC aB HC IC","33":"bB DC EC FC"},J:{"1":"A","33":"F"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:5,C:"CSS3 Box-sizing"};

  var css3Colors={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","4":"eB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V pB qB rB T ZB tB Q","2":"E","4":"oB"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"1":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:2,C:"CSS3 Colors"};

  var css3CursorsGrab={A:{A:{"2":"O F H E A B lB"},B:{"1":"I J K L KB P M R S YB U","2":"C N D"},C:{"1":"0 1 2 3 4 5 6 7 8 9 h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","33":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g kB sB"},D:{"1":"MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","33":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB"},E:{"1":"B C N D T Q mB nB","33":"G Y O F H E A dB WB fB gB hB iB XB"},F:{"1":"9 C AB BB CB EB GB HB IB JB X LB MB NB FB W V tB Q","2":"E B oB pB qB rB T ZB","33":"0 1 2 3 4 5 6 7 8 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"33":"F A"},K:{"2":"A B C T ZB Q","33":"DB"},L:{"1":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"33":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:3,C:"CSS grab & grabbing cursors"};

  var css3CursorsNewer={A:{A:{"2":"O F H E A B lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","33":"eB bB G Y O F H E A B C N D I J K L Z a b c d kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","33":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q"},E:{"1":"E A B C N D iB XB T Q mB nB","33":"G Y O F H dB WB fB gB hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 C e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V tB Q","2":"E B oB pB qB rB T ZB","33":"I J K L Z a b c d"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"33":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:4,C:"CSS3 Cursors: zoom-in & zoom-out"};

  var css3Cursors={A:{A:{"1":"E A B","132":"O F H lB"},B:{"1":"D I J K L KB P M R S YB U","260":"C N"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","4":"eB bB kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","4":"G"},E:{"1":"Y O F H E A B C N D fB gB hB iB XB T Q mB nB","4":"G dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","260":"E B C oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F","16":"A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:4,C:"CSS3 Cursors (original values)"};

  var css3Tabsize={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"2":"eB bB kB sB","33":"7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","164":"0 1 2 3 4 5 6 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},D:{"1":"0 1 2 3 4 5 6 7 8 9 w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a","132":"b c d e f g h i j k l m n o p q r s t u v"},E:{"1":"D mB nB","2":"G Y O dB WB fB","132":"F H E A B C N gB hB iB XB T Q"},F:{"1":"0 1 2 3 4 5 6 7 8 9 j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E oB pB qB","132":"I J K L Z a b c d e f g h i","164":"B C rB T ZB tB Q"},G:{"1":"D BC","2":"WB uB aB TC xB","132":"H yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC"},H:{"164":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB","132":"HC IC"},J:{"132":"F A"},K:{"1":"DB","2":"A","164":"B C T ZB Q"},L:{"1":"U"},M:{"33":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"164":"jB"}},B:5,C:"CSS3 tab-size"};

  var currentcolor={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q","2":"E"},G:{"1":"H D uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB"},H:{"1":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:2,C:"CSS currentColor value"};

  var customElements={A:{A:{"2":"O F H E lB","8":"A B"},B:{"1":"KB","2":"P M R S YB U","8":"C N D I J K L"},C:{"2":"eB bB G Y O F H E A B C N D I J K L Z a b c DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","66":"d e f g h i j","72":"0 1 2 3 4 5 6 7 8 9 k l m n o p q r s t u v w x y z AB BB CB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g P M R S YB U vB wB cB","66":"h i j k l m"},E:{"2":"G Y dB WB fB","8":"O F H E A B C N D gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X","2":"E B C LB MB NB FB W V oB pB qB rB T ZB tB Q","66":"I J K L Z"},G:{"2":"WB uB aB TC xB","8":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"IC","2":"bB G M DC EC FC GC aB HC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"72":"jB"}},B:7,C:"Custom Elements (deprecated V0 spec)"};

  var customElementsv1={A:{A:{"2":"O F H E lB","8":"A B"},B:{"1":"KB P M R S YB U","8":"C N D I J K L"},C:{"1":"HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j kB sB","8":"0 1 2 3 k l m n o p q r s t u v w x y z","456":"4 5 6 7 8 9 AB BB CB","712":"DB EB PB GB"},D:{"1":"LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","8":"6 7","132":"8 9 AB BB CB DB EB PB GB HB IB JB X"},E:{"2":"G Y O F dB WB fB gB hB","8":"H E A iB","132":"B C N D XB T Q mB nB"},F:{"1":"IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u oB pB qB rB T ZB tB Q","132":"0 1 2 3 4 5 6 7 8 9 v w x y z AB BB CB EB GB HB"},G:{"2":"H WB uB aB TC xB yB zB 0B 1B 2B","132":"D 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"LC MC NC OC XB PC QC","2":"G","132":"KC"},Q:{"132":"RC"},R:{"132":"SC"},S:{"8":"jB"}},B:1,C:"Custom Elements (V1)"};

  var customevent={A:{A:{"2":"O F H lB","132":"E A B"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y kB sB","132":"O F H E A"},D:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G","16":"Y O F H N D","388":"E A B C"},E:{"1":"F H E A B C N D gB hB iB XB T Q mB nB","2":"G dB WB","16":"Y O","388":"fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V tB Q","2":"E oB pB qB rB","132":"B T ZB"},G:{"1":"H D xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"uB","16":"WB aB","388":"TC"},H:{"1":"CC"},I:{"1":"M HC IC","2":"DC EC FC","388":"bB G GC aB"},J:{"1":"A","388":"F"},K:{"1":"C DB Q","2":"A","132":"B T ZB"},L:{"1":"U"},M:{"1":"OB"},N:{"132":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"CustomEvent"};

  var datalist={A:{A:{"2":"lB","8":"O F H E","260":"A B"},B:{"1":"KB P M R S YB U","260":"C N D I","1284":"J K L"},C:{"8":"eB bB kB sB","4612":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"1":"NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","8":"G Y O F H E A B C N D I J K L Z","132":"0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB"},E:{"1":"N D Q mB nB","8":"G Y O F H E A B C dB WB fB gB hB iB XB T"},F:{"1":"E B C IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q","132":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB"},G:{"8":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B","2049":"D 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"IC","8":"bB G DC EC FC GC aB HC","132":"M"},J:{"1":"A","8":"F"},K:{"1":"A B C T ZB Q","8":"DB"},L:{"1":"U"},M:{"516":"OB"},N:{"8":"A B"},O:{"8":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"132":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:1,C:"Datalist element"};

  var dataset={A:{A:{"1":"B","4":"O F H E A lB"},B:{"1":"C N D I J","129":"K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","4":"eB bB G Y kB sB","129":"5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"1":"0 1 2 3 4 5 6 7 8 z","4":"G Y O","129":"9 F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"4":"G Y dB WB","129":"O F H E A B C N D fB gB hB iB XB T Q mB nB"},F:{"1":"C m n o p q r s t u v T ZB tB Q","4":"E B oB pB qB rB","129":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"4":"WB uB aB","129":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"4":"CC"},I:{"4":"DC EC FC","129":"bB G M GC aB HC IC"},J:{"129":"F A"},K:{"1":"C T ZB Q","4":"A B","129":"DB"},L:{"129":"U"},M:{"129":"OB"},N:{"1":"B","4":"A"},O:{"129":"JC"},P:{"129":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"129":"SC"},S:{"1":"jB"}},B:1,C:"dataset & data-* attributes"};

  var datauri={A:{A:{"2":"O F lB","132":"H","260":"E A B"},B:{"1":"KB P M R S YB U","260":"C N I J K L","772":"D"},C:{"1":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"1":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"260":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:6,C:"Data URIs"};

  var dateTolocaledatestring={A:{A:{"16":"lB","132":"O F H E A B"},B:{"1":"L KB P M R S YB U","132":"C N D I J K"},C:{"1":"AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","132":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i kB sB","260":"6 7 8 9","772":"0 1 2 3 4 5 j k l m n o p q r s t u v w x y z"},D:{"1":"FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","132":"G Y O F H E A B C N D I J K L Z a b c d","260":"0 1 2 3 4 5 6 7 8 9 s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB","772":"e f g h i j k l m n o p q r"},E:{"1":"C N D Q mB nB","16":"G Y dB WB","132":"O F H E A fB gB hB iB","260":"B XB T"},F:{"1":"BB CB EB GB HB IB JB X LB MB NB FB W V","16":"E B C oB pB qB rB T ZB tB","132":"Q","260":"0 1 2 3 4 5 6 7 8 9 f g h i j k l m n o p q r s t u v w x y z AB","772":"I J K L Z a b c d e"},G:{"1":"D 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB uB aB TC","132":"H xB yB zB 0B 1B 2B"},H:{"132":"CC"},I:{"1":"M","16":"bB DC EC FC","132":"G GC aB","772":"HC IC"},J:{"132":"F A"},K:{"1":"DB","16":"A B C T ZB","132":"Q"},L:{"1":"U"},M:{"1":"OB"},N:{"132":"A B"},O:{"260":"JC"},P:{"1":"OC XB PC QC","260":"G KC LC MC NC"},Q:{"260":"RC"},R:{"132":"SC"},S:{"132":"jB"}},B:6,C:"Date.prototype.toLocaleDateString"};

  var details={A:{A:{"2":"E A B lB","8":"O F H"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB","8":"0 bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB","194":"1 2"},D:{"1":"0 1 2 3 4 5 6 7 8 9 q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","8":"G Y O F H E A B","257":"Z a b c d e f g h i j k l m n o p","769":"C N D I J K L"},E:{"1":"C N D Q mB nB","8":"G Y dB WB fB","257":"O F H E A gB hB iB","1025":"B XB T"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"C T ZB tB Q","8":"E B oB pB qB rB"},G:{"1":"H D xB yB zB 0B 1B 5B 6B 7B 8B 9B AC BC","8":"WB uB aB TC","1025":"2B 3B 4B"},H:{"8":"CC"},I:{"1":"G M GC aB HC IC","8":"bB DC EC FC"},J:{"1":"A","8":"F"},K:{"1":"DB","8":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"769":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Details & Summary elements"};

  var deviceorientation={A:{A:{"2":"O F H E A lB","132":"B"},B:{"1":"C N D I J K L","4":"KB P M R S YB U"},C:{"2":"eB bB kB","4":"0 1 2 3 4 5 6 7 8 9 O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","8":"G Y sB"},D:{"2":"G Y O","4":"0 1 2 3 4 5 6 7 8 9 F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"E B C oB pB qB rB T ZB tB Q","4":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"2":"WB uB","4":"H D aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"DC EC FC","4":"bB G M GC aB HC IC"},J:{"2":"F","4":"A"},K:{"1":"C Q","2":"A B T ZB","4":"DB"},L:{"4":"U"},M:{"4":"OB"},N:{"1":"B","2":"A"},O:{"4":"JC"},P:{"4":"G KC LC MC NC OC XB PC QC"},Q:{"4":"RC"},R:{"4":"SC"},S:{"4":"jB"}},B:4,C:"DeviceOrientation & DeviceMotion events"};

  var devicepixelratio={A:{A:{"1":"B","2":"O F H E A lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V tB Q","2":"E B oB pB qB rB T ZB"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"1":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"C DB Q","2":"A B T ZB"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"B","2":"A"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:5,C:"Window.devicePixelRatio"};

  var dialog={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"2":"0 1 2 3 4 5 6 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB","194":"7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB","1218":"P M OB R S"},D:{"1":"0 1 2 3 4 5 6 7 8 9 r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l","322":"m n o p q"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L oB pB qB rB T ZB tB Q","578":"Z a b c d"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"194":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:1,C:"Dialog element"};

  var dispatchevent={A:{A:{"1":"B","16":"lB","129":"E A","130":"O F H"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D WB fB gB hB iB XB T Q mB nB","16":"dB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q","16":"E"},G:{"1":"H D uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB"},H:{"1":"CC"},I:{"1":"bB G M FC GC aB HC IC","16":"DC EC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"B","129":"A"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"EventTarget.dispatchEvent"};

  var dnssec={A:{A:{"132":"O F H E A B lB"},B:{"132":"C N D I J K L KB P M R S YB U"},C:{"132":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"132":"0 1 2 3 4 5 6 7 8 9 G Y l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","388":"O F H E A B C N D I J K L Z a b c d e f g h i j k"},E:{"132":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"132":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"132":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"132":"CC"},I:{"132":"bB G M DC EC FC GC aB HC IC"},J:{"132":"F A"},K:{"132":"A B C DB T ZB Q"},L:{"132":"U"},M:{"132":"OB"},N:{"132":"A B"},O:{"132":"JC"},P:{"132":"G KC LC MC NC OC XB PC QC"},Q:{"132":"RC"},R:{"132":"SC"},S:{"132":"jB"}},B:6,C:"DNSSEC and DANE"};

  var doNotTrack={A:{A:{"2":"O F H lB","164":"E A","260":"B"},B:{"1":"K L KB P M R S YB U","260":"C N D I J"},C:{"1":"0 1 2 3 4 5 6 7 8 9 m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H kB sB","516":"E A B C N D I J K L Z a b c d e f g h i j k l"},D:{"1":"0 1 2 3 4 5 6 7 8 9 d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c"},E:{"1":"O A B C fB iB XB T","2":"G Y N D dB WB Q mB nB","1028":"F H E gB hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V Q","2":"E B oB pB qB rB T ZB tB"},G:{"1":"0B 1B 2B 3B 4B 5B 6B","2":"D WB uB aB TC xB 7B 8B 9B AC BC","1028":"H yB zB"},H:{"1":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"16":"F","1028":"A"},K:{"1":"DB Q","16":"A B C T ZB"},L:{"1":"U"},M:{"1":"OB"},N:{"164":"A","260":"B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"Do Not Track API"};

  var documentCurrentscript={A:{A:{"2":"O F H E A B lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i"},E:{"1":"H E A B C N D iB XB T Q mB nB","2":"G Y O F dB WB fB gB hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I oB pB qB rB T ZB tB Q"},G:{"1":"H D zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC xB yB"},H:{"2":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"document.currentScript"};

  var documentEvaluateXpath={A:{A:{"2":"O F H E A B lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","16":"eB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q","16":"E"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"1":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:7,C:"document.evaluate & XPath"};

  var documentExeccommand={A:{A:{"1":"O F H E A B lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"O F H E A B C N D gB hB iB XB T Q mB nB","16":"G Y dB WB fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V pB qB rB T ZB tB Q","16":"E oB"},G:{"1":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB","16":"aB TC xB"},H:{"2":"CC"},I:{"1":"M GC aB HC IC","2":"bB G DC EC FC"},J:{"1":"A","2":"F"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"B","2":"A"},O:{"2":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:7,C:"Document.execCommand()"};

  var documentPolicy={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P M R S","132":"YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S","132":"YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G DC EC FC GC aB HC IC","132":"M"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"132":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:7,C:"Document Policy"};

  var documentScrollingelement={A:{A:{"2":"O F H E A B lB"},B:{"1":"D I J K L KB P M R S YB U","16":"C N"},C:{"1":"2 3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x"},E:{"1":"E A B C N D iB XB T Q mB nB","2":"G Y O F H dB WB fB gB hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k oB pB qB rB T ZB tB Q"},G:{"1":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:5,C:"document.scrollingElement"};

  var documenthead={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"G dB WB","16":"Y"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V T ZB tB Q","2":"E oB pB qB rB"},G:{"1":"H D uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB"},H:{"1":"CC"},I:{"1":"bB G M FC GC aB HC IC","16":"DC EC"},J:{"1":"F A"},K:{"1":"B C DB T ZB Q","2":"A"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"document.head"};

  var domManipConvenience={A:{A:{"2":"O F H E A B lB"},B:{"1":"K L KB P M R S YB U","2":"C N D I J"},C:{"1":"3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB"},D:{"1":"8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","194":"6 7"},E:{"1":"A B C N D XB T Q mB nB","2":"G Y O F H E dB WB fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s t oB pB qB rB T ZB tB Q","194":"u"},G:{"1":"D 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"LC MC NC OC XB PC QC","2":"G KC"},Q:{"194":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:1,C:"DOM manipulation convenience methods"};

  var domRange={A:{A:{"1":"E A B","2":"lB","8":"O F H"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"1":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Document Object Model Range"};

  var domcontentloaded={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"1":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"DOMContentLoaded"};

  var domfocusinDomfocusoutEvents={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","16":"G Y O F H E A B C N D I J K L Z a b c d e f"},E:{"1":"O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"G dB WB","16":"Y"},F:{"1":"0 1 2 3 4 5 6 7 8 9 C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V tB Q","16":"E B oB pB qB rB T ZB"},G:{"1":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB uB aB TC xB"},H:{"16":"CC"},I:{"1":"G M GC aB HC IC","16":"bB DC EC FC"},J:{"16":"F A"},K:{"16":"A B C DB T ZB Q"},L:{"1":"U"},M:{"2":"OB"},N:{"16":"A B"},O:{"16":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:5,C:"DOMFocusIn & DOMFocusOut events"};

  var dommatrix={A:{A:{"2":"O F H E lB","132":"A B"},B:{"132":"C N D I J K L","1028":"KB P M R S YB U"},C:{"2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m kB sB","2564":"0 1 2 n o p q r s t u v w x y z","3076":"3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"16":"G Y O F","132":"0 1 2 3 4 5 6 7 8 9 E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB","388":"H","1028":"PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"16":"G dB WB","132":"Y O F H E A fB gB hB iB XB","1028":"B C N D T Q mB nB"},F:{"2":"E B C oB pB qB rB T ZB tB Q","132":"0 1 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","1028":"2 3 4 5 6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"16":"WB uB aB","132":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","132":"G GC aB HC IC","292":"bB DC EC FC"},J:{"16":"F","132":"A"},K:{"2":"A B C T ZB Q","132":"DB"},L:{"1028":"U"},M:{"1":"OB"},N:{"132":"A B"},O:{"132":"JC"},P:{"132":"G KC LC MC NC OC XB PC QC"},Q:{"132":"RC"},R:{"132":"SC"},S:{"2564":"jB"}},B:4,C:"DOMMatrix"};

  var download={A:{A:{"2":"O F H E A B lB"},B:{"1":"N D I J K L KB P M R S YB U","2":"C"},C:{"1":"0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N"},E:{"1":"B C N D XB T Q mB nB","2":"G Y O F H E A dB WB fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"1":"D 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B"},H:{"2":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"1":"A","2":"F"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Download attribute"};

  var dragndrop={A:{A:{"644":"O F H E lB","772":"A B"},B:{"1":"L KB P M R S YB U","260":"C N D I J K"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","8":"eB bB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V Q","8":"E B oB pB qB rB T ZB tB"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G DC EC FC GC aB HC IC","1025":"M"},J:{"2":"F A"},K:{"1":"Q","8":"A B C T ZB","1025":"DB"},L:{"1025":"U"},M:{"2":"OB"},N:{"1":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:1,C:"Drag and Drop"};

  var elementClosest={A:{A:{"2":"O F H E A B lB"},B:{"1":"I J K L KB P M R S YB U","2":"C N D"},C:{"1":"0 1 2 3 4 5 6 7 8 9 p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u"},E:{"1":"E A B C N D iB XB T Q mB nB","2":"G Y O F H dB WB fB gB hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h oB pB qB rB T ZB tB Q"},G:{"1":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"2":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Element.closest()"};

  var elementFromPoint={A:{A:{"1":"O F H E A B","16":"lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","16":"eB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","16":"G Y O F H E A B C N D"},E:{"1":"Y O F H E A B C N D fB gB hB iB XB T Q mB nB","16":"G dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V T ZB tB Q","16":"E oB pB qB rB"},G:{"1":"H D uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB"},H:{"1":"CC"},I:{"1":"bB G M FC GC aB HC IC","16":"DC EC"},J:{"1":"F A"},K:{"1":"C DB Q","16":"A B T ZB"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:5,C:"document.elementFromPoint()"};

  var elementScrollMethods={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p kB sB"},D:{"1":"PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB"},E:{"2":"G Y O F H E dB WB fB gB hB iB","132":"A B C N D XB T Q mB nB"},F:{"1":"2 3 4 5 6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"0 1 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q"},G:{"2":"H WB uB aB TC xB yB zB 0B 1B","132":"D 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"NC OC XB PC QC","2":"G KC LC MC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"1":"jB"}},B:5,C:"Scroll methods on elements (scroll, scrollTo, scrollBy)"};

  var eme={A:{A:{"2":"O F H E A lB","164":"B"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o","132":"p q r s t u v"},E:{"1":"C N D Q mB nB","2":"G Y O dB WB fB gB","164":"F H E A B hB iB XB T"},F:{"1":"0 1 2 3 4 5 6 7 8 9 j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b oB pB qB rB T ZB tB Q","132":"c d e f g h i"},G:{"1":"D 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"16":"RC"},R:{"2":"SC"},S:{"1":"jB"}},B:2,C:"Encrypted Media Extensions"};

  var eot={A:{A:{"1":"O F H E A B","2":"lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:7,C:"EOT - Embedded OpenType fonts"};

  var es5={A:{A:{"1":"A B","2":"O F lB","260":"E","1026":"H"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","4":"eB bB kB sB","132":"G Y O F H E A B C N D I J K L Z a"},D:{"1":"0 1 2 3 4 5 6 7 8 9 d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","4":"G Y O F H E A B C N D I J K L","132":"Z a b c"},E:{"1":"O F H E A B C N D gB hB iB XB T Q mB nB","4":"G Y dB WB fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","4":"E B C oB pB qB rB T ZB tB","132":"Q"},G:{"1":"H D xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","4":"WB uB aB TC"},H:{"132":"CC"},I:{"1":"M HC IC","4":"bB DC EC FC","132":"GC aB","900":"G"},J:{"1":"A","4":"F"},K:{"1":"DB","4":"A B C T ZB","132":"Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:6,C:"ECMAScript 5"};

  var es6Class={A:{A:{"2":"O F H E A B lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y kB sB"},D:{"1":"3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v","132":"0 1 2 w x y z"},E:{"1":"E A B C N D iB XB T Q mB nB","2":"G Y O F H dB WB fB gB hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i oB pB qB rB T ZB tB Q","132":"j k l m n o p"},G:{"1":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:6,C:"ES6 classes"};

  var es6Generators={A:{A:{"2":"O F H E A B lB"},B:{"1":"N D I J K L KB P M R S YB U","2":"C"},C:{"1":"0 1 2 3 4 5 6 7 8 9 g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s"},E:{"1":"A B C N D XB T Q mB nB","2":"G Y O F H E dB WB fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f oB pB qB rB T ZB tB Q"},G:{"1":"D 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:6,C:"ES6 Generators"};

  var es6ModuleDynamicImport={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB kB sB","194":"X"},D:{"1":"HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB"},E:{"1":"C N D T Q mB nB","2":"G Y O F H E A B dB WB fB gB hB iB XB"},F:{"1":"4 5 6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"0 1 2 3 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q"},G:{"1":"D 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"NC OC XB PC QC","2":"G KC LC MC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:6,C:"JavaScript modules: dynamic import()"};

  var es6Module={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D","4097":"J K L","4290":"I"},C:{"1":"EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 6 7 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB","322":"8 9 AB BB CB DB"},D:{"1":"PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB","194":"EB"},E:{"1":"B C N D T Q mB nB","2":"G Y O F H E A dB WB fB gB hB iB","3076":"XB"},F:{"1":"2 3 4 5 6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"0 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q","194":"1"},G:{"1":"D 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B","3076":"3B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"NC OC XB PC QC","2":"G KC LC MC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:1,C:"JavaScript modules via script tag"};

  var es6Number={A:{A:{"2":"O F H E A B lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I kB sB","132":"J K L Z a b c d e","260":"f g h i j k","516":"l"},D:{"1":"0 1 2 3 4 5 6 7 8 9 o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L","1028":"Z a b c d e f g h i j k l m n"},E:{"1":"E A B C N D iB XB T Q mB nB","2":"G Y O F H dB WB fB gB hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q","1028":"I J K L Z a"},G:{"1":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC","1028":"GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:6,C:"ES6 Number"};

  var es6StringIncludes={A:{A:{"2":"O F H E A B lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u"},E:{"1":"E A B C N D iB XB T Q mB nB","2":"G Y O F H dB WB fB gB hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h oB pB qB rB T ZB tB Q"},G:{"1":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:6,C:"String.prototype.includes"};

  var es6={A:{A:{"2":"O F H E A lB","388":"B"},B:{"257":"KB P M R S YB U","260":"C N D","769":"I J K L"},C:{"2":"eB bB G Y kB sB","4":"0 1 2 3 4 5 6 7 O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","257":"8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"2":"G Y O F H E A B C N D I J K L Z a","4":"0 1 2 3 4 b c d e f g h i j k l m n o p q r s t u v w x y z","257":"5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"A B C N D XB T Q mB nB","2":"G Y O F dB WB fB gB","4":"H E hB iB"},F:{"2":"E B C oB pB qB rB T ZB tB Q","4":"I J K L Z a b c d e f g h i j k l m n o p q r","257":"0 1 2 3 4 5 6 7 8 9 s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"1":"D 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC xB","4":"H yB zB 0B 1B"},H:{"2":"CC"},I:{"2":"bB G DC EC FC GC aB","4":"HC IC","257":"M"},J:{"2":"F","4":"A"},K:{"2":"A B C T ZB Q","257":"DB"},L:{"257":"U"},M:{"257":"OB"},N:{"2":"A","388":"B"},O:{"257":"JC"},P:{"4":"G","257":"KC LC MC NC OC XB PC QC"},Q:{"257":"RC"},R:{"4":"SC"},S:{"4":"jB"}},B:6,C:"ECMAScript 2015 (ES6)"};

  var eventsource={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y"},E:{"1":"Y O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"G dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V T ZB tB Q","4":"E oB pB qB rB"},G:{"1":"H D uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB"},H:{"2":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"1":"F A"},K:{"1":"C DB T ZB Q","4":"A B"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Server-sent events"};

  var extendedSystemFonts={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"D mB nB","2":"G Y O F H E A B C N dB WB fB gB hB iB XB T Q"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"D BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"ui-serif, ui-sans-serif, ui-monospace and ui-rounded values for font-family"};

  var featurePolicy={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB kB sB","260":"QB RB SB TB UB KB P M OB R S"},D:{"1":"QB RB SB TB UB KB P M R S YB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB","132":"EB PB GB HB IB JB X LB MB NB FB W V VB","1025":"U vB wB cB"},E:{"2":"G Y O F H E A B dB WB fB gB hB iB XB","772":"C N D T Q mB nB"},F:{"1":"GB HB IB JB X LB MB NB FB W V","2":"0 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q","132":"1 2 3 4 5 6 7 8 9 AB BB CB EB"},G:{"2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B","772":"D 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"260":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"PC QC","2":"G KC LC MC","132":"NC OC XB"},Q:{"132":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"Feature Policy"};

  var fetch={A:{A:{"2":"O F H E A B lB"},B:{"1":"D I J K L KB P M R S YB U","2":"C N"},C:{"1":"0 1 2 3 4 5 6 7 8 9 u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n kB sB","1025":"t","1218":"o p q r s"},D:{"1":"0 1 2 3 4 5 6 7 8 9 w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t","260":"u","772":"v"},E:{"1":"B C N D XB T Q mB nB","2":"G Y O F H E A dB WB fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g oB pB qB rB T ZB tB Q","260":"h","772":"i"},G:{"1":"D 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Fetch"};

  var fieldsetDisabled={A:{A:{"16":"lB","132":"H E","388":"O F A B"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I","16":"J K L Z"},E:{"1":"O F H E A B C N D gB hB iB XB T Q mB nB","2":"G Y dB WB fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V pB qB rB T ZB tB Q","16":"E oB"},G:{"1":"H D xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC"},H:{"388":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"1":"A","2":"F"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A","260":"B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"disabled attribute of the fieldset element"};

  var fileapi={A:{A:{"2":"O F H E lB","260":"A B"},B:{"1":"KB P M R S YB U","260":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB","260":"G Y O F H E A B C N D I J K L Z a b c d e f g h sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y","260":"N D I J K L Z a b c d e f g h i j k l m n o p q r","388":"O F H E A B C"},E:{"1":"A B C N D XB T Q mB nB","2":"G Y dB WB","260":"O F H E gB hB iB","388":"fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B oB pB qB rB","260":"C I J K L Z a b c d e T ZB tB Q"},G:{"1":"D 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC","260":"H xB yB zB 0B 1B"},H:{"2":"CC"},I:{"1":"M IC","2":"DC EC FC","260":"HC","388":"bB G GC aB"},J:{"260":"A","388":"F"},K:{"1":"DB","2":"A B","260":"C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A","260":"B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:5,C:"File API"};

  var filereader={A:{A:{"2":"O F H E lB","132":"A B"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S sB","2":"eB bB kB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y"},E:{"1":"O F H E A B C N D gB hB iB XB T Q mB nB","2":"G Y dB WB fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V T ZB tB Q","2":"E B oB pB qB rB"},G:{"1":"H D xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC"},H:{"2":"CC"},I:{"1":"bB G M GC aB HC IC","2":"DC EC FC"},J:{"1":"A","2":"F"},K:{"1":"C DB T ZB Q","2":"A B"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:5,C:"FileReader API"};

  var filereadersync={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","16":"G Y O F H E A B C N D"},E:{"1":"O F H E A B C N D gB hB iB XB T Q mB nB","2":"G Y dB WB fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V tB Q","2":"E oB pB","16":"B qB rB T ZB"},G:{"1":"H D xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC"},H:{"2":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"1":"A","2":"F"},K:{"1":"C DB ZB Q","2":"A","16":"B T"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:5,C:"FileReaderSync"};

  var filesystem={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L","33":"KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"G Y O F","33":"0 1 2 3 4 5 6 7 8 9 N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","36":"H E A B C"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"E B C oB pB qB rB T ZB tB Q","33":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F","33":"A"},K:{"2":"A B C T ZB Q","33":"DB"},L:{"33":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G","33":"KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:7,C:"Filesystem & FileWriter API"};

  var flac={A:{A:{"2":"O F H E A B lB"},B:{"1":"J K L KB P M R S YB U","2":"C N D I"},C:{"1":"5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB"},D:{"1":"AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x","16":"0 y z","388":"1 2 3 4 5 6 7 8 9"},E:{"1":"N D mB nB","2":"G Y O F H E A dB WB fB gB hB iB XB","516":"B C T Q"},F:{"1":"0 1 2 3 4 5 6 7 8 9 w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v oB pB qB rB T ZB tB Q"},G:{"1":"D 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B"},H:{"2":"CC"},I:{"1":"M","2":"DC EC FC","16":"bB G GC aB HC IC"},J:{"1":"A","2":"F"},K:{"1":"Q","16":"A B C T ZB","129":"DB"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","129":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:6,C:"FLAC audio format"};

  var flexboxGap={A:{A:{"2":"O F H E A B lB"},B:{"1":"S YB U","2":"C N D I J K L KB P M R"},C:{"1":"HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB kB sB"},D:{"1":"S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R"},E:{"1":"nB","2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"gap property for Flexbox"};

  var flexbox={A:{A:{"2":"O F H E lB","1028":"B","1316":"A"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","164":"eB bB G Y O F H E A B C N D I J K L Z a b kB sB","516":"c d e f g h"},D:{"1":"0 1 2 3 4 5 6 7 8 9 j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","33":"b c d e f g h i","164":"G Y O F H E A B C N D I J K L Z a"},E:{"1":"E A B C N D iB XB T Q mB nB","33":"F H gB hB","164":"G Y O dB WB fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V Q","2":"E B C oB pB qB rB T ZB tB","33":"I J"},G:{"1":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","33":"H yB zB","164":"WB uB aB TC xB"},H:{"1":"CC"},I:{"1":"M HC IC","164":"bB G DC EC FC GC aB"},J:{"1":"A","164":"F"},K:{"1":"DB Q","2":"A B C T ZB"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"B","292":"A"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"CSS Flexible Box Layout Module"};

  var flowRoot={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 6 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB"},D:{"1":"CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB"},E:{"1":"N D mB nB","2":"G Y O F H E A B C dB WB fB gB hB iB XB T Q"},F:{"1":"0 1 2 3 4 5 6 7 8 9 z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y oB pB qB rB T ZB tB Q"},G:{"1":"D 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"MC NC OC XB PC QC","2":"G KC LC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"display: flow-root"};

  var focusinFocusoutEvents={A:{A:{"1":"O F H E A B","2":"lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","16":"G Y O F H E A B C N D"},E:{"1":"O F H E A B C N D fB gB hB iB XB T Q mB nB","16":"G Y dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V tB Q","2":"E oB pB qB rB","16":"B T ZB"},G:{"1":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB"},H:{"2":"CC"},I:{"1":"G M GC aB HC IC","2":"DC EC FC","16":"bB"},J:{"1":"F A"},K:{"1":"C DB Q","2":"A","16":"B T ZB"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:5,C:"focusin & focusout events"};

  var focusoptionsPreventscroll={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J","132":"K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"5 6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"0 1 2 3 4 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:1,C:"preventScroll support in focus"};

  var fontFamilySystemUi={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w kB sB","132":"0 1 2 3 4 5 6 7 8 9 x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"1":"AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","260":"7 8 9"},E:{"1":"B C N D T Q mB nB","2":"G Y O F H dB WB fB gB hB","16":"E","132":"A iB XB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w oB pB qB rB T ZB tB Q"},G:{"1":"D 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB","132":"0B 1B 2B 3B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"LC MC NC OC XB PC QC","2":"G KC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"132":"jB"}},B:5,C:"system-ui value for font-family"};

  var fontFeature={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB","33":"I J K L Z a b c d e f g h i j k l m n","164":"G Y O F H E A B C N D"},D:{"1":"2 3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I","33":"0 1 b c d e f g h i j k l m n o p q r s t u v w x y z","292":"J K L Z a"},E:{"1":"A B C N D iB XB T Q mB nB","2":"F H E dB WB gB hB","4":"G Y O fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q","33":"I J K L Z a b c d e f g h i j k l m n o"},G:{"1":"D 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H yB zB 0B","4":"WB uB aB TC xB"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB","33":"HC IC"},J:{"2":"F","33":"A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","33":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"CSS font-feature-settings"};

  var fontKerning={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d kB sB","194":"e f g h i j k l m n"},D:{"1":"0 1 2 3 4 5 6 7 8 9 n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i","33":"j k l m"},E:{"1":"A B C N D iB XB T Q mB nB","2":"G Y O dB WB fB gB","33":"F H E hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I oB pB qB rB T ZB tB Q","33":"J K L Z"},G:{"2":"WB uB aB TC xB yB","33":"H D zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M IC","2":"bB G DC EC FC GC aB","33":"HC"},J:{"2":"F","33":"A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"CSS3 font-kerning"};

  var fontLoading={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o kB sB","194":"p q r s t u"},D:{"1":"0 1 2 3 4 5 6 7 8 9 p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o"},E:{"1":"A B C N D XB T Q mB nB","2":"G Y O F H E dB WB fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b oB pB qB rB T ZB tB Q"},G:{"1":"D 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:5,C:"CSS Font Loading"};

  var fontSizeAdjust={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L","194":"KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","2":"eB"},D:{"2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w","194":"0 1 2 3 4 5 6 7 8 9 x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"E B C I J K L Z a b c d e f g h i j oB pB qB rB T ZB tB Q","194":"0 1 2 3 4 5 6 7 8 9 k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"258":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"194":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:4,C:"CSS font-size-adjust"};

  var fontSmooth={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L","676":"KB P M R S YB U"},C:{"2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e kB sB","804":"0 1 2 3 4 5 6 7 8 9 f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"2":"G","676":"0 1 2 3 4 5 6 7 8 9 Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"dB WB","676":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB"},F:{"2":"E B C oB pB qB rB T ZB tB Q","676":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"804":"jB"}},B:7,C:"CSS font-smooth"};

  var fontUnicodeRange={A:{A:{"2":"O F H lB","4":"E A B"},B:{"1":"K L KB P M R S YB U","4":"C N D I J"},C:{"1":"0 1 2 3 4 5 6 7 8 9 y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p kB sB","194":"q r s t u v w x"},D:{"1":"0 1 2 3 4 5 6 7 8 9 q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","4":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p"},E:{"1":"A B C N D XB T Q mB nB","4":"G Y O F H E dB WB fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q","4":"I J K L Z a b c"},G:{"1":"D 2B 3B 4B 5B 6B 7B 8B 9B AC BC","4":"H WB uB aB TC xB yB zB 0B 1B"},H:{"2":"CC"},I:{"1":"M","4":"bB G DC EC FC GC aB HC IC"},J:{"2":"F","4":"A"},K:{"2":"A B C T ZB Q","4":"DB"},L:{"1":"U"},M:{"1":"OB"},N:{"4":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","4":"G"},Q:{"1":"RC"},R:{"2":"SC"},S:{"1":"jB"}},B:4,C:"Font unicode-range subsetting"};

  var fontVariantAlternates={A:{A:{"2":"O F H E lB","130":"A B"},B:{"130":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB","130":"G Y O F H E A B C N D I J K L Z a b c d","322":"e f g h i j k l m n"},D:{"2":"G Y O F H E A B C N D I","130":"0 1 2 3 4 5 6 7 8 9 J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"A B C N D iB XB T Q mB nB","2":"F H E dB WB gB hB","130":"G Y O fB"},F:{"2":"E B C oB pB qB rB T ZB tB Q","130":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"1":"D 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB yB zB 0B","130":"uB aB TC xB"},H:{"2":"CC"},I:{"2":"bB G DC EC FC GC aB","130":"M HC IC"},J:{"2":"F","130":"A"},K:{"2":"A B C T ZB Q","130":"DB"},L:{"130":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"130":"JC"},P:{"130":"G KC LC MC NC OC XB PC QC"},Q:{"130":"RC"},R:{"130":"SC"},S:{"1":"jB"}},B:5,C:"CSS font-variant-alternates"};

  var fontVariantEastAsian={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d kB sB","132":"e f g h i j k l m n"},D:{"1":"HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"4 5 6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"0 1 2 3 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q"},G:{"2":"H D uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"132":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"1":"jB"}},B:4,C:"CSS font-variant-east-asian "};

  var fontVariantNumeric={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n kB sB"},D:{"1":"6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},E:{"1":"A B C N D iB XB T Q mB nB","2":"G Y O F H E dB WB fB gB hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s oB pB qB rB T ZB tB Q"},G:{"1":"D 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F","16":"A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"LC MC NC OC XB PC QC","2":"G KC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"1":"jB"}},B:2,C:"CSS font-variant-numeric"};

  var fontface={A:{A:{"1":"E A B","132":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","2":"eB bB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D WB fB gB hB iB XB T Q mB nB","2":"dB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V pB qB rB T ZB tB Q","2":"E oB"},G:{"1":"H D aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","260":"WB uB"},H:{"2":"CC"},I:{"1":"G M GC aB HC IC","2":"DC","4":"bB EC FC"},J:{"1":"A","4":"F"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"@font-face Web fonts"};

  var formAttribute={A:{A:{"2":"O F H E A B lB"},B:{"1":"J K L KB P M R S YB U","2":"C N D I"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E"},E:{"1":"O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"G dB WB","16":"Y"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q","2":"E"},G:{"1":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB"},H:{"1":"CC"},I:{"1":"bB G M GC aB HC IC","2":"DC EC FC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Form attribute"};

  var formSubmitAttributes={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","16":"G Y O F H E A B C N D"},E:{"1":"O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"G Y dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V rB T ZB tB Q","2":"E oB","16":"pB qB"},G:{"1":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB"},H:{"1":"CC"},I:{"1":"G M GC aB HC IC","2":"DC EC FC","16":"bB"},J:{"1":"A","2":"F"},K:{"1":"B C DB T ZB Q","16":"A"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Attributes for form submission"};

  var formValidation={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E"},E:{"1":"B C N D XB T Q mB nB","2":"G dB WB","132":"Y O F H E A fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V pB qB rB T ZB tB Q","2":"E oB"},G:{"1":"D 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB","132":"H uB aB TC xB yB zB 0B 1B 2B"},H:{"516":"CC"},I:{"1":"M IC","2":"bB DC EC FC","132":"G GC aB HC"},J:{"1":"A","132":"F"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"260":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"132":"jB"}},B:1,C:"Form validation"};

  var forms={A:{A:{"2":"lB","4":"A B","8":"O F H E"},B:{"1":"J K L KB P M R S YB U","4":"C N D I"},C:{"4":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","8":"eB bB kB sB"},D:{"1":"PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","4":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB"},E:{"4":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB","8":"dB WB"},F:{"1":"6 7 8 9 E B C AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q","4":"0 1 2 3 4 5 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},G:{"2":"WB","4":"H D uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB","4":"HC IC"},J:{"2":"F","4":"A"},K:{"1":"A B C T ZB Q","4":"DB"},L:{"1":"U"},M:{"4":"OB"},N:{"4":"A B"},O:{"1":"JC"},P:{"1":"NC OC XB PC QC","4":"G KC LC MC"},Q:{"1":"RC"},R:{"4":"SC"},S:{"4":"jB"}},B:1,C:"HTML5 form features"};

  var fullscreen={A:{A:{"2":"O F H E A lB","548":"B"},B:{"1":"KB P M R S YB U","516":"C N D I J K L"},C:{"1":"IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E kB sB","676":"0 A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","1700":"1 2 3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB"},D:{"1":"W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D","676":"I J K L Z","804":"0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB"},E:{"2":"G Y dB WB","676":"fB","804":"O F H E A B C N D gB hB iB XB T Q mB nB"},F:{"1":"IB JB X LB MB NB FB W V Q","2":"E B C oB pB qB rB T ZB tB","804":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB"},G:{"2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B","2052":"D 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F","292":"A"},K:{"2":"A B C T ZB Q","804":"DB"},L:{"804":"U"},M:{"1":"OB"},N:{"2":"A","548":"B"},O:{"804":"JC"},P:{"1":"XB PC QC","804":"G KC LC MC NC OC"},Q:{"804":"RC"},R:{"804":"SC"},S:{"1":"jB"}},B:1,C:"Full Screen API"};

  var gamepad={A:{A:{"2":"O F H E A B lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a","33":"b c d e"},E:{"1":"B C N D XB T Q mB nB","2":"G Y O F H E A dB WB fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d oB pB qB rB T ZB tB Q"},G:{"1":"D 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:5,C:"Gamepad API"};

  var geolocation={A:{A:{"1":"E A B","2":"lB","8":"O F H"},B:{"1":"C N D I J K L","129":"KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB","8":"eB bB","129":"9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"1":"0 1 2 3 Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","4":"G","129":"4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"Y O F H E B C N D fB gB hB iB XB T Q mB nB","8":"G dB WB","129":"A"},F:{"1":"B C J K L Z a b c d e f g h i j k l m n o p q r s rB T ZB tB Q","2":"E I oB","8":"pB qB","129":"0 1 2 3 4 5 6 7 8 9 t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"1":"H WB uB aB TC xB yB zB 0B 1B","129":"D 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"bB G DC EC FC GC aB HC IC","129":"M"},J:{"1":"F A"},K:{"1":"B C DB T ZB Q","8":"A"},L:{"129":"U"},M:{"129":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G","129":"KC LC MC NC OC XB PC QC"},Q:{"129":"RC"},R:{"129":"SC"},S:{"1":"jB"}},B:2,C:"Geolocation"};

  var getboundingclientrect={A:{A:{"644":"O F lB","2049":"E A B","2692":"H"},B:{"1":"KB P M R S YB U","2049":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB","260":"G Y O F H E A B","1156":"bB","1284":"kB","1796":"sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB","16":"dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V rB T ZB tB Q","16":"E oB","132":"pB qB"},G:{"1":"H D uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB"},H:{"1":"CC"},I:{"1":"bB G M FC GC aB HC IC","16":"DC EC"},J:{"1":"F A"},K:{"1":"B C DB T ZB Q","132":"A"},L:{"1":"U"},M:{"1":"OB"},N:{"2049":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:5,C:"Element.getBoundingClientRect()"};

  var getcomputedstyle={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB","132":"bB kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","260":"G Y O F H E A"},E:{"1":"Y O F H E A B C N D fB gB hB iB XB T Q mB nB","260":"G dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V rB T ZB tB Q","260":"E oB pB qB"},G:{"1":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","260":"WB uB aB"},H:{"260":"CC"},I:{"1":"G M GC aB HC IC","260":"bB DC EC FC"},J:{"1":"A","260":"F"},K:{"1":"B C DB T ZB Q","260":"A"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:2,C:"getComputedStyle"};

  var getelementsbyclassname={A:{A:{"1":"E A B","2":"lB","8":"O F H"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","8":"eB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q","2":"E"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"1":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"getElementsByClassName"};

  var getrandomvalues={A:{A:{"2":"O F H E A lB","33":"B"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A"},E:{"1":"F H E A B C N D gB hB iB XB T Q mB nB","2":"G Y O dB WB fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"1":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC xB"},H:{"2":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"1":"A","2":"F"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A","33":"B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:2,C:"crypto.getRandomValues()"};

  var gyroscope={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB","194":"CB DB EB PB GB HB IB JB X"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"0 1 2 3 4 5 6 7 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:4,C:"Gyroscope"};

  var hardwareconcurrency={A:{A:{"2":"O F H E A B lB"},B:{"1":"I J K L KB P M R S YB U","2":"C N D"},C:{"1":"2 3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q"},E:{"2":"G Y O F dB WB fB gB hB","129":"B C N D XB T Q mB nB","194":"H E A iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d oB pB qB rB T ZB tB Q"},G:{"2":"WB uB aB TC xB yB","129":"D 3B 4B 5B 6B 7B 8B 9B AC BC","194":"H zB 0B 1B 2B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"navigator.hardwareConcurrency"};

  var hashchange={A:{A:{"1":"H E A B","8":"O F lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S sB","8":"eB bB kB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","8":"G"},E:{"1":"Y O F H E A B C N D fB gB hB iB XB T Q mB nB","8":"G dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V rB T ZB tB Q","8":"E oB pB qB"},G:{"1":"H D uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB"},H:{"2":"CC"},I:{"1":"bB G M EC FC GC aB HC IC","2":"DC"},J:{"1":"F A"},K:{"1":"B C DB T ZB Q","8":"A"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Hashchange event"};

  var heif={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A dB WB fB gB hB iB XB","130":"B C N D T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B","130":"D 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:6,C:"HEIF/ISO Base Media File Format"};

  var hevc={A:{A:{"2":"O F H E A lB","132":"B"},B:{"2":"KB P M R S YB U","132":"C N D I J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"N D mB nB","2":"G Y O F H E A dB WB fB gB hB iB XB","516":"B C T Q"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"D 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B"},H:{"2":"CC"},I:{"2":"bB G DC EC FC GC aB HC IC","258":"M"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"258":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G","258":"KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:6,C:"HEVC/H.265 video format"};

  var hidden={A:{A:{"1":"B","2":"O F H E A lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y"},E:{"1":"O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"G Y dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V T ZB tB Q","2":"E B oB pB qB rB"},G:{"1":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB"},H:{"1":"CC"},I:{"1":"G M GC aB HC IC","2":"bB DC EC FC"},J:{"1":"A","2":"F"},K:{"1":"C DB T ZB Q","2":"A B"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"B","2":"A"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"hidden attribute"};

  var highResolutionTime={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z","33":"a b c d"},E:{"1":"H E A B C N D iB XB T Q mB nB","2":"G Y O F dB WB fB gB hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"1":"H D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC xB yB zB"},H:{"2":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"1":"A","2":"F"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:2,C:"High Resolution Time API"};

  var history={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G"},E:{"1":"O F H E A B C N D gB hB iB XB T Q mB nB","2":"G dB WB","4":"Y fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V ZB tB Q","2":"E B oB pB qB rB T"},G:{"1":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB","4":"aB"},H:{"2":"CC"},I:{"1":"M EC FC aB HC IC","2":"bB G DC GC"},J:{"1":"F A"},K:{"1":"C DB T ZB Q","2":"A B"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Session history management"};

  var htmlMediaCapture={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"WB uB aB TC","129":"H D xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"bB G M GC aB HC IC","2":"DC","257":"EC FC"},J:{"1":"A","16":"F"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"516":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"16":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:4,C:"HTML Media Capture"};

  var html5semantic={A:{A:{"2":"lB","8":"O F H","260":"E A B"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB","132":"bB kB sB","260":"G Y O F H E A B C N D I J K L Z a"},D:{"1":"0 1 2 3 4 5 6 7 8 9 g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","132":"G Y","260":"O F H E A B C N D I J K L Z a b c d e f"},E:{"1":"F H E A B C N D gB hB iB XB T Q mB nB","132":"G dB WB","260":"Y O fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","132":"E B oB pB qB rB","260":"C T ZB tB Q"},G:{"1":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","132":"WB","260":"uB aB TC xB"},H:{"132":"CC"},I:{"1":"M HC IC","132":"DC","260":"bB G EC FC GC aB"},J:{"260":"F A"},K:{"1":"DB","132":"A","260":"B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"260":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"HTML5 semantic elements"};

  var httpLiveStreaming={A:{A:{"2":"O F H E A B lB"},B:{"1":"C N D I J K L","2":"KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"O F H E A B C N D gB hB iB XB T Q mB nB","2":"G Y dB WB fB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"bB G M GC aB HC IC","2":"DC EC FC"},J:{"1":"A","2":"F"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:7,C:"HTTP Live Streaming (HLS)"};

  var http2={A:{A:{"2":"O F H E A lB","132":"B"},B:{"1":"C N D I J K L","513":"KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 q r s t u v w x y z","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p kB sB","513":"7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"1":"0 1 2 3 4 v w x y z","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u","513":"5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"B C N D T Q mB nB","2":"G Y O F H dB WB fB gB hB","260":"E A iB XB"},F:{"1":"i j k l m n o p q r","2":"E B C I J K L Z a b c d e f g h oB pB qB rB T ZB tB Q","513":"0 1 2 3 4 5 6 7 8 9 s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"1":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB"},H:{"2":"CC"},I:{"2":"bB G DC EC FC GC aB HC IC","513":"M"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"513":"U"},M:{"513":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G","513":"KC LC MC NC OC XB PC QC"},Q:{"513":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:6,C:"HTTP/2 protocol"};

  var http3={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W kB sB","194":"V VB QB RB SB TB UB KB P M OB R S"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB","322":"KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N dB WB fB gB hB iB XB T Q mB","516":"D nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","66":"D"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"194":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:6,C:"HTTP/3 protocol"};

  var iframeSandbox={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J kB sB","4":"K L Z a b c d e f g h"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"Y O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"G dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"1":"H D aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB"},H:{"2":"CC"},I:{"1":"bB G M EC FC GC aB HC IC","2":"DC"},J:{"1":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"sandbox attribute for iframes"};

  var iframeSeamless={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","66":"a b c d e f g"},E:{"2":"G Y O H E A B C N D dB WB fB gB iB XB T Q mB nB","130":"F hB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","130":"yB"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:7,C:"seamless attribute for iframes"};

  var iframeSrcdoc={A:{A:{"2":"lB","8":"O F H E A B"},B:{"1":"KB P M R S YB U","8":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB","8":"bB G Y O F H E A B C N D I J K L Z a b c d e kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N","8":"D I J K L Z"},E:{"1":"O F H E A B C N D gB hB iB XB T Q mB nB","2":"dB WB","8":"G Y fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B oB pB qB rB","8":"C T ZB tB Q"},G:{"1":"H D xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB","8":"uB aB TC"},H:{"2":"CC"},I:{"1":"M HC IC","8":"bB G DC EC FC GC aB"},J:{"1":"A","8":"F"},K:{"1":"DB","2":"A B","8":"C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"8":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"srcdoc attribute for iframes"};

  var imagecapture={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L","322":"KB P M R S YB U"},C:{"2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o kB sB","194":"0 1 2 3 4 5 6 7 8 9 p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"2":"0 1 2 3 4 5 6 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","322":"7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s t oB pB qB rB T ZB tB Q","322":"0 1 2 3 4 5 6 7 8 9 u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"322":"RC"},R:{"1":"SC"},S:{"194":"jB"}},B:5,C:"ImageCapture API"};

  var ime={A:{A:{"2":"O F H E A lB","161":"B"},B:{"2":"KB P M R S YB U","161":"C N D I J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A","161":"B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"Input Method Editor API"};

  var imgNaturalwidthNaturalheight={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"1":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"naturalWidth & naturalHeight image properties"};

  var imports={A:{A:{"2":"O F H E lB","8":"A B"},B:{"1":"KB","2":"P M R S YB U","8":"C N D I J K L"},C:{"2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j kB sB","8":"k l AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","72":"0 1 2 3 4 5 6 7 8 9 m n o p q r s t u v w x y z"},D:{"1":"0 1 2 3 4 5 6 7 8 9 q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j P M R S YB U vB wB cB","66":"k l m n o","72":"p"},E:{"2":"G Y dB WB fB","8":"O F H E A B C N D gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X","2":"E B C I J LB MB NB FB W V oB pB qB rB T ZB tB Q","66":"K L Z a b","72":"c"},G:{"2":"WB uB aB TC xB","8":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"2":"U"},M:{"8":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:5,C:"HTML Imports"};

  var indeterminateCheckbox={A:{A:{"1":"O F H E A B","16":"lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S sB","2":"eB bB","16":"kB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h"},E:{"1":"O F H E A B C N D gB hB iB XB T Q mB nB","2":"G Y dB WB fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V tB Q","2":"E B oB pB qB rB T ZB"},G:{"1":"D 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B"},H:{"2":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"2":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"indeterminate checkbox"};

  var indexeddb={A:{A:{"2":"O F H E lB","132":"A B"},B:{"1":"KB P M R S YB U","132":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB","33":"A B C N D I","36":"G Y O F H E"},D:{"1":"0 1 2 3 4 5 6 7 8 9 e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"A","8":"G Y O F H E","33":"d","36":"B C N D I J K L Z a b c"},E:{"1":"A B C N D XB T Q mB nB","8":"G Y O F dB WB fB gB","260":"H E hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E oB pB","8":"B C qB rB T ZB tB Q"},G:{"1":"D 2B 3B 4B 5B 6B 7B 8B 9B AC BC","8":"WB uB aB TC xB yB","260":"H zB 0B 1B"},H:{"2":"CC"},I:{"1":"M HC IC","8":"bB G DC EC FC GC aB"},J:{"1":"A","8":"F"},K:{"1":"DB","2":"A","8":"B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"132":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:2,C:"IndexedDB"};

  var indexeddb2={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x kB sB","132":"0 y z","260":"1 2 3 4"},D:{"1":"CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","132":"2 3 4 5","260":"6 7 8 9 AB BB"},E:{"1":"B C N D XB T Q mB nB","2":"G Y O F H E A dB WB fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o oB pB qB rB T ZB tB Q","132":"p q r s","260":"t u v w x y"},G:{"1":"D 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B","16":"2B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"MC NC OC XB PC QC","2":"G","260":"KC LC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"260":"jB"}},B:4,C:"IndexedDB 2.0"};

  var inlineBlock={A:{A:{"1":"H E A B","4":"lB","132":"O F"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","36":"eB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"1":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:2,C:"CSS inline-block"};

  var innertext={A:{A:{"1":"O F H E A B","16":"lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D WB fB gB hB iB XB T Q mB nB","16":"dB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q","16":"E"},G:{"1":"H D uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB"},H:{"1":"CC"},I:{"1":"bB G M FC GC aB HC IC","16":"DC EC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"HTMLElement.innerText"};

  var inputAutocompleteOnoff={A:{A:{"1":"O F H E A lB","132":"B"},B:{"132":"C N D I J K L","260":"KB P M R S YB U"},C:{"1":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j kB sB","516":"0 1 2 3 4 5 6 7 8 9 k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"1":"K L Z a b c d e f g","2":"G Y O F H E A B C N D I J","132":"h i j k l m n o p q r s t u","260":"0 1 2 3 4 5 6 7 8 9 v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"O fB gB","2":"G Y dB WB","2052":"F H E A B C N D hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"WB uB aB","1025":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"1025":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2052":"A B"},O:{"1025":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"260":"RC"},R:{"1":"SC"},S:{"516":"jB"}},B:1,C:"autocomplete attribute: on & off values"};

  var inputColor={A:{A:{"2":"O F H E A B lB"},B:{"1":"D I J K L KB P M R S YB U","2":"C N"},C:{"1":"0 1 2 3 4 5 6 7 8 9 j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z"},E:{"1":"N D Q mB nB","2":"G Y O F H E A B C dB WB fB gB hB iB XB T"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V T ZB tB Q","2":"E I J oB pB qB rB"},G:{"2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B","129":"D 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:1,C:"Color input type"};

  var inputDatetime={A:{A:{"2":"O F H E A B lB"},B:{"1":"N D I J K L KB P M R S YB U","132":"C"},C:{"2":"0 1 2 3 4 5 6 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB","1090":"7 8 9 AB","2052":"BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"1":"0 1 2 3 4 5 6 7 8 9 f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z","2052":"a b c d e"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB","4100":"nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"WB uB aB","260":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M HC IC","2":"bB DC EC FC","514":"G GC aB"},J:{"1":"A","2":"F"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"2052":"jB"}},B:1,C:"Date and time input types"};

  var inputEmailTelUrl={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G"},E:{"1":"Y O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"G dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q","2":"E"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"bB G M GC aB HC IC","132":"DC EC FC"},J:{"1":"A","132":"F"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Email, telephone & URL input types"};

  var inputEvent={A:{A:{"2":"O F H lB","2561":"A B","2692":"E"},B:{"1":"KB P M R S YB U","2561":"C N D I J K L"},C:{"1":"3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","16":"eB","1537":"0 1 2 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z sB","1796":"bB kB"},D:{"1":"X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","16":"G Y O F H E A B C N D","1025":"0 1 2 3 4 5 6 7 8 9 p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB","1537":"I J K L Z a b c d e f g h i j k l m n o"},E:{"1":"D mB nB","16":"G Y O dB WB","1025":"F H E A B C gB hB iB XB T","1537":"fB","4097":"N Q"},F:{"1":"6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V Q","16":"E B C oB pB qB rB T ZB","260":"tB","1025":"0 1 2 3 4 5 c d e f g h i j k l m n o p q r s t u v w x y z","1537":"I J K L Z a b"},G:{"16":"WB uB aB","1025":"H D zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","1537":"TC xB yB"},H:{"2":"CC"},I:{"16":"DC EC","1025":"M IC","1537":"bB G FC GC aB HC"},J:{"1025":"A","1537":"F"},K:{"1":"A B C T ZB Q","1025":"DB"},L:{"1":"U"},M:{"1537":"OB"},N:{"2561":"A B"},O:{"1537":"JC"},P:{"1025":"G KC LC MC NC OC XB PC QC"},Q:{"1025":"RC"},R:{"1025":"SC"},S:{"1537":"jB"}},B:1,C:"input event"};

  var inputFileAccept={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB","132":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q"},D:{"1":"0 1 2 3 4 5 6 7 8 9 g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G","16":"Y O F H b c d e f","132":"E A B C N D I J K L Z a"},E:{"1":"C N D T Q mB nB","2":"G Y dB WB fB","132":"O F H E A B gB hB iB XB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"2":"xB yB","132":"H D zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","514":"WB uB aB TC"},H:{"2":"CC"},I:{"2":"DC EC FC","260":"bB G GC aB","514":"M HC IC"},J:{"132":"A","260":"F"},K:{"2":"A B C T ZB Q","260":"DB"},L:{"260":"U"},M:{"2":"OB"},N:{"514":"A","1028":"B"},O:{"2":"JC"},P:{"260":"G KC LC MC NC OC XB PC QC"},Q:{"260":"RC"},R:{"260":"SC"},S:{"1":"jB"}},B:1,C:"accept attribute for file input"};

  var inputFileDirectory={A:{A:{"2":"O F H E A B lB"},B:{"1":"D I J K L KB P M R S YB U","2":"C N"},C:{"1":"4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j"},E:{"1":"C N D T Q mB nB","2":"G Y O F H E A B dB WB fB gB hB iB XB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:7,C:"Directory selection from file input"};

  var inputFileMultiple={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S sB","2":"eB bB kB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G"},E:{"1":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V rB T ZB tB Q","2":"E oB pB qB"},G:{"1":"H D xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC"},H:{"130":"CC"},I:{"130":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"130":"A B C DB T ZB Q"},L:{"132":"U"},M:{"130":"OB"},N:{"2":"A B"},O:{"130":"JC"},P:{"130":"G","132":"KC LC MC NC OC XB PC QC"},Q:{"132":"RC"},R:{"132":"SC"},S:{"2":"jB"}},B:1,C:"Multiple file selection"};

  var inputInputmode={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"2":"eB bB G Y O F H E A B C N D I J kB sB","4":"K L Z a","194":"0 1 2 3 4 5 6 7 8 9 b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"1":"X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","66":"AB BB CB DB EB PB GB HB IB JB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w oB pB qB rB T ZB tB Q","66":"0 1 2 3 4 5 6 x y z"},G:{"1":"D 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"194":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"OC XB PC QC","2":"G KC LC MC NC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"194":"jB"}},B:1,C:"inputmode attribute"};

  var inputMinlength={A:{A:{"2":"O F H E A B lB"},B:{"1":"K L KB P M R S YB U","2":"C N D I J"},C:{"1":"5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t"},E:{"1":"B C N D XB T Q mB nB","2":"G Y O F H E A dB WB fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g oB pB qB rB T ZB tB Q"},G:{"1":"D 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:1,C:"Minimum length attribute for input fields"};

  var inputNumber={A:{A:{"2":"O F H E lB","129":"A B"},B:{"1":"KB P M R S YB U","129":"C N","1025":"D I J K L"},C:{"2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i kB sB","513":"0 1 2 3 4 5 6 7 8 9 j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"1":"0 1 2 3 4 5 6 7 8 9 O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y"},E:{"1":"Y O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"G dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"388":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB DC EC FC","388":"G M GC aB HC IC"},J:{"2":"F","388":"A"},K:{"1":"A B C T ZB Q","388":"DB"},L:{"388":"U"},M:{"641":"OB"},N:{"388":"A B"},O:{"388":"JC"},P:{"388":"G KC LC MC NC OC XB PC QC"},Q:{"388":"RC"},R:{"388":"SC"},S:{"513":"jB"}},B:1,C:"Number input type"};

  var inputPattern={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E"},E:{"1":"B C N D XB T Q mB nB","2":"G dB WB","16":"Y","388":"O F H E A fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q","2":"E"},G:{"1":"D 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB uB aB","388":"H TC xB yB zB 0B 1B 2B"},H:{"2":"CC"},I:{"1":"M IC","2":"bB G DC EC FC GC aB HC"},J:{"1":"A","2":"F"},K:{"1":"A B C T ZB Q","132":"DB"},L:{"1":"U"},M:{"1":"OB"},N:{"132":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Pattern attribute for input fields"};

  var inputPlaceholder={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"Y O F H E A B C N D fB gB hB iB XB T Q mB nB","132":"G dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V ZB tB Q","2":"E oB pB qB rB","132":"B T"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"1":"CC"},I:{"1":"bB M DC EC FC aB HC IC","4":"G GC"},J:{"1":"F A"},K:{"1":"B C DB T ZB Q","2":"A"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"input placeholder attribute"};

  var inputRange={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB"},H:{"2":"CC"},I:{"1":"M aB HC IC","4":"bB G DC EC FC GC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Range input type"};

  var inputSearch={A:{A:{"2":"O F H E lB","129":"A B"},B:{"1":"KB P M R S YB U","129":"C N D I J K L"},C:{"2":"eB bB kB sB","129":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"1":"0 1 2 3 4 5 6 7 8 9 g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","16":"G Y O F H E A B C N D b c d e f","129":"I J K L Z a"},E:{"1":"O F H E A B C N D fB gB hB iB XB T Q mB nB","16":"G Y dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V tB Q","2":"E oB pB qB rB","16":"B T ZB"},G:{"1":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB uB aB"},H:{"129":"CC"},I:{"1":"M HC IC","16":"DC EC","129":"bB G FC GC aB"},J:{"1":"F","129":"A"},K:{"1":"C","2":"A","16":"B T ZB","129":"DB Q"},L:{"1":"U"},M:{"129":"OB"},N:{"129":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"129":"jB"}},B:1,C:"Search input type"};

  var inputSelection={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB","16":"dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V rB T ZB tB Q","16":"E oB pB qB"},G:{"1":"H D uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB"},H:{"2":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Selection controls for input & textarea"};

  var insertAdjacent={A:{A:{"1":"O F H E A B","16":"lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"2 3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q","16":"E"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"1":"CC"},I:{"1":"bB G M FC GC aB HC IC","16":"DC EC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Element.insertAdjacentElement() & Element.insertAdjacentText()"};

  var insertadjacenthtml={A:{A:{"1":"A B","16":"lB","132":"O F H E"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V pB qB rB T ZB tB Q","16":"E oB"},G:{"1":"H D uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB"},H:{"1":"CC"},I:{"1":"bB G M FC GC aB HC IC","16":"DC EC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"Element.insertAdjacentHTML()"};

  var internationalization={A:{A:{"1":"B","2":"O F H E A lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d"},E:{"1":"A B C N D XB T Q mB nB","2":"G Y O F H E dB WB fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"1":"D 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B"},H:{"2":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"B","2":"A"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:6,C:"Internationalization API"};

  var intersectionobserverV2={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"GB HB IB JB X LB MB NB FB W V","2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"PC QC","2":"G KC LC MC NC OC XB"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:7,C:"IntersectionObserver V2"};

  var intersectionobserver={A:{A:{"2":"O F H E A B lB"},B:{"1":"J K L","2":"C N D","516":"I","1025":"KB P M R S YB U"},C:{"1":"9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB","194":"6 7 8"},D:{"1":"CB DB EB PB GB HB IB","2":"0 1 2 3 4 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","516":"5 6 7 8 9 AB BB","1025":"JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"N D Q mB nB","2":"G Y O F H E A B C dB WB fB gB hB iB XB T"},F:{"1":"0 1 2 3 4 5 6 7 8 9 z AB BB CB EB GB HB","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r oB pB qB rB T ZB tB Q","516":"s t u v w x y","1025":"IB JB X LB MB NB FB W V"},G:{"1":"D 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B"},H:{"2":"CC"},I:{"2":"bB G DC EC FC GC aB HC IC","1025":"M"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"516":"JC"},P:{"1":"MC NC OC XB PC QC","2":"G","516":"KC LC"},Q:{"1025":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"IntersectionObserver"};

  var intlPluralrules={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K","130":"L"},C:{"1":"CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB kB sB"},D:{"1":"HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB"},E:{"1":"N D mB nB","2":"G Y O F H E A B C dB WB fB gB hB iB XB T Q"},F:{"1":"4 5 6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"0 1 2 3 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q"},G:{"1":"D 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"NC OC XB PC QC","2":"G KC LC MC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:6,C:"Intl.PluralRules API"};

  var intrinsicWidth={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L","1537":"KB P M R S YB U"},C:{"2":"eB","932":"0 1 2 3 4 5 6 7 8 9 bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB kB sB","2308":"X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"2":"G Y O F H E A B C N D I J K L Z a b","545":"c d e f g h i j k l m n o p q r s t u v w x y z","1537":"0 1 2 3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O dB WB fB","516":"B C N D T Q mB nB","548":"E A iB XB","676":"F H gB hB"},F:{"2":"E B C oB pB qB rB T ZB tB Q","513":"o","545":"I J K L Z a b c d e f g h i j k l m","1537":"0 1 2 3 4 5 6 7 8 9 n p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"2":"WB uB aB TC xB","548":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","676":"H yB zB"},H:{"2":"CC"},I:{"2":"bB G DC EC FC GC aB","545":"HC IC","1537":"M"},J:{"2":"F","545":"A"},K:{"2":"A B C T ZB Q","1537":"DB"},L:{"1537":"U"},M:{"2340":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"545":"G","1537":"KC LC MC NC OC XB PC QC"},Q:{"545":"RC"},R:{"1537":"SC"},S:{"932":"jB"}},B:5,C:"Intrinsic & Extrinsic Sizing"};

  var jpeg2000={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"O F H E A B C N D gB hB iB XB T Q mB nB","2":"G dB WB","129":"Y fB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:6,C:"JPEG 2000 image format"};

  var jpegxr={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"C N D I J K L","2":"KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"1":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:6,C:"JPEG XR image format"};

  var jsRegexpLookbehind={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"UB KB P M OB R S","2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB kB sB"},D:{"1":"GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"3 4 5 6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"0 1 2 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"NC OC XB PC QC","2":"G KC LC MC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:6,C:"Lookbehind in JS regular expressions"};

  var json={A:{A:{"1":"E A B","2":"O F lB","129":"H"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","2":"eB bB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V qB rB T ZB tB Q","2":"E oB pB"},G:{"1":"H D uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB"},H:{"1":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:6,C:"JSON parsing"};

  var justifyContentSpaceEvenly={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I","132":"J K L"},C:{"1":"6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB"},D:{"1":"EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB","132":"BB CB DB"},E:{"1":"B C N D T Q mB nB","2":"G Y O F H E A dB WB fB gB hB iB","132":"XB"},F:{"1":"1 2 3 4 5 6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x oB pB qB rB T ZB tB Q","132":"0 y z"},G:{"1":"D 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B","132":"3B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"132":"JC"},P:{"1":"NC OC XB PC QC","2":"G KC LC","132":"MC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"132":"jB"}},B:5,C:"CSS justify-content: space-evenly"};

  var kerningPairsLigatures={A:{A:{"2":"O F H E A B lB"},B:{"1":"L KB P M R S YB U","2":"C N D I J K"},C:{"1":"0 1 2 3 4 5 6 7 8 9 bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","2":"eB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"Y O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"G dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"1":"H D aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB uB"},H:{"2":"CC"},I:{"1":"M HC IC","2":"DC EC FC","132":"bB G GC aB"},J:{"1":"A","2":"F"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:7,C:"High-quality kerning pairs & ligatures"};

  var keyboardeventCharcode={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","16":"eB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB","16":"dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V Q","2":"E B oB pB qB rB T ZB tB","16":"C"},G:{"1":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB uB aB"},H:{"2":"CC"},I:{"1":"bB G M FC GC aB HC IC","16":"DC EC"},J:{"1":"F A"},K:{"1":"Q","2":"A B T ZB","16":"C","130":"DB"},L:{"1":"U"},M:{"130":"OB"},N:{"130":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:7,C:"KeyboardEvent.charCode"};

  var keyboardeventCode={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r kB sB"},D:{"1":"2 3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v","194":"0 1 w x y z"},E:{"1":"B C N D XB T Q mB nB","2":"G Y O F H E A dB WB fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i oB pB qB rB T ZB tB Q","194":"j k l m n o"},G:{"1":"D 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C T ZB Q","194":"DB"},L:{"194":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G","194":"KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"194":"SC"},S:{"1":"jB"}},B:5,C:"KeyboardEvent.code"};

  var keyboardeventGetmodifierstate={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j"},E:{"1":"B C N D XB T Q mB nB","2":"G Y O F H E A dB WB fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V Q","2":"E B I J oB pB qB rB T ZB tB","16":"C"},G:{"1":"D 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B"},H:{"2":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"2":"F A"},K:{"1":"DB Q","2":"A B T ZB","16":"C"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:5,C:"KeyboardEvent.getModifierState()"};

  var keyboardeventKey={A:{A:{"2":"O F H lB","260":"E A B"},B:{"1":"KB P M R S YB U","260":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c kB sB","132":"d e f g h i"},D:{"1":"5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},E:{"1":"B C N D XB T Q mB nB","2":"G Y O F H E A dB WB fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V Q","2":"E B I J K L Z a b c d e f g h i j k l m n o p q r oB pB qB rB T ZB tB","16":"C"},G:{"1":"D 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B"},H:{"1":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"Q","2":"A B T ZB","16":"C DB"},L:{"1":"U"},M:{"1":"OB"},N:{"260":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"2":"RC"},R:{"2":"SC"},S:{"1":"jB"}},B:5,C:"KeyboardEvent.key"};

  var keyboardeventLocation={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","132":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j"},E:{"1":"F H E A B C N D gB hB iB XB T Q mB nB","16":"O dB WB","132":"G Y fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V Q","2":"E B oB pB qB rB T ZB tB","16":"C","132":"I J"},G:{"1":"H D zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB uB aB","132":"TC xB yB"},H:{"2":"CC"},I:{"1":"M HC IC","16":"DC EC","132":"bB G FC GC aB"},J:{"132":"F A"},K:{"1":"DB Q","2":"A B T ZB","16":"C"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:5,C:"KeyboardEvent.location"};

  var keyboardeventWhich={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"G dB WB","16":"Y"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V pB qB rB T ZB tB Q","16":"E oB"},G:{"1":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB uB aB"},H:{"2":"CC"},I:{"1":"bB G M FC GC aB","16":"DC EC","132":"HC IC"},J:{"1":"F A"},K:{"1":"A B C T ZB Q","132":"DB"},L:{"132":"U"},M:{"132":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"2":"G","132":"KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"132":"SC"},S:{"1":"jB"}},B:7,C:"KeyboardEvent.which"};

  var lazyload={A:{A:{"1":"B","2":"O F H E A lB"},B:{"1":"C N D I J K L","2":"KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"1":"B","2":"A"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:7,C:"Resource Hints: Lazyload"};

  var _let={A:{A:{"2":"O F H E A lB","2052":"B"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","194":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x kB sB"},D:{"1":"3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L","322":"Z a b c d e f g h i j k l m n o p q r s t u","516":"0 1 2 v w x y z"},E:{"1":"B C N D T Q mB nB","2":"G Y O F H E dB WB fB gB hB iB","1028":"A XB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q","322":"I J K L Z a b c d e f g h","516":"i j k l m n o p"},G:{"1":"D 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B","1028":"2B 3B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"B","2":"A"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","516":"G"},Q:{"1":"RC"},R:{"516":"SC"},S:{"1":"jB"}},B:6,C:"let"};

  var linkIconPng={A:{A:{"1":"B","2":"O F H E A lB"},B:{"1":"C N D I J K L","129":"KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"129":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"257":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"129":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","513":"E B C oB pB qB rB T ZB tB Q"},G:{"1026":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"1026":"CC"},I:{"1":"bB G DC EC FC GC aB","513":"M HC IC"},J:{"1":"F","1026":"A"},K:{"1026":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1026":"A B"},O:{"257":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","513":"G"},Q:{"129":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"PNG favicons"};

  var linkIconSvg={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB","3073":"P M R S YB U"},C:{"2":"eB bB kB sB","260":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u","1025":"0 1 2 3 4 5 6 7 8 9 v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB","3073":"P M R S YB U vB wB cB"},E:{"2":"G Y O F H dB WB fB gB hB","516":"E A B C N D iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 y z","2":"8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x AB BB CB EB GB HB IB JB X oB pB qB rB T ZB tB Q","3073":"LB MB NB FB W V"},G:{"130":"H WB uB aB TC xB yB zB","516":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"130":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F","130":"A"},K:{"130":"A B C DB T ZB Q"},L:{"3073":"U"},M:{"2":"OB"},N:{"130":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"1025":"jB"}},B:1,C:"SVG favicons"};

  var linkRelDnsPrefetch={A:{A:{"1":"A B","2":"O F H lB","132":"E"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"2":"eB bB","260":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"Y O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"G dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"16":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"16":"bB G M DC EC FC GC aB HC IC"},J:{"16":"F A"},K:{"16":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"B","2":"A"},O:{"16":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","16":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:5,C:"Resource Hints: dns-prefetch"};

  var linkRelModulepreload={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"0 1 2 3 4 5 6 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"OC XB PC QC","2":"G KC LC MC NC"},Q:{"16":"RC"},R:{"16":"SC"},S:{"2":"jB"}},B:1,C:"Resource Hints: modulepreload"};

  var linkRelPreconnect={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D","260":"I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s W V VB QB RB SB TB UB KB P M OB R S kB sB","129":"t"},D:{"1":"0 1 2 3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},E:{"1":"C N D T Q mB nB","2":"G Y O F H E A B dB WB fB gB hB iB XB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m oB pB qB rB T ZB tB Q"},G:{"1":"D 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"16":"OB"},N:{"2":"A B"},O:{"16":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:5,C:"Resource Hints: preconnect"};

  var linkRelPrefetch={A:{A:{"1":"B","2":"O F H E A lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F"},E:{"2":"G Y O F H E A B C N dB WB fB gB hB iB XB T Q","194":"D mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC","194":"D BC"},H:{"2":"CC"},I:{"1":"G M HC IC","2":"bB DC EC FC GC aB"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"B","2":"A"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:5,C:"Resource Hints: prefetch"};

  var linkRelPreload={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J","1028":"K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB","132":"AB","578":"BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"1":"4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},E:{"1":"C N D T Q mB nB","2":"G Y O F H E A dB WB fB gB hB iB XB","322":"B"},F:{"1":"0 1 2 3 4 5 6 7 8 9 r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q oB pB qB rB T ZB tB Q"},G:{"1":"D 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B","322":"4B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"578":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:4,C:"Resource Hints: preload"};

  var linkRelPrerender={A:{A:{"1":"B","2":"O F H E A lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"2":"OB"},N:{"1":"B","2":"A"},O:{"2":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:5,C:"Resource Hints: prerender"};

  var loadingLazyAttr={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB kB sB","132":"RB SB TB UB KB P M OB R S"},D:{"1":"TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB","66":"RB SB"},E:{"2":"G Y O F H E A B C N dB WB fB gB hB iB XB T Q","322":"D mB nB"},F:{"1":"IB JB X LB MB NB FB W V","2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB oB pB qB rB T ZB tB Q","66":"GB HB"},G:{"2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC","322":"D BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"132":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"QC","2":"G KC LC MC NC OC XB PC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:1,C:"Lazy loading via attribute for images & iframes"};

  var localecompare={A:{A:{"1":"B","16":"lB","132":"O F H E A"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","132":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","132":"G Y O F H E A B C N D I J K L Z a b c d"},E:{"1":"A B C N D XB T Q mB nB","132":"G Y O F H E dB WB fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","16":"E B C oB pB qB rB T ZB tB","132":"Q"},G:{"1":"D 2B 3B 4B 5B 6B 7B 8B 9B AC BC","132":"H WB uB aB TC xB yB zB 0B 1B"},H:{"132":"CC"},I:{"1":"M HC IC","132":"bB G DC EC FC GC aB"},J:{"132":"F A"},K:{"1":"DB","16":"A B C T ZB","132":"Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"B","132":"A"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","132":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"4":"jB"}},B:6,C:"localeCompare()"};

  var magnetometer={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB","194":"CB DB EB PB GB HB IB JB X"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"0 1 2 3 4 5 6 7 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"194":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:4,C:"Magnetometer"};

  var matchesselector={A:{A:{"2":"O F H lB","36":"E A B"},B:{"1":"I J K L KB P M R S YB U","36":"C N D"},C:{"1":"0 1 2 3 4 5 6 7 8 9 o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB","36":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","36":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n"},E:{"1":"H E A B C N D hB iB XB T Q mB nB","2":"G dB WB","36":"Y O F fB gB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B oB pB qB rB T","36":"C I J K L Z a ZB tB Q"},G:{"1":"H D zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB","36":"uB aB TC xB yB"},H:{"2":"CC"},I:{"1":"M","2":"DC","36":"bB G EC FC GC aB HC IC"},J:{"36":"F A"},K:{"1":"DB","2":"A B","36":"C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"36":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","36":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"matches() DOM method"};

  var matchmedia={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H"},E:{"1":"O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"G Y dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V Q","2":"E B C oB pB qB rB T ZB tB"},G:{"1":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB"},H:{"1":"CC"},I:{"1":"bB G M GC aB HC IC","2":"DC EC FC"},J:{"1":"A","2":"F"},K:{"1":"DB Q","2":"A B C T ZB"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:5,C:"matchMedia"};

  var mathml={A:{A:{"2":"E A B lB","8":"O F H"},B:{"2":"C N D I J K L","8":"KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","129":"eB bB kB sB"},D:{"1":"e","8":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"A B C N D XB T Q mB nB","260":"G Y O F H E dB WB fB gB hB iB"},F:{"2":"E","4":"B C oB pB qB rB T ZB tB Q","8":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"1":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","8":"WB uB aB"},H:{"8":"CC"},I:{"8":"bB G M DC EC FC GC aB HC IC"},J:{"1":"A","8":"F"},K:{"8":"A B C DB T ZB Q"},L:{"8":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"4":"JC"},P:{"8":"G KC LC MC NC OC XB PC QC"},Q:{"8":"RC"},R:{"8":"SC"},S:{"1":"jB"}},B:2,C:"MathML"};

  var maxlength={A:{A:{"1":"A B","16":"lB","900":"O F H E"},B:{"1":"KB P M R S YB U","1025":"C N D I J K L"},C:{"1":"5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","900":"eB bB kB sB","1025":"0 1 2 3 4 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"O F H E A B C N D fB gB hB iB XB T Q mB nB","16":"Y dB","900":"G WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","16":"E","132":"B C oB pB qB rB T ZB tB Q"},G:{"1":"D uB aB TC xB yB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB","2052":"H zB"},H:{"132":"CC"},I:{"1":"bB G FC GC aB HC IC","16":"DC EC","4097":"M"},J:{"1":"F A"},K:{"132":"A B C T ZB Q","4100":"DB"},L:{"4097":"U"},M:{"4097":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"4097":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1025":"jB"}},B:1,C:"maxlength attribute for input and textarea elements"};

  var mediaAttribute={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"C N D I J K L","16":"KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D kB sB"},D:{"1":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n","2":"0 1 2 3 4 5 6 7 8 9 o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U","16":"vB wB cB"},E:{"1":"O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"G Y dB WB"},F:{"1":"B C I J K L Z a b c d e pB qB rB T ZB tB Q","2":"0 1 2 3 4 5 6 7 8 9 E f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB"},G:{"1":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB uB aB"},H:{"16":"CC"},I:{"1":"G M GC aB HC IC","16":"bB DC EC FC"},J:{"16":"F A"},K:{"1":"C DB Q","16":"A B T ZB"},L:{"1":"U"},M:{"1":"OB"},N:{"16":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Media attribute"};

  var mediaFragments={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L","132":"KB P M R S YB U"},C:{"2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n kB sB","132":"0 1 2 3 4 5 6 7 8 9 o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"2":"G Y O F H E A B C N D I J K","132":"0 1 2 3 4 5 6 7 8 9 L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y dB WB fB","132":"O F H E A B C N D gB hB iB XB T Q mB nB"},F:{"2":"E B C oB pB qB rB T ZB tB Q","132":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"2":"WB uB aB TC xB yB","132":"H D zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G DC EC FC GC aB","132":"M HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"132":"U"},M:{"132":"OB"},N:{"132":"A B"},O:{"2":"JC"},P:{"2":"G KC","132":"LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"132":"jB"}},B:2,C:"Media Fragments"};

  var mediaSessionApi={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB"},E:{"2":"G Y O F H E A B C N dB WB fB gB hB iB XB T Q","16":"D mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:6,C:"Media Session API"};

  var mediacaptureFromelement={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w kB sB","260":"0 1 2 3 4 5 6 7 8 9 x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"1":"GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","324":"5 6 7 8 9 AB BB CB DB EB PB"},E:{"2":"G Y O F H E A dB WB fB gB hB iB XB","132":"B C N D T Q mB nB"},F:{"1":"2 3 4 5 6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p oB pB qB rB T ZB tB Q","324":"0 1 q r s t u v w x y z"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"260":"OB"},N:{"2":"A B"},O:{"132":"JC"},P:{"1":"NC OC XB PC QC","2":"G","132":"KC LC MC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"260":"jB"}},B:5,C:"Media Capture from DOM Elements API"};

  var mediarecorder={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i kB sB"},D:{"1":"3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","194":"1 2"},E:{"1":"nB","2":"G Y O F H E A B C dB WB fB gB hB iB XB T","322":"N D Q mB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n oB pB qB rB T ZB tB Q","194":"o p"},G:{"2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B","578":"D 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"1":"RC"},R:{"2":"SC"},S:{"1":"jB"}},B:5,C:"MediaRecorder API"};

  var mediasource={A:{A:{"2":"O F H E A lB","132":"B"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e kB sB","66":"f g h i j k l m n o p q r s t u v"},D:{"1":"0 1 2 3 4 5 6 7 8 9 l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J","33":"d e f g h i j k","66":"K L Z a b c"},E:{"1":"H E A B C N D iB XB T Q mB nB","2":"G Y O F dB WB fB gB hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B","260":"D 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M IC","2":"bB G DC EC FC GC aB HC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"B","2":"A"},O:{"1":"JC"},P:{"1":"OC XB PC QC","2":"G KC LC MC NC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:2,C:"Media Source Extensions"};

  var menu={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L","2114":"KB P M R S YB U"},C:{"2":"eB bB G Y O F kB sB","132":"0 1 2 3 4 5 6 7 8 9 H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u","322":"2 3 4 5","578":"0 1 v w x y z","2114":"6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"E B C I J K L Z a b c d e f g h i j k l m n o oB pB qB rB T ZB tB Q","322":"p q r s","2114":"0 1 2 3 4 5 6 7 8 9 t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"1156":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2114":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:7,C:"Context menu item (menuitem element)"};

  var metaThemeColor={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s","132":"VB QB RB SB TB UB KB P M R S YB U vB wB cB","258":"0 1 2 3 4 5 6 7 8 9 t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"513":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"LC MC NC OC XB PC QC","2":"G","16":"KC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:1,C:"theme-color Meta Tag"};

  var meter={A:{A:{"2":"O F H E A B lB"},B:{"1":"N D I J K L KB P M R S YB U","2":"C"},C:{"1":"0 1 2 3 4 5 6 7 8 9 J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F"},E:{"1":"O F H E A B C N D gB hB iB XB T Q mB nB","2":"G Y dB WB fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V T ZB tB Q","2":"E oB pB qB rB"},G:{"1":"D 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B"},H:{"1":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"1":"F A"},K:{"1":"B C DB T ZB Q","2":"A"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"meter element"};

  var midi={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:5,C:"Web MIDI API"};

  var minmaxwh={A:{A:{"1":"E A B","8":"O lB","129":"F","257":"H"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"1":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:2,C:"CSS min/max-width/height"};

  var mp3={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB","132":"G Y O F H E A B C N D I J K L Z a b kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"1":"H D uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB"},H:{"2":"CC"},I:{"1":"bB G M FC GC aB HC IC","2":"DC EC"},J:{"1":"F A"},K:{"1":"B C DB T ZB Q","2":"A"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:6,C:"MP3 audio format"};

  var mpegDash={A:{A:{"2":"O F H E A B lB"},B:{"1":"C N D I J K L","2":"KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","386":"b c"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:6,C:"Dynamic Adaptive Streaming over HTTP (MPEG-DASH)"};

  var mpeg4={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a kB sB","4":"b c d e f g h i j k l m n o"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D WB fB gB hB iB XB T Q mB nB","2":"dB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e oB pB qB rB T ZB tB Q"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M HC IC","4":"bB G DC EC GC aB","132":"FC"},J:{"1":"F A"},K:{"1":"B C DB T ZB Q","2":"A"},L:{"1":"U"},M:{"260":"OB"},N:{"1":"A B"},O:{"4":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:6,C:"MPEG-4/H.264 video format"};

  var multibackgrounds={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S sB","2":"eB bB kB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V qB rB T ZB tB Q","2":"E oB pB"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"1":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"CSS3 Multiple backgrounds"};

  var multicolumn={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L","516":"KB P M R S YB U"},C:{"132":"6 7 8 9 AB BB CB DB EB PB GB HB IB","164":"0 1 2 3 4 5 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB","516":"JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"420":"0 1 2 3 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","516":"4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"A B C N D XB T Q mB nB","132":"E iB","164":"F H hB","420":"G Y O dB WB fB gB"},F:{"1":"C T ZB tB Q","2":"E B oB pB qB rB","420":"I J K L Z a b c d e f g h i j k l m n o p q","516":"0 1 2 3 4 5 6 7 8 9 r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"1":"D 2B 3B 4B 5B 6B 7B 8B 9B AC BC","132":"0B 1B","164":"H yB zB","420":"WB uB aB TC xB"},H:{"1":"CC"},I:{"420":"bB G DC EC FC GC aB HC IC","516":"M"},J:{"420":"F A"},K:{"1":"C T ZB Q","2":"A B","516":"DB"},L:{"516":"U"},M:{"132":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","420":"G"},Q:{"132":"RC"},R:{"132":"SC"},S:{"164":"jB"}},B:4,C:"CSS3 Multiple column layout"};

  var mutationEvents={A:{A:{"2":"O F H lB","260":"E A B"},B:{"132":"KB P M R S YB U","260":"C N D I J K L"},C:{"2":"eB bB G Y kB sB","260":"0 1 2 3 4 5 6 7 8 9 O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"16":"G Y O F H E A B C N D","132":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"16":"dB WB","132":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB"},F:{"1":"C tB Q","2":"E oB pB qB rB","16":"B T ZB","132":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"16":"WB uB","132":"H D aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"16":"DC EC","132":"bB G M FC GC aB HC IC"},J:{"132":"F A"},K:{"1":"C Q","2":"A","16":"B T ZB","132":"DB"},L:{"132":"U"},M:{"260":"OB"},N:{"260":"A B"},O:{"132":"JC"},P:{"132":"G KC LC MC NC OC XB PC QC"},Q:{"132":"RC"},R:{"132":"SC"},S:{"260":"jB"}},B:5,C:"Mutation events"};

  var mutationobserver={A:{A:{"1":"B","2":"O F H lB","8":"E A"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K","33":"L Z a b c d e f g"},E:{"1":"F H E A B C N D gB hB iB XB T Q mB nB","2":"G Y dB WB fB","33":"O"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"1":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC","33":"xB"},H:{"2":"CC"},I:{"1":"M HC IC","2":"bB DC EC FC","8":"G GC aB"},J:{"1":"A","2":"F"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"B","8":"A"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Mutation Observer"};

  var namevalueStorage={A:{A:{"1":"H E A B","2":"lB","8":"O F"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","4":"eB bB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V qB rB T ZB tB Q","2":"E oB pB"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"B C DB T ZB Q","2":"A"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Web Storage - name/value pairs"};

  var nativeFilesystemApi={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L","194":"KB P M R S YB","260":"U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB","194":"QB RB SB TB UB KB P M R S YB","260":"U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB oB pB qB rB T ZB tB Q","194":"GB HB IB JB X LB MB NB FB W","260":"V"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:7,C:"File System Access API"};

  var navTiming={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y","33":"O F H E A B C"},E:{"1":"H E A B C N D iB XB T Q mB nB","2":"G Y O F dB WB fB gB hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"1":"H D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC xB yB zB"},H:{"2":"CC"},I:{"1":"G M GC aB HC IC","2":"bB DC EC FC"},J:{"1":"A","2":"F"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:2,C:"Navigation Timing API"};

  var navigatorLanguage={A:{A:{"2":"O F H E A B lB"},B:{"1":"J K L KB P M R S YB U","2":"C N D I"},C:{"1":"0 1 2 3 4 5 6 7 8 9 m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q"},E:{"1":"A B C N D XB T Q mB nB","2":"G Y O F H E dB WB fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d oB pB qB rB T ZB tB Q"},G:{"1":"D 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B"},H:{"16":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"16":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"16":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"16":"RC"},R:{"16":"SC"},S:{"1":"jB"}},B:2,C:"Navigator Language API"};

  var netinfo={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L","1028":"KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB","1028":"PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q","1028":"2 3 4 5 6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"DC HC IC","132":"bB G EC FC GC aB"},J:{"2":"F A"},K:{"2":"A B C T ZB Q","516":"DB"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"NC OC XB PC QC","132":"G","516":"KC LC MC"},Q:{"1":"RC"},R:{"516":"SC"},S:{"260":"jB"}},B:7,C:"Network Information API"};

  var nodeContains={A:{A:{"16":"lB","644":"E A B","2308":"O F H"},B:{"1":"N D I J K L KB P M R S YB U","16":"C"},C:{"1":"0 1 2 3 4 5 6 7 8 9 E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","16":"G Y O F H E A B C N D I J K L Z a b c d e f"},E:{"1":"F H E A B C N D gB hB iB XB T Q mB nB","16":"G Y O dB WB","1668":"fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V Q","16":"E B C oB pB qB rB T ZB","132":"tB"},G:{"1":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB uB aB TC xB"},H:{"16":"CC"},I:{"1":"M HC IC","16":"bB DC EC FC","1668":"G GC aB"},J:{"16":"F A"},K:{"16":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"16":"A B"},O:{"16":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","16":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Node.contains()"};

  var nodeParentelement={A:{A:{"16":"lB","132":"E A B","260":"O F H"},B:{"1":"N D I J K L KB P M R S YB U","16":"C"},C:{"1":"0 1 2 3 4 5 6 7 8 9 E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","16":"G Y O F H E A B C N D I J K L Z a b c d e f"},E:{"1":"O F H E A B C N D fB gB hB iB XB T Q mB nB","16":"G Y dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","16":"E B oB pB qB rB T ZB","132":"C tB Q"},G:{"1":"H D xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB uB aB TC"},H:{"16":"CC"},I:{"1":"G M GC aB HC IC","16":"bB DC EC FC"},J:{"16":"F A"},K:{"16":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"16":"A B"},O:{"16":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","16":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Node.parentElement"};

  var notifications={A:{A:{"2":"O F H E A B lB"},B:{"1":"D I J K L KB P M R S YB U","2":"C N"},C:{"1":"0 1 2 3 4 5 6 7 8 9 c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G","36":"Y O F H E A B C N D I J K L Z a b"},E:{"1":"O F H E A B C N D gB hB iB XB T Q mB nB","2":"G Y dB WB fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G DC EC FC GC aB","36":"M HC IC"},J:{"1":"A","2":"F"},K:{"2":"A B C T ZB Q","36":"DB"},L:{"513":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"36":"G","258":"KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"258":"SC"},S:{"1":"jB"}},B:1,C:"Web Notifications"};

  var objectEntries={A:{A:{"2":"O F H E A B lB"},B:{"1":"D I J K L KB P M R S YB U","2":"C N"},C:{"1":"1 2 3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB"},D:{"1":"8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},E:{"1":"B C N D XB T Q mB nB","2":"G Y O F H E A dB WB fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u oB pB qB rB T ZB tB Q"},G:{"1":"D 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F","16":"A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"LC MC NC OC XB PC QC","2":"G KC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"1":"jB"}},B:6,C:"Object.entries"};

  var objectFit={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I","260":"J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k"},E:{"1":"A B C N D XB T Q mB nB","2":"G Y O F dB WB fB gB","132":"H E hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E I J K L oB pB qB","33":"B C rB T ZB tB Q"},G:{"1":"D 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC xB yB","132":"H zB 0B 1B"},H:{"33":"CC"},I:{"1":"M IC","2":"bB G DC EC FC GC aB HC"},J:{"2":"F A"},K:{"1":"DB","2":"A","33":"B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"CSS3 object-fit/object-position"};

  var objectObserve={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 q r s t u v w x y z","2":"4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"d e f g h i j k l m n o p q","2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"G","2":"KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:7,C:"Object.observe data binding"};

  var objectValues={A:{A:{"8":"O F H E A B lB"},B:{"1":"D I J K L KB P M R S YB U","2":"C N"},C:{"1":"1 2 3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","8":"0 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB"},D:{"1":"8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","8":"0 1 2 3 4 5 6 7 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},E:{"1":"B C N D XB T Q mB nB","8":"G Y O F H E A dB WB fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","8":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u oB pB qB rB T ZB tB Q"},G:{"1":"D 3B 4B 5B 6B 7B 8B 9B AC BC","8":"H WB uB aB TC xB yB zB 0B 1B 2B"},H:{"8":"CC"},I:{"1":"M","8":"bB G DC EC FC GC aB HC IC"},J:{"8":"F A"},K:{"1":"DB","8":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"8":"A B"},O:{"1":"JC"},P:{"1":"LC MC NC OC XB PC QC","8":"G KC"},Q:{"1":"RC"},R:{"8":"SC"},S:{"1":"jB"}},B:6,C:"Object.values method"};

  var objectrtc={A:{A:{"2":"O F H E A B lB"},B:{"1":"N D I J K L","2":"C KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F","130":"A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:6,C:"Object RTC (ORTC) API for WebRTC"};

  var offlineApps={A:{A:{"1":"A B","2":"E lB","8":"O F H"},B:{"1":"C N D I J K L KB P M R S","2":"YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","4":"bB","8":"eB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S","2":"YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB","8":"dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V rB T ZB tB Q","2":"E oB","8":"pB qB"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"bB G DC EC FC GC aB HC IC","2":"M"},J:{"1":"F A"},K:{"1":"B C DB T ZB Q","2":"A"},L:{"2":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:7,C:"Offline web applications"};

  var offscreencanvas={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x kB sB","194":"0 1 2 3 4 5 6 7 8 9 y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"1":"NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB","322":"CB DB EB PB GB HB IB JB X LB MB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y oB pB qB rB T ZB tB Q","322":"0 1 2 3 4 5 6 7 8 9 z AB BB CB EB GB HB"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"194":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"XB PC QC","2":"G KC LC MC NC OC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"194":"jB"}},B:1,C:"OffscreenCanvas"};

  var oggVorbis={A:{A:{"2":"O F H E A B lB"},B:{"1":"K L KB P M R S YB U","2":"C N D I J"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","2":"eB bB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V qB rB T ZB tB Q","2":"E oB pB"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"bB G M FC GC aB HC IC","16":"DC EC"},J:{"1":"A","2":"F"},K:{"1":"B C DB T ZB Q","2":"A"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:6,C:"Ogg Vorbis audio format"};

  var ogv={A:{A:{"2":"O F H lB","8":"E A B"},B:{"1":"K L KB P M R S YB U","8":"C N D I J"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","2":"eB bB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V qB rB T ZB tB Q","2":"E oB pB"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"1":"OB"},N:{"8":"A B"},O:{"1":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"1":"jB"}},B:6,C:"Ogg/Theora video format"};

  var olReversed={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I","16":"J K L Z"},E:{"1":"F H E A B C N D gB hB iB XB T Q mB nB","2":"G Y dB WB fB","16":"O"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V Q","2":"E B oB pB qB rB T ZB tB","16":"C"},G:{"1":"H D xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC"},H:{"1":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"1":"A","2":"F"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Reversed attribute of ordered lists"};

  var onceEventListener={A:{A:{"2":"O F H E A B lB"},B:{"1":"J K L KB P M R S YB U","2":"C N D I"},C:{"1":"4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB"},D:{"1":"9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},E:{"1":"A B C N D XB T Q mB nB","2":"G Y O F H E dB WB fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v oB pB qB rB T ZB tB Q"},G:{"1":"D 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"LC MC NC OC XB PC QC","2":"G KC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:1,C:"\"once\" event listener option"};

  var onlineStatus={A:{A:{"1":"E A B","2":"O F lB","260":"H"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","2":"eB bB","516":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u"},D:{"1":"0 1 2 3 4 5 6 7 8 9 D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N"},E:{"1":"Y O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"G dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB","4":"Q"},G:{"1":"H D aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB uB"},H:{"2":"CC"},I:{"1":"bB G M FC GC aB HC IC","16":"DC EC"},J:{"1":"A","132":"F"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Online/offline status"};

  var opus={A:{A:{"2":"O F H E A B lB"},B:{"1":"D I J K L KB P M R S YB U","2":"C N"},C:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m"},E:{"2":"G Y O F H E A dB WB fB gB hB iB XB","132":"B C N D T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z oB pB qB rB T ZB tB Q"},G:{"2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B","132":"D 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:6,C:"Opus"};

  var orientationSensor={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB","194":"CB DB EB PB GB HB IB JB X"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"0 1 2 3 4 5 6 7 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:4,C:"Orientation Sensor"};

  var outline={A:{A:{"2":"O F lB","260":"H","388":"E A B"},B:{"1":"I J K L KB P M R S YB U","388":"C N D"},C:{"1":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V tB","129":"Q","260":"E B oB pB qB rB T ZB"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"C DB Q","260":"A B T ZB"},L:{"1":"U"},M:{"1":"OB"},N:{"388":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"CSS outline properties"};

  var padStartEnd={A:{A:{"2":"O F H E A B lB"},B:{"1":"I J K L KB P M R S YB U","2":"C N D"},C:{"1":"2 3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB"},D:{"1":"BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB"},E:{"1":"A B C N D XB T Q mB nB","2":"G Y O F H E dB WB fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x oB pB qB rB T ZB tB Q"},G:{"1":"D 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"MC NC OC XB PC QC","2":"G KC LC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"1":"jB"}},B:6,C:"String.prototype.padStart(), String.prototype.padEnd()"};

  var pageTransitionEvents={A:{A:{"1":"B","2":"O F H E A lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"Y O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"G dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"1":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB uB aB"},H:{"2":"CC"},I:{"1":"bB G M FC GC aB HC IC","16":"DC EC"},J:{"1":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"B","2":"A"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"PageTransitionEvent"};

  var pagevisibility={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E kB sB","33":"A B C N D I J K"},D:{"1":"0 1 2 3 4 5 6 7 8 9 n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N","33":"D I J K L Z a b c d e f g h i j k l m"},E:{"1":"F H E A B C N D gB hB iB XB T Q mB nB","2":"G Y O dB WB fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V Q","2":"E B C oB pB qB rB T ZB tB","33":"I J K L Z"},G:{"1":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC xB"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB","33":"HC IC"},J:{"1":"A","2":"F"},K:{"1":"DB Q","2":"A B C T ZB"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","33":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:2,C:"Page Visibility"};

  var passiveEventListener={A:{A:{"2":"O F H E A B lB"},B:{"1":"J K L KB P M R S YB U","2":"C N D I"},C:{"1":"3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB"},D:{"1":"5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},E:{"1":"A B C N D XB T Q mB nB","2":"G Y O F H E dB WB fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r oB pB qB rB T ZB tB Q"},G:{"1":"D 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:1,C:"Passive event listeners"};

  var passwordrules={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L","16":"KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB kB sB","16":"R S"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U","16":"vB wB cB"},E:{"1":"C N Q","2":"G Y O F H E A B dB WB fB gB hB iB XB T","16":"D mB nB"},F:{"2":"0 1 2 3 4 5 6 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q","16":"7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"16":"CC"},I:{"2":"bB G DC EC FC GC aB HC IC","16":"M"},J:{"2":"F","16":"A"},K:{"2":"A B C T ZB Q","16":"DB"},L:{"16":"U"},M:{"16":"OB"},N:{"2":"A","16":"B"},O:{"16":"JC"},P:{"2":"G KC LC","16":"MC NC OC XB PC QC"},Q:{"16":"RC"},R:{"16":"SC"},S:{"2":"jB"}},B:1,C:"Password Rules"};

  var path2d={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N","132":"D I J K L"},C:{"1":"2 3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k kB sB","132":"0 1 l m n o p q r s t u v w x y z"},D:{"1":"MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p","132":"0 1 2 3 4 5 6 7 8 9 q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB"},E:{"1":"A B C N D iB XB T Q mB nB","2":"G Y O F dB WB fB gB","132":"H E hB"},F:{"1":"9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c oB pB qB rB T ZB tB Q","132":"0 1 2 3 4 5 6 7 8 d e f g h i j k l m n o p q r s t u v w x y z"},G:{"1":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC xB yB","16":"H","132":"zB"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"1":"A","2":"F"},K:{"2":"A B C T ZB Q","132":"DB"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"132":"JC"},P:{"1":"XB PC QC","132":"G KC LC MC NC OC"},Q:{"132":"RC"},R:{"132":"SC"},S:{"1":"jB"}},B:1,C:"Path2D"};

  var paymentRequest={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N","322":"D","8196":"I J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB","4162":"9 AB BB CB DB EB PB GB HB IB JB","16452":"X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"1":"UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","194":"7 8 9 AB BB CB","1090":"DB EB","8196":"PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB"},E:{"1":"N D Q mB nB","2":"G Y O F H E dB WB fB gB hB iB","514":"A B XB","8196":"C T"},F:{"1":"X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s t oB pB qB rB T ZB tB Q","194":"0 1 u v w x y z","8196":"2 3 4 5 6 7 8 9 AB BB CB EB GB HB IB JB"},G:{"1":"D 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B","514":"2B 3B 4B","8196":"5B 6B"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2049":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"QC","2":"G","8196":"KC LC MC NC OC XB PC"},Q:{"8196":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:4,C:"Payment Request API"};

  var pdfViewer={A:{A:{"2":"O F H E A lB","132":"B"},B:{"1":"I J K L KB P M R S YB U","16":"C N D"},C:{"1":"0 1 2 3 4 5 6 7 8 9 Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","16":"G Y O F H E A B C N D"},E:{"1":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB","16":"dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V Q","2":"E B oB pB qB rB T ZB tB"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"16":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"16":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:6,C:"Built-in PDF viewer"};

  var permissionsApi={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"1":"jB"}},B:7,C:"Permissions API"};

  var permissionsPolicy={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L","258":"KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB kB sB","258":"QB RB SB TB UB KB P M OB R S"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB","258":"EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB","450":"U vB wB cB"},E:{"2":"G Y O F H E A B dB WB fB gB hB iB XB","258":"C N D T Q mB nB"},F:{"2":"0 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q","258":"1 2 3 4 5 6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B","258":"D 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G DC EC FC GC aB HC IC","258":"M"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"258":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC","258":"NC OC XB PC QC"},Q:{"258":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"Permissions Policy"};

  var pictureInPicture={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X kB sB","132":"V VB QB RB SB TB UB KB P M OB R S","1090":"LB","1412":"W","1668":"MB NB FB"},D:{"1":"FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB","2114":"NB"},E:{"1":"D mB nB","2":"G Y O F H E dB WB fB gB hB iB","4100":"A B C N XB T Q"},F:{"2":"E B C I J K L Z a b c d e f g h i j k l m n o p q oB pB qB rB T ZB tB Q","8196":"0 1 2 3 4 5 6 7 8 9 r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"1":"D","2":"H WB uB aB TC xB yB zB","4100":"0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"16388":"U"},M:{"16388":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:7,C:"Picture-in-Picture"};

  var picture={A:{A:{"2":"O F H E A B lB"},B:{"1":"N D I J K L KB P M R S YB U","2":"C"},C:{"1":"0 1 2 3 4 5 6 7 8 9 s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n kB sB","578":"o p q r"},D:{"1":"0 1 2 3 4 5 6 7 8 9 s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q","194":"r"},E:{"1":"A B C N D iB XB T Q mB nB","2":"G Y O F H E dB WB fB gB hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d oB pB qB rB T ZB tB Q","322":"e"},G:{"1":"D 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Picture element"};

  var ping={A:{A:{"2":"O F H E A B lB"},B:{"1":"K L KB P M R S YB U","2":"C N D I J"},C:{"2":"eB","194":"0 1 2 3 4 5 6 7 8 9 bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","16":"G Y O F H E A B C N D"},E:{"1":"O F H E A B C N D gB hB iB XB T Q mB nB","2":"G Y dB WB fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"1":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB"},H:{"2":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"194":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"194":"jB"}},B:1,C:"Ping attribute"};

  var pngAlpha={A:{A:{"1":"F H E A B","2":"lB","8":"O"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"1":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:2,C:"PNG alpha transparency"};

  var pointerEvents={A:{A:{"1":"B","2":"O F H E A lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S sB","2":"eB bB kB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"B","2":"A"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:7,C:"CSS pointer-events (for HTML)"};

  var pointer={A:{A:{"1":"B","2":"O F H E lB","164":"A"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y kB sB","8":"O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u","328":"0 1 2 3 4 5 6 7 8 9 v w x y z AB BB CB"},D:{"1":"9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b","8":"0 1 2 3 4 5 c d e f g h i j k l m n o p q r s t u v w x y z","584":"6 7 8"},E:{"1":"N D mB nB","2":"G Y O dB WB fB","8":"F H E A B C gB hB iB XB T","1096":"Q"},F:{"1":"0 1 2 3 4 5 6 7 8 9 w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q","8":"I J K L Z a b c d e f g h i j k l m n o p q r s","584":"t u v"},G:{"1":"D 9B AC BC","8":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B","6148":"8B"},H:{"2":"CC"},I:{"1":"M","8":"bB G DC EC FC GC aB HC IC"},J:{"8":"F A"},K:{"1":"DB","2":"A","8":"B C T ZB Q"},L:{"1":"U"},M:{"328":"OB"},N:{"1":"B","36":"A"},O:{"8":"JC"},P:{"1":"LC MC NC OC XB PC QC","2":"KC","8":"G"},Q:{"1":"RC"},R:{"2":"SC"},S:{"328":"jB"}},B:2,C:"Pointer events"};

  var pointerlock={A:{A:{"2":"O F H E A B lB"},B:{"1":"N D I J K L KB P M R S YB U","2":"C"},C:{"1":"0 1 2 3 4 5 6 7 8 9 v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N kB sB","33":"D I J K L Z a b c d e f g h i j k l m n o p q r s t u"},D:{"1":"0 1 2 3 4 5 6 7 8 9 r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I","33":"c d e f g h i j k l m n o p q","66":"J K L Z a b"},E:{"1":"B C N D XB T Q mB nB","2":"G Y O F H E A dB WB fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q","33":"I J K L Z a b c d"},G:{"1":"D 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"1":"jB"}},B:2,C:"Pointer Lock API"};

  var portals={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P M R S","450":"YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB","194":"RB SB TB UB KB P M R S","322":"U vB wB cB","450":"YB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB oB pB qB rB T ZB tB Q","194":"GB HB IB JB X LB MB NB FB W V"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"450":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:7,C:"Portals"};

  var prefersColorScheme={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X kB sB"},D:{"1":"SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB"},E:{"1":"N D Q mB nB","2":"G Y O F H E A B C dB WB fB gB hB iB XB T"},F:{"1":"GB HB IB JB X LB MB NB FB W V","2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB oB pB qB rB T ZB tB Q"},G:{"1":"D 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"QC","2":"G KC LC MC NC OC XB PC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"prefers-color-scheme media query"};

  var prefersReducedMotion={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB kB sB"},D:{"1":"QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB"},E:{"1":"B C N D XB T Q mB nB","2":"G Y O F H E A dB WB fB gB hB iB"},F:{"1":"IB JB X LB MB NB FB W V","2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB oB pB qB rB T ZB tB Q"},G:{"1":"D 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"PC QC","2":"G KC LC MC NC OC XB"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"prefers-reduced-motion media query"};

  var privateClassFields={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:7,C:"Private class fields"};

  var privateMethodsAndAccessors={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:7,C:"Public class fields"};

  var progress={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F"},E:{"1":"O F H E A B C N D gB hB iB XB T Q mB nB","2":"G Y dB WB fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V T ZB tB Q","2":"E oB pB qB rB"},G:{"2":"WB uB aB TC xB","132":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"1":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"1":"F A"},K:{"1":"B C DB T ZB Q","2":"A"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"progress element"};

  var promiseFinally={A:{A:{"2":"O F H E A B lB"},B:{"1":"L KB P M R S YB U","2":"C N D I J K"},C:{"1":"CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB kB sB"},D:{"1":"HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB"},E:{"1":"C N D T Q mB nB","2":"G Y O F H E A B dB WB fB gB hB iB XB"},F:{"1":"4 5 6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"0 1 2 3 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q"},G:{"1":"D 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"NC OC XB PC QC","2":"G KC LC MC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:6,C:"Promise.prototype.finally"};

  var promises={A:{A:{"8":"O F H E A B lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","4":"h i","8":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","4":"m","8":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l"},E:{"1":"H E A B C N D hB iB XB T Q mB nB","8":"G Y O F dB WB fB gB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","4":"Z","8":"E B C I J K L oB pB qB rB T ZB tB Q"},G:{"1":"H D zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","8":"WB uB aB TC xB yB"},H:{"8":"CC"},I:{"1":"M IC","8":"bB G DC EC FC GC aB HC"},J:{"8":"F A"},K:{"1":"DB","8":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"8":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:6,C:"Promises"};

  var proximity={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"1":"jB"}},B:4,C:"Proximity API"};

  var proxy={A:{A:{"2":"O F H E A B lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K kB sB"},D:{"1":"3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 G Y O F H E A B C N D I J K L s t u v w x y z","66":"Z a b c d e f g h i j k l m n o p q r"},E:{"1":"A B C N D XB T Q mB nB","2":"G Y O F H E dB WB fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C f g h i j k l m n o p oB pB qB rB T ZB tB Q","66":"I J K L Z a b c d e"},G:{"1":"D 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"1":"RC"},R:{"2":"SC"},S:{"1":"jB"}},B:6,C:"Proxy object"};

  var publicClassFields={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:7,C:"Public class fields"};

  var publickeypinning={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB","2":"E B C I J K L Z X LB MB NB FB W V oB pB qB rB T ZB tB Q","4":"d","16":"a b c e"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB","2":"PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:6,C:"Public Key Pinning"};

  var pushApi={A:{A:{"2":"O F H E A B lB"},B:{"1":"K L","2":"C N D I J","257":"KB P M R S YB U"},C:{"2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x kB sB","257":"0 1 2 3 4 5 7 8 9 y AB BB CB DB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","1281":"6 z EB"},D:{"2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x","257":"4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","388":"0 1 2 3 y z"},E:{"2":"G Y O F H E dB WB fB gB hB","514":"A B C N D iB XB T Q mB nB"},F:{"2":"E B C I J K L Z a b c d e f g h i j k l m n o p q oB pB qB rB T ZB tB Q","16":"r s t u v","257":"0 1 2 3 4 5 6 7 8 9 w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"257":"jB"}},B:5,C:"Push API"};

  var queryselector={A:{A:{"1":"E A B","2":"lB","8":"O F","132":"H"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","8":"eB bB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V pB qB rB T ZB tB Q","8":"E oB"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"1":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"querySelector/querySelectorAll"};

  var readonlyAttr={A:{A:{"1":"O F H E A B","16":"lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","16":"eB bB kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","16":"G Y O F H E A B C N D I J K L Z a b c d e f"},E:{"1":"O F H E A B C N D fB gB hB iB XB T Q mB nB","16":"G Y dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","16":"E oB","132":"B C pB qB rB T ZB tB Q"},G:{"1":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB uB aB TC xB"},H:{"1":"CC"},I:{"1":"bB G M FC GC aB HC IC","16":"DC EC"},J:{"1":"F A"},K:{"1":"DB","132":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"257":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"readonly attribute of input and textarea elements"};

  var referrerPolicy={A:{A:{"2":"O F H E A lB","132":"B"},B:{"1":"KB P M R","132":"C N D I J K L","513":"S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p kB sB"},D:{"1":"PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R","2":"G Y O F H E A B C N D I J K L Z a","260":"0 1 2 3 4 5 6 7 8 9 b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB","513":"S YB U vB wB cB"},E:{"1":"C N D T Q mB nB","2":"G Y O F dB WB fB gB","132":"H E A B hB iB XB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"1":"D 6B 7B 8B 9B AC BC","2":"WB uB aB TC xB yB","132":"H zB 0B 1B 2B 3B 4B 5B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"513":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"Referrer Policy"};

  var registerprotocolhandler={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L","129":"KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","2":"eB"},D:{"2":"G Y O F H E A B C","129":"0 1 2 3 4 5 6 7 8 9 N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"E B oB pB qB rB T ZB","129":"0 1 2 3 4 5 6 7 8 9 C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F","129":"A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:1,C:"Custom protocol handling"};

  var relNoopener={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB"},D:{"1":"3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},E:{"1":"B C N D XB T Q mB nB","2":"G Y O F H E A dB WB fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p oB pB qB rB T ZB tB Q"},G:{"1":"D 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:1,C:"rel=noopener"};

  var relNoreferrer={A:{A:{"2":"O F H E A lB","132":"B"},B:{"1":"N D I J K L KB P M R S YB U","16":"C"},C:{"1":"0 1 2 3 4 5 6 7 8 9 n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","16":"G Y O F H E A B C N D I"},E:{"1":"Y O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"G dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"1":"H D uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB"},H:{"2":"CC"},I:{"1":"bB G M FC GC aB HC IC","16":"DC EC"},J:{"1":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Link type \"noreferrer\""};

  var rellist={A:{A:{"2":"O F H E A B lB"},B:{"1":"L KB P M R S YB U","2":"C N D I J","132":"K"},C:{"1":"0 1 2 3 4 5 6 7 8 9 k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j kB sB"},D:{"1":"JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","132":"4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB"},E:{"1":"E A B C N D iB XB T Q mB nB","2":"G Y O F H dB WB fB gB hB"},F:{"1":"6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q oB pB qB rB T ZB tB Q","132":"0 1 2 3 4 5 r s t u v w x y z"},G:{"1":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"132":"JC"},P:{"1":"OC XB PC QC","2":"G","132":"KC LC MC NC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"1":"jB"}},B:1,C:"relList (DOMTokenList)"};

  var rem={A:{A:{"1":"B","2":"O F H lB","132":"E A"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S sB","2":"eB bB kB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"Y O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"G dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V tB Q","2":"E B oB pB qB rB T ZB"},G:{"1":"H D uB aB xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB","260":"TC"},H:{"1":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"C DB Q","2":"A B T ZB"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"rem (root em) units"};

  var replaceAll={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"1":"V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"D mB nB","2":"G Y O F H E A B C N dB WB fB gB hB iB XB T Q"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"D BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"16":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"16":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"16":"SC"},S:{"16":"jB"}},B:7,C:"String.prototype.replaceAll()"};

  var requestanimationframe={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB","33":"B C N D I J K L Z a b c","164":"G Y O F H E A"},D:{"1":"0 1 2 3 4 5 6 7 8 9 e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E","33":"c d","164":"L Z a b","420":"A B C N D I J K"},E:{"1":"F H E A B C N D gB hB iB XB T Q mB nB","2":"G Y dB WB fB","33":"O"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"1":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC","33":"xB"},H:{"2":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"1":"A","2":"F"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"requestAnimationFrame"};

  var requestidlecallback={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 6 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB","194":"7 8"},D:{"1":"1 2 3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},E:{"2":"G Y O F H E A B C N dB WB fB gB hB iB XB T Q","322":"D mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n oB pB qB rB T ZB tB Q"},G:{"2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC","322":"D BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:5,C:"requestIdleCallback"};

  var resizeobserver={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB kB sB"},D:{"1":"IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","194":"8 9 AB BB CB DB EB PB GB HB"},E:{"1":"D mB nB","2":"G Y O F H E A B C dB WB fB gB hB iB XB T Q","66":"N"},F:{"1":"6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u oB pB qB rB T ZB tB Q","194":"0 1 2 3 4 5 v w x y z"},G:{"1":"D BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"OC XB PC QC","2":"G KC LC MC NC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:7,C:"Resize Observer"};

  var resourceTiming={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k kB sB","194":"l m n o"},D:{"1":"0 1 2 3 4 5 6 7 8 9 f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e"},E:{"1":"C N D T Q mB nB","2":"G Y O F H E A dB WB fB gB hB iB XB","260":"B"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"1":"D 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B"},H:{"2":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"Resource Timing"};

  var restParameters={A:{A:{"2":"O F H E A B lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D kB sB"},D:{"1":"1 2 3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x","194":"0 y z"},E:{"1":"A B C N D XB T Q mB nB","2":"G Y O F H E dB WB fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k oB pB qB rB T ZB tB Q","194":"l m n"},G:{"1":"D 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:6,C:"Rest parameters"};

  var rtcpeerconnection={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D","516":"I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b kB sB","33":"c d e f g h i j k l m n o p q r s t u v w x"},D:{"1":"AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c","33":"0 1 2 3 4 5 6 7 8 9 d e f g h i j k l m n o p q r s t u v w x y z"},E:{"1":"B C N D T Q mB nB","2":"G Y O F H E A dB WB fB gB hB iB XB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K oB pB qB rB T ZB tB Q","33":"L Z a b c d e f g h i j k l m n o p q r s t u v w"},G:{"1":"D 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F","130":"A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"33":"G KC LC MC NC OC XB PC QC"},Q:{"33":"RC"},R:{"33":"SC"},S:{"1":"jB"}},B:5,C:"WebRTC Peer-to-peer connections"};

  var ruby={A:{A:{"4":"O F H E A B lB"},B:{"4":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","8":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r kB sB"},D:{"4":"0 1 2 3 4 5 6 7 8 9 Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","8":"G"},E:{"4":"Y O F H E A B C N D fB gB hB iB XB T Q mB nB","8":"G dB WB"},F:{"4":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","8":"E B C oB pB qB rB T ZB tB Q"},G:{"4":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","8":"WB uB aB"},H:{"8":"CC"},I:{"4":"bB G M GC aB HC IC","8":"DC EC FC"},J:{"4":"A","8":"F"},K:{"4":"DB","8":"A B C T ZB Q"},L:{"4":"U"},M:{"1":"OB"},N:{"4":"A B"},O:{"4":"JC"},P:{"4":"G KC LC MC NC OC XB PC QC"},Q:{"4":"RC"},R:{"4":"SC"},S:{"1":"jB"}},B:1,C:"Ruby annotation"};

  var runIn={A:{A:{"1":"H E A B","2":"O F lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l","2":"0 1 2 3 4 5 6 7 8 9 m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"Y O fB","2":"F H E A B C N D hB iB XB T Q mB nB","16":"gB","129":"G dB WB"},F:{"1":"E B C I J K L oB pB qB rB T ZB tB Q","2":"0 1 2 3 4 5 6 7 8 9 Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"1":"uB aB TC xB yB","2":"H D zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","129":"WB"},H:{"1":"CC"},I:{"1":"bB G DC EC FC GC aB HC","2":"M IC"},J:{"1":"F A"},K:{"1":"A B C T ZB Q","2":"DB"},L:{"2":"U"},M:{"2":"OB"},N:{"1":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"display: run-in"};

  var sameSiteCookieAttribute={A:{A:{"2":"O F H E A lB","388":"B"},B:{"1":"L KB P M R S YB U","2":"C N D I","129":"J K"},C:{"1":"EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB kB sB"},D:{"1":"5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB","2":"0 1 2 3 4 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","513":"P M R S YB U vB wB cB"},E:{"1":"nB","2":"G Y O F H E A B dB WB fB gB hB iB XB T","2052":"D","3076":"C N Q mB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s oB pB qB rB T ZB tB Q"},G:{"1":"D 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B","2052":"6B 7B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"513":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"16":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:6,C:"'SameSite' cookie attribute"};

  var screenOrientation={A:{A:{"2":"O F H E A lB","164":"B"},B:{"1":"KB P M R S YB U","36":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K kB sB","36":"L Z a b c d e f g h i j k l m n o p q r s t u v w x"},D:{"1":"0 1 2 3 4 5 6 7 8 9 s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A","36":"B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","16":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:5,C:"Screen Orientation"};

  var scriptAsync={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S sB","2":"eB bB kB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F"},E:{"1":"O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"G dB WB","132":"Y"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"1":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB"},H:{"2":"CC"},I:{"1":"bB G M GC aB HC IC","2":"DC EC FC"},J:{"1":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"async attribute for external scripts"};

  var scriptDefer={A:{A:{"1":"A B","132":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB","257":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F"},E:{"1":"Y O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"G dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"1":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB"},H:{"2":"CC"},I:{"1":"bB G M GC aB HC IC","2":"DC EC FC"},J:{"1":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"defer attribute for external scripts"};

  var scrollintoview={A:{A:{"2":"O F lB","132":"H E A B"},B:{"1":"KB P M R S YB U","132":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","132":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p kB sB"},D:{"1":"PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","132":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB"},E:{"2":"G Y dB WB","132":"O F H E A B C N D fB gB hB iB XB T Q mB nB"},F:{"1":"2 3 4 5 6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E oB pB qB rB","16":"B T ZB","132":"0 1 C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z tB Q"},G:{"16":"WB uB aB","132":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"16":"DC EC","132":"bB G M FC GC aB HC IC"},J:{"132":"F A"},K:{"132":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"132":"A B"},O:{"132":"JC"},P:{"132":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"132":"SC"},S:{"1":"jB"}},B:5,C:"scrollIntoView"};

  var scrollintoviewifneeded={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","16":"G Y O F H E A B C N D"},E:{"1":"O F H E A B C N D fB gB hB iB XB T Q mB nB","16":"G Y dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"1":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB uB aB"},H:{"2":"CC"},I:{"1":"bB G M FC GC aB HC IC","16":"DC EC"},J:{"1":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:7,C:"Element.scrollIntoViewIfNeeded()"};

  var sdch={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB","2":"DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:6,C:"SDCH Accept-Encoding/Content-Encoding"};

  var selectionApi={A:{A:{"1":"E A B","16":"lB","260":"O F H"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","132":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w kB sB","2180":"0 1 2 3 4 5 x y z"},D:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","16":"G Y O F H E A B C N D"},E:{"1":"O F H E A B C N D fB gB hB iB XB T Q mB nB","16":"G Y dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","132":"E B C oB pB qB rB T ZB tB Q"},G:{"16":"aB","132":"WB uB","516":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M HC IC","16":"bB G DC EC FC GC","1025":"aB"},J:{"1":"A","16":"F"},K:{"1":"DB","16":"A B C T ZB","132":"Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"B","16":"A"},O:{"1025":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"2180":"jB"}},B:5,C:"Selection API"};

  var serverTiming={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB kB sB"},D:{"1":"JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB","196":"EB PB GB HB","324":"IB"},E:{"2":"G Y O F H E A B C dB WB fB gB hB iB XB T","516":"N D Q mB nB"},F:{"1":"6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"0 1 2 3 4 5 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"Server Timing"};

  var serviceworkers={A:{A:{"2":"O F H E A B lB"},B:{"1":"K L KB P M R S YB U","2":"C N D","322":"I J"},C:{"1":"0 1 2 3 4 5 7 8 9 y AB BB CB DB PB GB HB IB JB X LB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m kB sB","194":"n o p q r s t u v w x","513":"6 z EB MB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t","4":"u v w x y"},E:{"1":"C N D T Q mB nB","2":"G Y O F H E A B dB WB fB gB hB iB XB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g oB pB qB rB T ZB tB Q","4":"h i j k l"},G:{"1":"D 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B"},H:{"2":"CC"},I:{"2":"bB G DC EC FC GC aB HC IC","4":"M"},J:{"2":"F A"},K:{"2":"A B C T ZB Q","4":"DB"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"4":"SC"},S:{"2":"jB"}},B:4,C:"Service Workers"};

  var setimmediate={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L","2":"KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"1":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:7,C:"Efficient Script Yielding: setImmediate()"};

  var sha2={A:{A:{"1":"O F H E A B","2":"lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","132":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"16":"CC"},I:{"1":"bB G M EC FC GC aB HC IC","260":"DC"},J:{"1":"F A"},K:{"16":"A B C DB T ZB Q"},L:{"1":"U"},M:{"16":"OB"},N:{"16":"A B"},O:{"16":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","16":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:6,C:"SHA-2 SSL certificates"};

  var shadowdom={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB","2":"C N D I J K L P M R S YB U"},C:{"2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","66":"0 1 2 3 4 5 6 7 8 9 j k l m n o p q r s t u v w x y z AB BB CB DB EB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB","2":"G Y O F H E A B C N D I J K L Z a b c d e P M R S YB U vB wB cB","33":"f g h i j k l m n o"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X","2":"E B C LB MB NB FB W V oB pB qB rB T ZB tB Q","33":"I J K L Z a b"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB","33":"HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","33":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:7,C:"Shadow DOM (deprecated V0 spec)"};

  var shadowdomv1={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB kB sB","322":"CB","578":"DB EB PB GB"},D:{"1":"7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},E:{"1":"A B C N D XB T Q mB nB","2":"G Y O F H E dB WB fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s t oB pB qB rB T ZB tB Q"},G:{"2":"H WB uB aB TC xB yB zB 0B 1B","132":"D 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"LC MC NC OC XB PC QC","2":"G","4":"KC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"Shadow DOM (V1)"};

  var sharedarraybuffer={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I","194":"J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB kB sB","194":"BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB","450":"QB RB SB TB UB","513":"KB P M OB R S"},D:{"1":"MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB","194":"EB PB GB HB IB JB X LB"},E:{"2":"G Y O F H E A dB WB fB gB hB iB","194":"B C N D XB T Q mB nB"},F:{"1":"IB JB X LB MB NB FB W V","2":"0 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q","194":"1 2 3 4 5 6 7 8 9 AB BB CB EB GB HB"},G:{"2":"H WB uB aB TC xB yB zB 0B 1B 2B","194":"D 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"194":"U"},M:{"513":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:6,C:"Shared Array Buffer"};

  var sharedworkers={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"Y O fB","2":"G F H E A B C N D dB WB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V rB T ZB tB Q","2":"E oB pB qB"},G:{"1":"TC xB","2":"H D WB uB aB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"B C T ZB Q","2":"DB","16":"A"},L:{"2":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"G","2":"KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"1":"jB"}},B:1,C:"Shared Web Workers"};

  var sni={A:{A:{"1":"E A B","2":"O lB","132":"F H"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"H D uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB"},H:{"1":"CC"},I:{"1":"bB G M GC aB HC IC","2":"DC EC FC"},J:{"1":"A","2":"F"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:6,C:"Server Name Indication"};

  var spdy={A:{A:{"1":"B","2":"O F H E A lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","2":"5 6 7 8 9 eB bB G Y O F H E A B C AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","2":"5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"H E A B C iB XB T","2":"G Y O F dB WB fB gB hB","129":"N D Q mB nB"},F:{"1":"I J K L Z a b c d e f g h i j k l m n o p q r s t w y Q","2":"0 1 2 3 4 5 6 7 8 9 E B C u v x z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB"},G:{"1":"H zB 0B 1B 2B 3B 4B 5B 6B","2":"WB uB aB TC xB yB","257":"D 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"bB G GC aB HC IC","2":"M DC EC FC"},J:{"2":"F A"},K:{"1":"Q","2":"A B C DB T ZB"},L:{"2":"U"},M:{"2":"OB"},N:{"1":"B","2":"A"},O:{"2":"JC"},P:{"1":"G","2":"KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"16":"SC"},S:{"1":"jB"}},B:7,C:"SPDY protocol"};

  var speechRecognition={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L","1026":"KB P M R S YB U"},C:{"2":"eB bB G Y O F H E A B C N D I J K L Z a b kB sB","322":"0 1 2 3 4 5 6 7 8 9 c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"2":"G Y O F H E A B C N D I J K L Z a b c d e","164":"0 1 2 3 4 5 6 7 8 9 f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"E B C I J K L Z a b c d e f g oB pB qB rB T ZB tB Q","1026":"0 1 2 3 4 5 6 7 8 9 h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"164":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"164":"G KC LC MC NC OC XB PC QC"},Q:{"164":"RC"},R:{"164":"SC"},S:{"322":"jB"}},B:7,C:"Speech Recognition API"};

  var speechSynthesis={A:{A:{"2":"O F H E A B lB"},B:{"1":"D I J K L","2":"C N","257":"KB P M R S YB U"},C:{"1":"3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k kB sB","194":"0 1 2 l m n o p q r s t u v w x y z"},D:{"1":"0 1 2 3 4 5 6 7 8 n o p q r s t u v w x y z","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m","257":"9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"F H E A B C N D hB iB XB T Q mB nB","2":"G Y O dB WB fB gB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB","2":"E B C I J K L Z a b c d e f g oB pB qB rB T ZB tB Q","257":"IB JB X LB MB NB FB W V"},G:{"1":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC xB"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"1":"RC"},R:{"2":"SC"},S:{"1":"jB"}},B:7,C:"Speech Synthesis API"};

  var spellcheckAttribute={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H"},E:{"1":"O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"G Y dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V qB rB T ZB tB Q","2":"E oB pB"},G:{"4":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"4":"CC"},I:{"4":"bB G M DC EC FC GC aB HC IC"},J:{"1":"A","4":"F"},K:{"4":"A B C DB T ZB Q"},L:{"4":"U"},M:{"4":"OB"},N:{"4":"A B"},O:{"4":"JC"},P:{"4":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"4":"SC"},S:{"2":"jB"}},B:1,C:"Spellcheck attribute"};

  var sqlStorage={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C dB WB fB gB hB iB XB T Q","2":"N D mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V qB rB T ZB tB Q","2":"E oB pB"},G:{"1":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B","2":"D 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"B C DB T ZB Q","2":"A"},L:{"1":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:7,C:"Web SQL Database"};

  var srcset={A:{A:{"2":"O F H E A B lB"},B:{"1":"J K L KB P M R S YB U","260":"C","514":"N D I"},C:{"1":"0 1 2 3 4 5 6 7 8 9 s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l kB sB","194":"m n o p q r"},D:{"1":"0 1 2 3 4 5 6 7 8 9 s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n","260":"o p q r"},E:{"1":"E A B C N D iB XB T Q mB nB","2":"G Y O F dB WB fB gB","260":"H hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a oB pB qB rB T ZB tB Q","260":"b c d e"},G:{"1":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC xB yB","260":"H zB"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Srcset and sizes attributes"};

  var stopimmediatepropagation={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","16":"G Y O F H E A B C N D I J K L Z a b c d e f"},E:{"1":"O F H E A B C N D fB gB hB iB XB T Q mB nB","16":"G Y dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V Q","2":"E B oB pB qB rB T ZB tB","16":"C"},G:{"1":"H D xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB uB aB TC"},H:{"16":"CC"},I:{"1":"G M GC aB HC IC","16":"bB DC EC FC"},J:{"16":"F A"},K:{"16":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"16":"A B"},O:{"16":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","16":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Event.stopImmediatePropagation()"};

  var stream={A:{A:{"2":"O F H E A B lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J kB sB","129":"q r s t u v","420":"K L Z a b c d e f g h i j k l m n o p"},D:{"1":"7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a","420":"0 1 2 3 4 5 6 b c d e f g h i j k l m n o p q r s t u v w x y z"},E:{"1":"B C N D T Q mB nB","2":"G Y O F H E A dB WB fB gB hB iB XB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B I J K oB pB qB rB T ZB tB","420":"C L Z a b c d e f g h i j k l m n o p q r s t Q"},G:{"2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B","513":"D BC","1537":"4B 5B 6B 7B 8B 9B AC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F","420":"A"},K:{"1":"DB","2":"A B T ZB","420":"C Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"LC MC NC OC XB PC QC","420":"G KC"},Q:{"1":"RC"},R:{"420":"SC"},S:{"2":"jB"}},B:4,C:"getUserMedia/Stream API"};

  var streams={A:{A:{"2":"O F H E A lB","130":"B"},B:{"16":"C N","260":"D I","1028":"KB P M R S YB U","5124":"J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB kB sB","6148":"JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","6722":"BB CB DB EB PB GB HB IB"},D:{"2":"0 1 2 3 4 5 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","260":"6 7 8 9 AB BB CB","1028":"DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E dB WB fB gB hB iB","3076":"A B C N D XB T Q mB nB"},F:{"2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s oB pB qB rB T ZB tB Q","260":"t u v w x y z","1028":"0 1 2 3 4 5 6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"2":"H WB uB aB TC xB yB zB 0B 1B","16":"2B","1028":"D 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G DC EC FC GC aB HC IC","260":"M"},J:{"2":"F A"},K:{"2":"A B C T ZB Q","1028":"DB"},L:{"1028":"U"},M:{"2626":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC","1028":"MC NC OC XB PC QC"},Q:{"1028":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:1,C:"Streams"};

  var stricttransportsecurity={A:{A:{"2":"O F H E A lB","129":"B"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"F H E A B C N D hB iB XB T Q mB nB","2":"G Y O dB WB fB gB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V Q","2":"E B oB pB qB rB T ZB tB"},G:{"1":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC xB"},H:{"2":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"1":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:6,C:"Strict Transport Security"};

  var styleScoped={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 b c d e f g h i j k l m n o p q r s t u v w x y z","2":"eB bB G Y O F H E A B C N D I J K L Z a PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","322":"9 AB BB CB DB EB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","194":"a b c d e f g h i j k l m n o p q"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"322":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"1":"jB"}},B:7,C:"Scoped CSS"};

  var subresourceIntegrity={A:{A:{"2":"O F H E A B lB"},B:{"1":"K L KB P M R S YB U","2":"C N D I J"},C:{"1":"0 1 2 3 4 5 6 7 8 9 x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y"},E:{"1":"B C N D T Q mB nB","2":"G Y O F H E A dB WB fB gB hB iB XB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l oB pB qB rB T ZB tB Q"},G:{"1":"D 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B","194":"4B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:2,C:"Subresource Integrity"};

  var svgCss={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"J K L KB P M R S YB U","516":"C N D I"},C:{"1":"0 1 2 3 4 5 6 7 8 9 e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB","260":"G Y O F H E A B C N D I J K L Z a b c d"},D:{"1":"0 1 2 3 4 5 6 7 8 9 Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","4":"G"},E:{"1":"Y O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"dB","132":"G WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q","2":"E"},G:{"1":"H D aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","132":"WB uB"},H:{"260":"CC"},I:{"1":"bB G M GC aB HC IC","2":"DC EC FC"},J:{"1":"F A"},K:{"1":"DB","260":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"SVG in CSS backgrounds"};

  var svgFilters={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","2":"eB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G","4":"Y O F"},E:{"1":"O F H E A B C N D gB hB iB XB T Q mB nB","2":"G Y dB WB fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"H D xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC"},H:{"1":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"1":"A","2":"F"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:2,C:"SVG filters"};

  var svgFonts={A:{A:{"2":"E A B lB","8":"O F H"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r","2":"5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","130":"0 1 2 3 4 s t u v w x y z"},E:{"1":"G Y O F H E A B C N D WB fB gB hB iB XB T Q mB nB","2":"dB"},F:{"1":"E B C I J K L Z a b c d e oB pB qB rB T ZB tB Q","2":"0 1 2 3 4 5 6 7 8 9 r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","130":"f g h i j k l m n o p q"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"258":"CC"},I:{"1":"bB G GC aB HC IC","2":"M DC EC FC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"130":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"G","130":"KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"130":"SC"},S:{"2":"jB"}},B:2,C:"SVG fonts"};

  var svgFragment={A:{A:{"2":"O F H lB","260":"E A B"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D kB sB"},D:{"1":"4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p","132":"0 1 2 3 q r s t u v w x y z"},E:{"1":"C N D T Q mB nB","2":"G Y O F E A B dB WB fB gB iB XB","132":"H hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V Q","2":"I J K L Z a b c","4":"B C pB qB rB T ZB tB","16":"E oB","132":"d e f g h i j k l m n o p q"},G:{"1":"D 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC xB yB 0B 1B 2B 3B 4B","132":"H zB"},H:{"1":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F","132":"A"},K:{"1":"DB Q","4":"A B C T ZB"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","132":"G"},Q:{"1":"RC"},R:{"132":"SC"},S:{"1":"jB"}},B:4,C:"SVG fragment identifiers"};

  var svgHtml={A:{A:{"2":"O F H lB","388":"E A B"},B:{"4":"KB P M R S YB U","260":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","2":"eB","4":"bB"},D:{"4":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"dB WB","4":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB"},F:{"4":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"4":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G DC EC FC GC aB","4":"M HC IC"},J:{"1":"A","2":"F"},K:{"4":"A B C DB T ZB Q"},L:{"4":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"4":"G KC LC MC NC OC XB PC QC"},Q:{"4":"RC"},R:{"4":"SC"},S:{"1":"jB"}},B:2,C:"SVG effects for HTML"};

  var svgHtml5={A:{A:{"2":"lB","8":"O F H","129":"E A B"},B:{"1":"K L KB P M R S YB U","129":"C N D I J"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","8":"eB bB kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","8":"G Y O"},E:{"1":"E A B C N D iB XB T Q mB nB","8":"G Y dB WB","129":"O F H fB gB hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V tB Q","2":"B rB T ZB","8":"E oB pB qB"},G:{"1":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","8":"WB uB aB","129":"H TC xB yB zB"},H:{"1":"CC"},I:{"1":"M HC IC","2":"DC EC FC","129":"bB G GC aB"},J:{"1":"A","129":"F"},K:{"1":"C DB Q","8":"A B T ZB"},L:{"1":"U"},M:{"1":"OB"},N:{"129":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Inline SVG in HTML5"};

  var svgImg={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","132":"G Y O F H E A B C N D I J K L Z a b c d e f g h"},E:{"1":"E A B C N D iB XB T Q mB nB","2":"dB","4":"WB","132":"G Y O F H fB gB hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","132":"H WB uB aB TC xB yB zB"},H:{"1":"CC"},I:{"1":"M HC IC","2":"DC EC FC","132":"bB G GC aB"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"SVG in HTML img element"};

  var svgSmil={A:{A:{"2":"lB","8":"O F H E A B"},B:{"1":"KB P M R S YB U","8":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","8":"eB bB kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","4":"G"},E:{"1":"O F H E A B C N D gB hB iB XB T Q mB nB","8":"dB WB","132":"G Y fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"H D xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","132":"WB uB aB TC"},H:{"2":"CC"},I:{"1":"bB G M GC aB HC IC","2":"DC EC FC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"8":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:2,C:"SVG SMIL animation"};

  var svg={A:{A:{"2":"lB","8":"O F H","772":"E A B"},B:{"1":"KB P M R S YB U","513":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","4":"eB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D WB fB gB hB iB XB T Q mB nB","4":"dB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"1":"CC"},I:{"1":"M HC IC","2":"DC EC FC","132":"bB G GC aB"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"257":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"SVG (basic support)"};

  var sxg={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB","132":"W V"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"IB JB X LB MB NB FB W V","2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"16":"JC"},P:{"2":"G KC LC MC NC OC XB","16":"PC QC"},Q:{"16":"RC"},R:{"16":"SC"},S:{"2":"jB"}},B:6,C:"Signed HTTP Exchanges (SXG)"};

  var symbols$1={A:{A:{"2":"O F H E A B lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r"},E:{"1":"E A B C N D dB WB fB gB hB iB XB T Q mB nB","2":"G Y O F H"},F:{"1":"0 1 2 3 4 5 6 7 8 9 f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e oB pB qB rB T ZB tB Q"},G:{"1":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB"},H:{"2":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"16":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"16":"JC"},P:{"16":"G KC LC MC NC OC XB PC QC"},Q:{"16":"RC"},R:{"16":"SC"},S:{"1":"jB"}},B:6,C:"Symbols"};

  var tabindexAttr={A:{A:{"1":"F H E A B","16":"O lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"16":"eB bB kB sB","129":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","16":"G Y O F H E A B C N D"},E:{"16":"G Y dB WB","257":"O F H E A B C N D fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q","16":"E"},G:{"769":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"16":"CC"},I:{"16":"bB G M DC EC FC GC aB HC IC"},J:{"16":"F A"},K:{"16":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"16":"A B"},O:{"16":"JC"},P:{"16":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"16":"SC"},S:{"129":"jB"}},B:1,C:"tabindex global attribute"};

  var templateLiterals={A:{A:{"2":"O F H E A B lB"},B:{"1":"N D I J K L KB P M R S YB U","16":"C"},C:{"1":"0 1 2 3 4 5 6 7 8 9 o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u"},E:{"1":"A B N D iB XB T Q mB nB","2":"G Y O F H E dB WB fB gB hB","129":"C"},F:{"1":"0 1 2 3 4 5 6 7 8 9 j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i oB pB qB rB T ZB tB Q"},G:{"1":"D 0B 1B 2B 3B 4B 5B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB","129":"6B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:6,C:"ES6 Template Literals (Template Strings)"};

  var template={A:{A:{"2":"O F H E A B lB"},B:{"1":"I J K L KB P M R S YB U","2":"C","388":"N D"},C:{"1":"0 1 2 3 4 5 6 7 8 9 c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f","132":"g h i j k l m n o"},E:{"1":"E A B C N D iB XB T Q mB nB","2":"G Y O F dB WB fB","388":"H hB","514":"gB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q","132":"I J K L Z a b"},G:{"1":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC xB yB","388":"H zB"},H:{"2":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"HTML templates"};

  var testfeat={A:{A:{"2":"O F H A B lB","16":"E"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","16":"G Y"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","16":"B C"},E:{"2":"G O dB WB fB","16":"Y F H E A B C N D gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB ZB tB Q","16":"T"},G:{"2":"WB uB aB TC xB","16":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC GC aB HC IC","16":"FC"},J:{"2":"A","16":"F"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:7,C:"Test feature - updated"};

  var textDecoration={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L","2052":"KB P M R S YB U"},C:{"2":"eB bB G Y kB sB","1028":"0 1 2 3 4 5 6 7 8 9 q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","1060":"O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p"},D:{"2":"G Y O F H E A B C N D I J K L Z a b c d e f","226":"0 1 2 3 4 5 6 7 8 9 g h i j k l m n o p q r s t u v w x y z AB","2052":"BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F dB WB fB gB","772":"N D Q mB nB","804":"H E A B C iB XB T","1316":"hB"},F:{"2":"E B C I J K L Z a b c d e f g h i j k l m n o oB pB qB rB T ZB tB Q","226":"p q r s t u v w x","2052":"0 1 2 3 4 5 6 7 8 9 y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"2":"WB uB aB TC xB yB","292":"H D zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C T ZB Q","2052":"DB"},L:{"2052":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2052":"JC"},P:{"2":"G KC LC","2052":"MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"1":"SC"},S:{"1028":"jB"}},B:4,C:"text-decoration styling"};

  var textEmphasis={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L","164":"KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y kB sB","322":"z"},D:{"2":"G Y O F H E A B C N D I J K L Z a b c d e","164":"0 1 2 3 4 5 6 7 8 9 f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"H E A B C N D hB iB XB T Q mB nB","2":"G Y O dB WB fB","164":"F gB"},F:{"2":"E B C oB pB qB rB T ZB tB Q","164":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"1":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC xB"},H:{"2":"CC"},I:{"2":"bB G DC EC FC GC aB","164":"M HC IC"},J:{"2":"F","164":"A"},K:{"2":"A B C T ZB Q","164":"DB"},L:{"164":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"164":"JC"},P:{"164":"G KC LC MC NC OC XB PC QC"},Q:{"164":"RC"},R:{"164":"SC"},S:{"1":"jB"}},B:4,C:"text-emphasis styling"};

  var textOverflow={A:{A:{"1":"O F H E A B","2":"lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","8":"eB bB G Y O kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V T ZB tB Q","33":"E oB pB qB rB"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"1":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"DB Q","33":"A B C T ZB"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"CSS3 Text-overflow"};

  var textSizeAdjust={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","33":"C N D I J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 G Y O F H E A B C N D I J K L Z a b c d e f h i j k l m n o p q r s t u v w x y z","258":"g"},E:{"2":"G Y O F H E A B C N D dB WB gB hB iB XB T Q mB nB","258":"fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 x z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w y oB pB qB rB T ZB tB Q"},G:{"2":"WB uB aB","33":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"33":"OB"},N:{"161":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:7,C:"CSS text-size-adjust"};

  var textStroke={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D","33":"KB P M R S YB U","161":"I J K L"},C:{"2":"0 1 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB","161":"3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","450":"2"},D:{"33":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"33":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"E B C oB pB qB rB T ZB tB Q","33":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"33":"H D uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","36":"WB"},H:{"2":"CC"},I:{"2":"bB","33":"G M DC EC FC GC aB HC IC"},J:{"33":"F A"},K:{"2":"A B C T ZB Q","33":"DB"},L:{"33":"U"},M:{"161":"OB"},N:{"2":"A B"},O:{"33":"JC"},P:{"33":"G KC LC MC NC OC XB PC QC"},Q:{"33":"RC"},R:{"33":"SC"},S:{"161":"jB"}},B:7,C:"CSS text-stroke and text-fill"};

  var textUnderlineOffset={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P M R S YB U"},C:{"1":"FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB kB sB","130":"NB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"N D Q mB nB","2":"G Y O F H E A B C dB WB fB gB hB iB XB T"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"D 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"text-underline-offset"};

  var textcontent={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D WB fB gB hB iB XB T Q mB nB","16":"dB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q","16":"E"},G:{"1":"H D uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB"},H:{"1":"CC"},I:{"1":"bB G M FC GC aB HC IC","16":"DC EC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Node.textContent"};

  var textencoder={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L kB sB","132":"Z"},D:{"1":"0 1 2 3 4 5 6 7 8 9 s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r"},E:{"1":"B C N D XB T Q mB nB","2":"G Y O F H E A dB WB fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e oB pB qB rB T ZB tB Q"},G:{"1":"D 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"TextEncoder & TextDecoder"};

  var tls11={A:{A:{"1":"B","2":"O F lB","66":"H E A"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB","2":"eB bB G Y O F H E A B C N D I J K L Z a b c kB sB","66":"d","129":"MB NB FB W V VB QB RB SB TB","388":"UB KB P M OB R S"},D:{"1":"0 1 2 3 4 5 6 7 8 9 c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S","2":"G Y O F H E A B C N D I J K L Z a b","1540":"YB U vB wB cB"},E:{"1":"F H E A B C N hB iB XB T Q","2":"G Y O dB WB fB gB","513":"D mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V Q","2":"E B C oB pB qB rB T ZB tB"},G:{"1":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB"},H:{"1":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"1":"A","2":"F"},K:{"1":"DB Q","2":"A B C T ZB"},L:{"1":"U"},M:{"129":"OB"},N:{"1":"B","66":"A"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:6,C:"TLS 1.1"};

  var tls12={A:{A:{"1":"B","2":"O F lB","66":"H E A"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d kB sB","66":"e f g"},D:{"1":"0 1 2 3 4 5 6 7 8 9 j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i"},E:{"1":"F H E A B C N D hB iB XB T Q mB nB","2":"G Y O dB WB fB gB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E I oB","66":"B C pB qB rB T ZB tB Q"},G:{"1":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB"},H:{"1":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"1":"A","2":"F"},K:{"1":"DB Q","2":"A B C T ZB"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"B","66":"A"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:6,C:"TLS 1.2"};

  var tls13={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB","132":"EB PB GB","450":"5 6 7 8 9 AB BB CB DB"},D:{"1":"FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","706":"8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB"},E:{"1":"D nB","2":"G Y O F H E A B C dB WB fB gB hB iB XB T","1028":"N Q mB"},F:{"1":"BB CB EB GB HB IB JB X LB MB NB FB W V","2":"0 1 2 3 4 5 6 7 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q","706":"8 9 AB"},G:{"1":"D 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"XB PC QC","2":"G KC LC MC NC OC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:6,C:"TLS 1.3"};

  var tokenBinding={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D","194":"KB P M R S YB U","257":"I J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB kB sB","16":"R S"},D:{"2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s","16":"0 1 2 3 4 5 6 7 8 9 t u v w x y z AB BB","194":"CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H dB WB fB gB hB","16":"E A B C N D iB XB T Q mB nB"},F:{"2":"E B C I J K L Z a b c d e f g h i j oB pB qB rB T ZB tB Q","16":"0 1 2 3 4 5 6 7 8 9 k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"2":"H WB uB aB TC xB yB zB","16":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"16":"CC"},I:{"2":"bB G DC EC FC GC aB HC IC","16":"M"},J:{"2":"F A"},K:{"2":"A B C T ZB Q","16":"DB"},L:{"16":"U"},M:{"16":"OB"},N:{"2":"A","16":"B"},O:{"16":"JC"},P:{"16":"G KC LC MC NC OC XB PC QC"},Q:{"16":"RC"},R:{"16":"SC"},S:{"2":"jB"}},B:6,C:"Token Binding"};

  var touch={A:{A:{"2":"O F H E lB","8":"A B"},B:{"1":"KB P M R S YB U","578":"C N D I J K L"},C:{"1":"6 7 8 9 L Z a b c d e AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB","4":"G Y O F H E A B C N D I J K","194":"0 1 2 3 4 5 f g h i j k l m n o p q r s t u v w x y z"},D:{"1":"0 1 2 3 4 5 6 7 8 9 c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"B C DB T ZB Q","2":"A"},L:{"1":"U"},M:{"1":"OB"},N:{"8":"A","260":"B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:2,C:"Touch events"};

  var transforms2d={A:{A:{"2":"lB","8":"O F H","129":"A B","161":"E"},B:{"1":"K L KB P M R S YB U","129":"C N D I J"},C:{"1":"0 1 2 3 4 5 6 7 8 9 J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB","33":"G Y O F H E A B C N D I kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","33":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p"},E:{"1":"E A B C N D iB XB T Q mB nB","33":"G Y O F H dB WB fB gB hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V Q","2":"E oB pB","33":"B C I J K L Z a b c qB rB T ZB tB"},G:{"1":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","33":"H WB uB aB TC xB yB zB"},H:{"2":"CC"},I:{"1":"M","33":"bB G DC EC FC GC aB HC IC"},J:{"33":"F A"},K:{"1":"B C DB T ZB Q","2":"A"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:5,C:"CSS3 2D Transforms"};

  var transforms3d={A:{A:{"2":"O F H E lB","132":"A B"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E kB sB","33":"A B C N D I"},D:{"1":"0 1 2 3 4 5 6 7 8 9 q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B","33":"C N D I J K L Z a b c d e f g h i j k l m n o p"},E:{"2":"dB WB","33":"G Y O F H fB gB hB","257":"E A B C N D iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q","33":"I J K L Z a b c"},G:{"33":"H WB uB aB TC xB yB zB","257":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"DC EC FC","33":"bB G GC aB HC IC"},J:{"33":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"132":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:5,C:"CSS3 3D Transforms"};

  var trustedTypes={A:{A:{"2":"O F H E A B lB"},B:{"1":"R S YB U","2":"C N D I J K L KB P M"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"NB FB W V","2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:7,C:"Trusted Types for DOM manipulation"};

  var ttf={A:{A:{"2":"O F H lB","132":"E A B"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","2":"eB bB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V pB qB rB T ZB tB Q","2":"E oB"},G:{"1":"H D aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB"},H:{"2":"CC"},I:{"1":"bB G M EC FC GC aB HC IC","2":"DC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"132":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:6,C:"TTF/OTF - TrueType and OpenType font support"};

  var typedarrays={A:{A:{"1":"B","2":"O F H E lB","132":"A"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O"},E:{"1":"O F H E A B C N D gB hB iB XB T Q mB nB","2":"G Y dB WB","260":"fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V tB Q","2":"E B oB pB qB rB T ZB"},G:{"1":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB","260":"aB"},H:{"1":"CC"},I:{"1":"G M GC aB HC IC","2":"bB DC EC FC"},J:{"1":"A","2":"F"},K:{"1":"C DB Q","2":"A B T ZB"},L:{"1":"U"},M:{"1":"OB"},N:{"132":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:6,C:"Typed Arrays"};

  var u2f={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L","513":"KB P M R S YB U"},C:{"1":"LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB","322":"1 2 3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X"},D:{"2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r","130":"s t u","513":"0 1 2 3 4 5 6 7 8 9 v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"N D mB nB","2":"G Y O F H E A B C dB WB fB gB hB iB XB T Q"},F:{"2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s t v oB pB qB rB T ZB tB Q","513":"0 1 2 3 4 5 6 7 8 9 u w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"1":"D AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"322":"jB"}},B:6,C:"FIDO U2F API"};

  var unhandledrejection={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB kB sB"},D:{"1":"3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},E:{"1":"B C N D T Q mB nB","2":"G Y O F H E A dB WB fB gB hB iB XB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p oB pB qB rB T ZB tB Q"},G:{"1":"D 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B","16":"4B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"1":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:1,C:"unhandledrejection/rejectionhandled events"};

  var upgradeinsecurerequests={A:{A:{"2":"O F H E A B lB"},B:{"1":"K L KB P M R S YB U","2":"C N D I J"},C:{"1":"0 1 2 3 4 5 6 7 8 9 w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w"},E:{"1":"B C N D XB T Q mB nB","2":"G Y O F H E A dB WB fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j oB pB qB rB T ZB tB Q"},G:{"1":"D 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"Upgrade Insecure Requests"};

  var urlScrollToTextFragment={A:{A:{"2":"O F H E A B lB"},B:{"1":"R S YB U","2":"C N D I J K L","66":"KB P M"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB","66":"QB RB SB TB UB KB P"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"MB NB FB W V","2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB oB pB qB rB T ZB tB Q","66":"X LB"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:7,C:"URL Scroll-To-Text Fragment"};

  var url$3={A:{A:{"2":"O F H E A B lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c","130":"d e f g h i j k l"},E:{"1":"H E A B C N D hB iB XB T Q mB nB","2":"G Y O dB WB fB gB","130":"F"},F:{"1":"0 1 2 3 4 5 6 7 8 9 Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q","130":"I J K L"},G:{"1":"H D zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC xB","130":"yB"},H:{"2":"CC"},I:{"1":"M IC","2":"bB G DC EC FC GC aB","130":"HC"},J:{"2":"F","130":"A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"URL API"};

  var urlsearchparams={A:{A:{"2":"O F H E A B lB"},B:{"1":"K L KB P M R S YB U","2":"C N D I J"},C:{"1":"0 1 2 3 4 5 6 7 8 9 y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i kB sB","132":"j k l m n o p q r s t u v w x"},D:{"1":"3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},E:{"1":"B C N D XB T Q mB nB","2":"G Y O F H E A dB WB fB gB hB iB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p oB pB qB rB T ZB tB Q"},G:{"1":"D 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","2":"G"},Q:{"1":"RC"},R:{"2":"SC"},S:{"1":"jB"}},B:1,C:"URLSearchParams"};

  var useStrict={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C"},E:{"1":"O F H E A B C N D gB hB iB XB T Q mB nB","2":"G dB WB","132":"Y fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V tB Q","2":"E B oB pB qB rB T ZB"},G:{"1":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB"},H:{"1":"CC"},I:{"1":"bB G M GC aB HC IC","2":"DC EC FC"},J:{"1":"F A"},K:{"1":"C DB ZB Q","2":"A B T"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:6,C:"ECMAScript 5 Strict Mode"};

  var userSelectNone={A:{A:{"2":"O F H E lB","33":"A B"},B:{"1":"KB P M R S YB U","33":"C N D I J K L"},C:{"1":"NB FB W V VB QB RB SB TB UB KB P M OB R S","33":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB kB sB"},D:{"1":"8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","33":"0 1 2 3 4 5 6 7 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z"},E:{"33":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q","33":"I J K L Z a b c d e f g h i j k l m n o p q r s t u"},G:{"33":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","33":"bB G DC EC FC GC aB HC IC"},J:{"33":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"33":"A B"},O:{"2":"JC"},P:{"1":"LC MC NC OC XB PC QC","33":"G KC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"33":"jB"}},B:5,C:"CSS user-select: none"};

  var userTiming={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e"},E:{"1":"B C N D T Q mB nB","2":"G Y O F H E A dB WB fB gB hB iB XB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"1":"D 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B"},H:{"2":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:2,C:"User Timing API"};

  var variableFonts={A:{A:{"2":"O F H E A B lB"},B:{"1":"K L KB P M R S YB U","2":"C N D I J"},C:{"2":"0 1 2 3 4 5 6 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB","4609":"GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","4674":"PB","5698":"EB","7490":"7 8 9 AB BB","7746":"CB DB"},D:{"1":"LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB","4097":"X","4290":"DB EB PB","6148":"GB HB IB JB"},E:{"2":"G Y O F H E A dB WB fB gB hB iB XB","4609":"B C T Q","8193":"N D mB nB"},F:{"1":"8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"0 1 2 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q","4097":"7","6148":"3 4 5 6"},G:{"1":"D 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B","4097":"4B 5B 6B 7B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"4097":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC","4097":"NC OC XB PC QC"},Q:{"4097":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"Variable fonts"};

  var vibration={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A kB sB","33":"B C N D I"},D:{"1":"0 1 2 3 4 5 6 7 8 9 k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"1":"A","2":"F"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:2,C:"Vibration API"};

  var video={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB","260":"G Y O F H E A B C N D I J K L Z kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A fB gB hB iB XB","2":"dB WB","513":"B C N D T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V qB rB T ZB tB Q","2":"E oB pB"},G:{"1":"H WB uB aB TC xB yB zB 0B 1B 2B 3B","513":"D 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"bB G M FC GC aB HC IC","132":"DC EC"},J:{"1":"F A"},K:{"1":"B C DB T ZB Q","2":"A"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Video element"};

  var videotracks={A:{A:{"2":"O F H E A B lB"},B:{"1":"C N D I J K L","322":"KB P M R S YB U"},C:{"2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m kB sB","194":"0 1 2 3 4 5 6 7 8 9 n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y","322":"0 1 2 3 4 5 6 7 8 9 z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"F H E A B C N D gB hB iB XB T Q mB nB","2":"G Y O dB WB fB"},F:{"2":"E B C I J K L Z a b c d e f g h i j k l oB pB qB rB T ZB tB Q","322":"0 1 2 3 4 5 6 7 8 9 m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"1":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC xB"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C T ZB Q","322":"DB"},L:{"322":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"194":"jB"}},B:1,C:"Video Tracks"};

  var viewportUnits={A:{A:{"2":"O F H lB","132":"E","260":"A B"},B:{"1":"J K L KB P M R S YB U","260":"C N D I"},C:{"1":"0 1 2 3 4 5 6 7 8 9 Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z","260":"a b c d e f"},E:{"1":"F H E A B C N D gB hB iB XB T Q mB nB","2":"G Y dB WB fB","260":"O"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"1":"H D zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC","516":"yB","772":"xB"},H:{"2":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"1":"A","2":"F"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"260":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"Viewport units: vw, vh, vmin, vmax"};

  var waiAria={A:{A:{"2":"O F lB","4":"H E A B"},B:{"4":"C N D I J K L KB P M R S YB U"},C:{"4":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"4":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"dB WB","4":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB"},F:{"2":"E","4":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"4":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"4":"CC"},I:{"2":"bB G DC EC FC GC aB","4":"M HC IC"},J:{"2":"F A"},K:{"4":"A B C DB T ZB Q"},L:{"4":"U"},M:{"4":"OB"},N:{"4":"A B"},O:{"2":"JC"},P:{"4":"G KC LC MC NC OC XB PC QC"},Q:{"4":"RC"},R:{"4":"SC"},S:{"4":"jB"}},B:2,C:"WAI-ARIA Accessibility features"};

  var wakeLock={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L","194":"KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB","194":"W V VB QB RB SB TB UB KB P M R S"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB oB pB qB rB T ZB tB Q","194":"CB EB GB HB IB JB X LB MB NB FB W V"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:4,C:"Screen Wake Lock API"};

  var wasm={A:{A:{"2":"O F H E A B lB"},B:{"1":"J K L KB P M R S YB U","2":"C N D","578":"I"},C:{"1":"7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB","194":"1 2 3 4 5","1025":"6"},D:{"1":"BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","322":"5 6 7 8 9 AB"},E:{"1":"B C N D T Q mB nB","2":"G Y O F H E A dB WB fB gB hB iB XB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r oB pB qB rB T ZB tB Q","322":"s t u v w x"},G:{"1":"D 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"MC NC OC XB PC QC","2":"G KC LC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"194":"jB"}},B:6,C:"WebAssembly"};

  var wav={A:{A:{"2":"O F H E A B lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","2":"eB bB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F"},E:{"1":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V qB rB T ZB tB Q","2":"E oB pB"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"bB G M FC GC aB HC IC","16":"DC EC"},J:{"1":"F A"},K:{"1":"B C DB T ZB Q","16":"A"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:6,C:"Wav audio format"};

  var wbrElement={A:{A:{"1":"O F lB","2":"H E A B"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D WB fB gB hB iB XB T Q mB nB","16":"dB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q","16":"E"},G:{"1":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB uB aB"},H:{"1":"CC"},I:{"1":"bB G M FC GC aB HC IC","16":"DC EC"},J:{"1":"F A"},K:{"1":"B C DB T ZB Q","2":"A"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"wbr (word break opportunity) element"};

  var webAnimation={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L","260":"KB P M R S YB U"},C:{"2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m kB sB","260":"DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","516":"1 2 3 4 5 6 7 8 9 AB BB CB","580":"0 n o p q r s t u v w x y z"},D:{"2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p","132":"q r s","260":"0 1 2 3 4 5 6 7 8 9 t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A dB WB fB gB hB iB XB","1090":"B C N T Q","2049":"D mB nB"},F:{"2":"E B C I J K L Z a b c oB pB qB rB T ZB tB Q","132":"d e f","260":"0 1 2 3 4 5 6 7 8 9 g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B","1090":"4B 5B 6B 7B 8B 9B AC","2049":"D BC"},H:{"2":"CC"},I:{"2":"bB G DC EC FC GC aB HC IC","260":"M"},J:{"2":"F A"},K:{"2":"A B C T ZB Q","260":"DB"},L:{"260":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"260":"JC"},P:{"260":"G KC LC MC NC OC XB PC QC"},Q:{"260":"RC"},R:{"260":"SC"},S:{"516":"jB"}},B:5,C:"Web Animations API"};

  var webAppManifest={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J","130":"K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB kB sB","578":"SB TB UB KB P M OB R S"},D:{"1":"0 1 2 3 4 5 6 7 8 9 t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B","260":"D 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"2":"jB"}},B:5,C:"Add to home screen (A2HS)"};

  var webBluetooth={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L","1025":"KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y","194":"0 1 2 3 4 5 6 z","706":"7 8 9","1025":"AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"E B C I J K L Z a b c d e f g h i j k l m n o p oB pB qB rB T ZB tB Q","450":"q r s t","706":"u v w","1025":"0 1 2 3 4 5 6 7 8 9 x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G DC EC FC GC aB HC IC","1025":"M"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1025":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"LC MC NC OC XB PC QC","2":"G KC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:7,C:"Web Bluetooth"};

  var webShare={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB P","516":"M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","130":"L Z a b c d e"},E:{"1":"D nB","2":"G Y O F H E A B C dB WB fB gB hB iB XB T","2049":"N Q mB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"D","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B","2049":"7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G DC EC FC GC aB HC","258":"M IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"NC OC XB PC QC","2":"G","258":"KC LC MC"},Q:{"2":"RC"},R:{"16":"SC"},S:{"2":"jB"}},B:5,C:"Web Share API"};

  var webauthn={A:{A:{"2":"O F H E A B lB"},B:{"1":"L KB P M R S YB U","2":"C","226":"N D I J K"},C:{"1":"EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB kB sB"},D:{"1":"LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X"},E:{"1":"N D mB nB","2":"G Y O F H E A B C dB WB fB gB hB iB XB T","322":"Q"},F:{"1":"8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"0 1 2 3 4 5 6 7 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q"},G:{"2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B","578":"9B","2052":"D","3076":"AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:2,C:"Web Authentication API"};

  var webgl={A:{A:{"2":"lB","8":"O F H E A","129":"B"},B:{"1":"KB P M R S YB U","129":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB","129":"G Y O F H E A B C N D I J K L Z a b c d"},D:{"1":"0 1 2 3 4 5 6 7 8 9 n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F","129":"H E A B C N D I J K L Z a b c d e f g h i j k l m"},E:{"1":"H E A B C N D iB XB T Q mB nB","2":"G Y dB WB","129":"O F fB gB hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B oB pB qB rB T ZB tB","129":"C I J K L Q"},G:{"1":"H D zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC xB yB"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"1":"A","2":"F"},K:{"1":"C DB Q","2":"A B T ZB"},L:{"1":"U"},M:{"1":"OB"},N:{"8":"A","129":"B"},O:{"129":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"129":"jB"}},B:6,C:"WebGL - 3D Canvas graphics"};

  var webgl2={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e kB sB","194":"w x y","450":"f g h i j k l m n o p q r s t u v","2242":"0 1 2 3 4 z"},D:{"1":"AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w","578":"0 1 2 3 4 5 6 7 8 9 x y z"},E:{"1":"nB","2":"G Y O F H E A dB WB fB gB hB iB","1090":"B C N D XB T Q mB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w oB pB qB rB T ZB tB Q"},G:{"2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B","1090":"D 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"MC NC OC XB PC QC","2":"G KC LC"},Q:{"578":"RC"},R:{"2":"SC"},S:{"2242":"jB"}},B:6,C:"WebGL 2.0"};

  var webgpu={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB","578":"P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB kB sB","194":"HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB","578":"P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B dB WB fB gB hB iB XB","322":"C N D T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"194":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:7,C:"WebGPU"};

  var webhid={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L","194":"KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB","194":"UB KB P M R S YB","450":"U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB oB pB qB rB T ZB tB Q","194":"X LB MB NB FB W V"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:7,C:"WebHID API"};

  var webm={A:{A:{"2":"O F H lB","520":"E A B"},B:{"1":"KB P M R S YB U","8":"C N","388":"D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB","132":"G Y O F H E A B C N D I J K L Z a b c d e f g h"},D:{"1":"0 1 2 3 4 5 6 7 8 9 f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y","132":"O F H E A B C N D I J K L Z a b c d e"},E:{"2":"dB","8":"G Y WB fB","520":"O F H E A B C gB hB iB XB T","1028":"N Q mB","2052":"D nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E oB pB qB","132":"B C I rB T ZB tB Q"},G:{"2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B","1028":"D 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"1":"M","2":"DC EC","132":"bB G FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C T ZB Q","132":"DB"},L:{"1":"U"},M:{"1":"OB"},N:{"8":"A B"},O:{"1":"JC"},P:{"1":"KC LC MC NC OC XB PC QC","132":"G"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:6,C:"WebM video format"};

  var webnfc={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L KB","450":"P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB","450":"P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X oB pB qB rB T ZB tB Q","450":"LB MB NB FB W V"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"450":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:7,C:"Web NFC"};

  var webp={A:{A:{"2":"O F H E A B lB"},B:{"1":"L KB P M R S YB U","2":"C N D I J K"},C:{"1":"JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB","8":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y","8":"O F H","132":"E A B C N D I J K L Z a b c","260":"d e f g h i j k l"},E:{"2":"G Y O F H E A B C N dB WB fB gB hB iB XB T Q mB","516":"D nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E oB pB qB","8":"B rB","132":"T ZB tB","260":"C I J K L Q"},G:{"1":"D","2":"H WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"1":"CC"},I:{"1":"M aB HC IC","2":"bB DC EC FC","132":"G GC"},J:{"2":"F A"},K:{"1":"C DB T ZB Q","2":"A","132":"B"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"8":"jB"}},B:7,C:"WebP image format"};

  var websockets={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB kB sB","132":"G Y","292":"O F H E A"},D:{"1":"0 1 2 3 4 5 6 7 8 9 J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","132":"G Y O F H E A B C N D","260":"I"},E:{"1":"F H E A B C N D hB iB XB T Q mB nB","2":"G dB WB","132":"Y fB","260":"O gB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V Q","2":"E oB pB qB rB","132":"B C T ZB tB"},G:{"1":"H D xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB","132":"aB TC"},H:{"2":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"1":"A","129":"F"},K:{"1":"DB Q","2":"A","132":"B C T ZB"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Web Sockets"};

  var webusb={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"0 1 2 3 4 5 6 7 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z","66":"8 9 AB BB CB DB EB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"2 3 4 5 6 7 8 9 AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u oB pB qB rB T ZB tB Q","66":"0 1 v w x y z"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"1":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"1":"NC OC XB PC QC","2":"G KC LC MC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:7,C:"WebUSB"};

  var webvr={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D P M R S YB U","66":"KB","257":"I J K L"},C:{"2":"0 1 2 3 4 5 6 7 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB","129":"9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","194":"8"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB P M R S YB U vB wB cB","66":"BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x LB MB NB FB W V oB pB qB rB T ZB tB Q","66":"0 1 2 3 4 5 6 7 8 9 y z AB BB CB EB GB HB IB JB X"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"2":"U"},M:{"2":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"513":"G","516":"KC LC MC NC OC XB PC QC"},Q:{"2":"RC"},R:{"66":"SC"},S:{"2":"jB"}},B:7,C:"WebVR API"};

  var webvtt={A:{A:{"1":"A B","2":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"2":"eB bB G Y O F H E A B C N D I J K L Z a b c d kB sB","66":"e f g h i j k","129":"0 1 2 3 4 5 6 7 8 9 l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S"},D:{"1":"0 1 2 3 4 5 6 7 8 9 L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K"},E:{"1":"O F H E A B C N D gB hB iB XB T Q mB nB","2":"G Y dB WB fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q"},G:{"1":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB TC xB"},H:{"2":"CC"},I:{"1":"M HC IC","2":"bB G DC EC FC GC aB"},J:{"1":"A","2":"F"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"B","2":"A"},O:{"2":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"129":"jB"}},B:5,C:"WebVTT - Web Video Text Tracks"};

  var webworkers={A:{A:{"1":"A B","2":"lB","8":"O F H E"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","8":"eB bB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB","8":"dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V rB T ZB tB Q","2":"E oB","8":"pB qB"},G:{"1":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB"},H:{"2":"CC"},I:{"1":"M DC HC IC","2":"bB G EC FC GC aB"},J:{"1":"F A"},K:{"1":"B C DB T ZB Q","8":"A"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Web Workers"};

  var webxr={A:{A:{"2":"O F H E A B lB"},B:{"2":"C N D I J K L","132":"KB P M R S YB U"},C:{"2":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB kB sB","322":"TB UB KB P M OB R S"},D:{"2":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB","66":"JB X LB MB NB FB W V VB QB RB SB TB UB","132":"KB P M R S YB U vB wB cB"},E:{"2":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"2":"0 1 2 3 4 5 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z oB pB qB rB T ZB tB Q","66":"6 7 8 9 AB BB CB EB GB HB IB JB","132":"X LB MB NB FB W V"},G:{"2":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"2":"CC"},I:{"2":"bB G M DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"2":"A B C DB T ZB Q"},L:{"132":"U"},M:{"322":"OB"},N:{"2":"A B"},O:{"2":"JC"},P:{"2":"G KC LC MC NC OC XB PC","132":"QC"},Q:{"2":"RC"},R:{"2":"SC"},S:{"2":"jB"}},B:5,C:"WebXR Device API"};

  var willChange={A:{A:{"2":"O F H E A B lB"},B:{"1":"KB P M R S YB U","2":"C N D I J K L"},C:{"1":"0 1 2 3 4 5 6 7 8 9 q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i kB sB","194":"j k l m n o p"},D:{"1":"0 1 2 3 4 5 6 7 8 9 q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p"},E:{"1":"A B C N D iB XB T Q mB nB","2":"G Y O F H E dB WB fB gB hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c d oB pB qB rB T ZB tB Q"},G:{"1":"D 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:5,C:"CSS will-change property"};

  var woff={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S sB","2":"eB bB kB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G"},E:{"1":"O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"G Y dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V T ZB tB Q","2":"E B oB pB qB rB"},G:{"1":"H D TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB"},H:{"2":"CC"},I:{"1":"M HC IC","2":"bB DC EC FC GC aB","130":"G"},J:{"1":"F A"},K:{"1":"B C DB T ZB Q","2":"A"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:2,C:"WOFF - Web Open Font Format"};

  var woff2={A:{A:{"2":"O F H E A B lB"},B:{"1":"D I J K L KB P M R S YB U","2":"C N"},C:{"1":"0 1 2 3 4 5 6 7 8 9 t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","2":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p"},E:{"1":"C N D Q mB nB","2":"G Y O F H E dB WB fB gB hB iB","132":"A B XB T"},F:{"1":"0 1 2 3 4 5 6 7 8 9 d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C I J K L Z a b c oB pB qB rB T ZB tB Q"},G:{"1":"D 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"H WB uB aB TC xB yB zB 0B 1B"},H:{"2":"CC"},I:{"1":"M","2":"bB G DC EC FC GC aB HC IC"},J:{"2":"F A"},K:{"1":"DB","2":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"2":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"WOFF 2.0 - Web Open Font Format"};

  var wordBreak={A:{A:{"1":"O F H E A B lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB G Y O F H E A B C N D kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","4":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x"},E:{"1":"E A B C N D iB XB T Q mB nB","4":"G Y O F H dB WB fB gB hB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","2":"E B C oB pB qB rB T ZB tB Q","4":"I J K L Z a b c d e f g h i j k"},G:{"1":"D 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","4":"H WB uB aB TC xB yB zB"},H:{"2":"CC"},I:{"1":"M","4":"bB G DC EC FC GC aB HC IC"},J:{"4":"F A"},K:{"2":"A B C T ZB Q","4":"DB"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"4":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"4":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:5,C:"CSS3 word-break"};

  var wordwrap={A:{A:{"4":"O F H E A B lB"},B:{"1":"L KB P M R S YB U","4":"C N D I J K"},C:{"1":"3 4 5 6 7 8 9 AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB","4":"0 1 2 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","4":"G Y O F H E A B C N D I J K L Z a b c"},E:{"1":"F H E A B C N D gB hB iB XB T Q mB nB","4":"G Y O dB WB fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V Q","2":"E oB pB","4":"B C qB rB T ZB tB"},G:{"1":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","4":"WB uB aB TC xB"},H:{"4":"CC"},I:{"1":"M HC IC","4":"bB G DC EC FC GC aB"},J:{"1":"A","4":"F"},K:{"1":"DB","4":"A B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"4":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"4":"jB"}},B:5,C:"CSS3 Overflow-wrap"};

  var xDocMessaging={A:{A:{"2":"O F lB","132":"H E","260":"A B"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB","2":"eB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D fB gB hB iB XB T Q mB nB","2":"dB WB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q","2":"E"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"1":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"4":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"Cross-document messaging"};

  var xFrameOptions={A:{A:{"1":"H E A B","2":"O F lB"},B:{"1":"C N D I J K L","4":"KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB","4":"G Y O F H E A B C N D I J K FB W V VB QB RB SB TB UB KB P M OB R S","16":"eB bB kB sB"},D:{"4":"0 1 2 3 4 5 6 7 8 9 g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","16":"G Y O F H E A B C N D I J K L Z a b c d e f"},E:{"4":"O F H E A B C N D fB gB hB iB XB T Q mB nB","16":"G Y dB WB"},F:{"4":"0 1 2 3 4 5 6 7 8 9 C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V tB Q","16":"E B oB pB qB rB T ZB"},G:{"4":"H D yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","16":"WB uB aB TC xB"},H:{"2":"CC"},I:{"4":"G M GC aB HC IC","16":"bB DC EC FC"},J:{"4":"F A"},K:{"4":"DB Q","16":"A B C T ZB"},L:{"4":"U"},M:{"4":"OB"},N:{"1":"A B"},O:{"4":"JC"},P:{"4":"G KC LC MC NC OC XB PC QC"},Q:{"4":"RC"},R:{"4":"SC"},S:{"1":"jB"}},B:6,C:"X-Frame-Options HTTP header"};

  var xhr2={A:{A:{"2":"O F H E lB","132":"A B"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","2":"eB bB","260":"A B","388":"O F H E","900":"G Y kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","16":"G Y O","132":"j k","388":"F H E A B C N D I J K L Z a b c d e f g h i"},E:{"1":"H E A B C N D hB iB XB T Q mB nB","2":"G dB WB","132":"F gB","388":"Y O fB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 C L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V Q","2":"E B oB pB qB rB T ZB tB","132":"I J K"},G:{"1":"H D zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","2":"WB uB aB","132":"yB","388":"TC xB"},H:{"2":"CC"},I:{"1":"M IC","2":"DC EC FC","388":"HC","900":"bB G GC aB"},J:{"132":"A","388":"F"},K:{"1":"C DB Q","2":"A B T ZB"},L:{"1":"U"},M:{"1":"OB"},N:{"132":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:1,C:"XMLHttpRequest advanced features"};

  var xhtml={A:{A:{"1":"E A B","2":"O F H lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"1":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"1":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"1":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"1":"CC"},I:{"1":"bB G M DC EC FC GC aB HC IC"},J:{"1":"F A"},K:{"1":"A B C DB T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"2":"SC"},S:{"1":"jB"}},B:1,C:"XHTML served as application/xhtml+xml"};

  var xhtmlsmil={A:{A:{"2":"E A B lB","4":"O F H"},B:{"2":"C N D I J K L","8":"KB P M R S YB U"},C:{"8":"0 1 2 3 4 5 6 7 8 9 eB bB G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S kB sB"},D:{"8":"0 1 2 3 4 5 6 7 8 9 G Y O F H E A B C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB"},E:{"8":"G Y O F H E A B C N D dB WB fB gB hB iB XB T Q mB nB"},F:{"8":"0 1 2 3 4 5 6 7 8 9 E B C I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V oB pB qB rB T ZB tB Q"},G:{"8":"H D WB uB aB TC xB yB zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC"},H:{"8":"CC"},I:{"8":"bB G M DC EC FC GC aB HC IC"},J:{"8":"F A"},K:{"8":"A B C DB T ZB Q"},L:{"8":"U"},M:{"8":"OB"},N:{"2":"A B"},O:{"8":"JC"},P:{"8":"G KC LC MC NC OC XB PC QC"},Q:{"8":"RC"},R:{"8":"SC"},S:{"8":"jB"}},B:7,C:"XHTML+SMIL animation"};

  var xmlSerializer={A:{A:{"1":"A B","260":"O F H E lB"},B:{"1":"C N D I J K L KB P M R S YB U"},C:{"1":"0 1 2 3 4 5 6 7 8 9 C N D I J K L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M OB R S","132":"B","260":"eB bB G Y O F kB sB","516":"H E A"},D:{"1":"0 1 2 3 4 5 6 7 8 9 l m n o p q r s t u v w x y z AB BB CB DB EB PB GB HB IB JB X LB MB NB FB W V VB QB RB SB TB UB KB P M R S YB U vB wB cB","132":"G Y O F H E A B C N D I J K L Z a b c d e f g h i j k"},E:{"1":"H E A B C N D hB iB XB T Q mB nB","132":"G Y O F dB WB fB gB"},F:{"1":"0 1 2 3 4 5 6 7 8 9 L Z a b c d e f g h i j k l m n o p q r s t u v w x y z AB BB CB EB GB HB IB JB X LB MB NB FB W V","16":"E oB","132":"B C I J K pB qB rB T ZB tB Q"},G:{"1":"H D zB 0B 1B 2B 3B 4B 5B 6B 7B 8B 9B AC BC","132":"WB uB aB TC xB yB"},H:{"132":"CC"},I:{"1":"M HC IC","132":"bB G DC EC FC GC aB"},J:{"132":"F A"},K:{"1":"DB","16":"A","132":"B C T ZB Q"},L:{"1":"U"},M:{"1":"OB"},N:{"1":"A B"},O:{"1":"JC"},P:{"1":"G KC LC MC NC OC XB PC QC"},Q:{"1":"RC"},R:{"1":"SC"},S:{"1":"jB"}},B:4,C:"DOM Parsing and Serialization"};

  var features={"aac":aac,"abortcontroller":abortcontroller,"ac3-ec3":ac3Ec3,"accelerometer":accelerometer,"addeventlistener":addeventlistener,"alternate-stylesheet":alternateStylesheet,"ambient-light":ambientLight,"apng":apng,"array-find-index":arrayFindIndex,"array-find":arrayFind,"array-flat":arrayFlat,"array-includes":arrayIncludes,"arrow-functions":arrowFunctions,"asmjs":asmjs,"async-clipboard":asyncClipboard,"async-functions":asyncFunctions,"async-iterations-and-generators":asyncIterationsAndGenerators,"atob-btoa":atobBtoa,"audio-api":audioApi,"audio":audio,"audiotracks":audiotracks,"autofocus":autofocus,"auxclick":auxclick,"av1":av1,"avif":avif,"background-attachment":backgroundAttachment,"background-clip-text":backgroundClipText,"background-img-opts":backgroundImgOpts,"background-position-x-y":backgroundPositionXY,"background-repeat-round-space":backgroundRepeatRoundSpace,"background-sync":backgroundSync,"battery-status":batteryStatus,"beacon":beacon,"beforeafterprint":beforeafterprint,"bigint":bigint,"blobbuilder":blobbuilder,"bloburls":bloburls,"border-image":borderImage,"border-radius":borderRadius,"broadcastchannel":broadcastchannel,"brotli":brotli,"calc":calc,"canvas-blending":canvasBlending,"canvas-text":canvasText,"canvas":canvas,"ch-unit":chUnit,"chacha20-poly1305":chacha20Poly1305,"channel-messaging":channelMessaging,"childnode-remove":childnodeRemove,"classlist":classlist,"clear-site-data-header":clearSiteDataHeader,"client-hints-dpr-width-viewport":clientHintsDprWidthViewport,"clipboard":clipboard,"comparedocumentposition":comparedocumentposition,"console-basic":consoleBasic,"console-time":consoleTime,"const":_const,"constraint-validation":constraintValidation,"contenteditable":contenteditable,"contentsecuritypolicy":contentsecuritypolicy,"contentsecuritypolicy2":contentsecuritypolicy2,"cookie-store-api":cookieStoreApi,"cors":cors,"createimagebitmap":createimagebitmap,"credential-management":credentialManagement,"cryptography":cryptography,"css-all":cssAll,"css-animation":cssAnimation,"css-any-link":cssAnyLink,"css-appearance":cssAppearance,"css-apply-rule":cssApplyRule,"css-at-counter-style":cssAtCounterStyle,"css-backdrop-filter":cssBackdropFilter,"css-background-offsets":cssBackgroundOffsets,"css-backgroundblendmode":cssBackgroundblendmode,"css-boxdecorationbreak":cssBoxdecorationbreak,"css-boxshadow":cssBoxshadow,"css-canvas":cssCanvas,"css-caret-color":cssCaretColor,"css-case-insensitive":cssCaseInsensitive,"css-clip-path":cssClipPath,"css-color-adjust":cssColorAdjust,"css-color-function":cssColorFunction,"css-conic-gradients":cssConicGradients,"css-containment":cssContainment,"css-content-visibility":cssContentVisibility,"css-counters":cssCounters,"css-crisp-edges":cssCrispEdges,"css-cross-fade":cssCrossFade,"css-default-pseudo":cssDefaultPseudo,"css-descendant-gtgt":cssDescendantGtgt,"css-deviceadaptation":cssDeviceadaptation,"css-dir-pseudo":cssDirPseudo,"css-display-contents":cssDisplayContents,"css-element-function":cssElementFunction,"css-env-function":cssEnvFunction,"css-exclusions":cssExclusions,"css-featurequeries":cssFeaturequeries,"css-filter-function":cssFilterFunction,"css-filters":cssFilters,"css-first-letter":cssFirstLetter,"css-first-line":cssFirstLine,"css-fixed":cssFixed,"css-focus-visible":cssFocusVisible,"css-focus-within":cssFocusWithin,"css-font-rendering-controls":cssFontRenderingControls,"css-font-stretch":cssFontStretch,"css-gencontent":cssGencontent,"css-gradients":cssGradients,"css-grid":cssGrid,"css-hanging-punctuation":cssHangingPunctuation,"css-has":cssHas,"css-hyphenate":cssHyphenate,"css-hyphens":cssHyphens,"css-image-orientation":cssImageOrientation,"css-image-set":cssImageSet,"css-in-out-of-range":cssInOutOfRange,"css-indeterminate-pseudo":cssIndeterminatePseudo,"css-initial-letter":cssInitialLetter,"css-initial-value":cssInitialValue,"css-letter-spacing":cssLetterSpacing,"css-line-clamp":cssLineClamp,"css-logical-props":cssLogicalProps,"css-marker-pseudo":cssMarkerPseudo,"css-masks":cssMasks,"css-matches-pseudo":cssMatchesPseudo,"css-math-functions":cssMathFunctions,"css-media-interaction":cssMediaInteraction,"css-media-resolution":cssMediaResolution,"css-media-scripting":cssMediaScripting,"css-mediaqueries":cssMediaqueries,"css-mixblendmode":cssMixblendmode,"css-motion-paths":cssMotionPaths,"css-namespaces":cssNamespaces,"css-not-sel-list":cssNotSelList,"css-nth-child-of":cssNthChildOf,"css-opacity":cssOpacity,"css-optional-pseudo":cssOptionalPseudo,"css-overflow-anchor":cssOverflowAnchor,"css-overflow":cssOverflow,"css-overscroll-behavior":cssOverscrollBehavior,"css-page-break":cssPageBreak,"css-paged-media":cssPagedMedia,"css-paint-api":cssPaintApi,"css-placeholder-shown":cssPlaceholderShown,"css-placeholder":cssPlaceholder,"css-read-only-write":cssReadOnlyWrite,"css-rebeccapurple":cssRebeccapurple,"css-reflections":cssReflections,"css-regions":cssRegions,"css-repeating-gradients":cssRepeatingGradients,"css-resize":cssResize,"css-revert-value":cssRevertValue,"css-rrggbbaa":cssRrggbbaa,"css-scroll-behavior":cssScrollBehavior,"css-scrollbar":cssScrollbar,"css-sel2":cssSel2,"css-sel3":cssSel3,"css-selection":cssSelection,"css-shapes":cssShapes,"css-snappoints":cssSnappoints,"css-sticky":cssSticky,"css-subgrid":cssSubgrid,"css-supports-api":cssSupportsApi,"css-table":cssTable,"css-text-align-last":cssTextAlignLast,"css-text-indent":cssTextIndent,"css-text-justify":cssTextJustify,"css-text-orientation":cssTextOrientation,"css-text-spacing":cssTextSpacing,"css-textshadow":cssTextshadow,"css-touch-action-2":cssTouchAction2,"css-touch-action":cssTouchAction,"css-transitions":cssTransitions,"css-unicode-bidi":cssUnicodeBidi,"css-unset-value":cssUnsetValue,"css-variables":cssVariables,"css-widows-orphans":cssWidowsOrphans,"css-writing-mode":cssWritingMode,"css-zoom":cssZoom,"css3-attr":css3Attr,"css3-boxsizing":css3Boxsizing,"css3-colors":css3Colors,"css3-cursors-grab":css3CursorsGrab,"css3-cursors-newer":css3CursorsNewer,"css3-cursors":css3Cursors,"css3-tabsize":css3Tabsize,"currentcolor":currentcolor,"custom-elements":customElements,"custom-elementsv1":customElementsv1,"customevent":customevent,"datalist":datalist,"dataset":dataset,"datauri":datauri,"date-tolocaledatestring":dateTolocaledatestring,"details":details,"deviceorientation":deviceorientation,"devicepixelratio":devicepixelratio,"dialog":dialog,"dispatchevent":dispatchevent,"dnssec":dnssec,"do-not-track":doNotTrack,"document-currentscript":documentCurrentscript,"document-evaluate-xpath":documentEvaluateXpath,"document-execcommand":documentExeccommand,"document-policy":documentPolicy,"document-scrollingelement":documentScrollingelement,"documenthead":documenthead,"dom-manip-convenience":domManipConvenience,"dom-range":domRange,"domcontentloaded":domcontentloaded,"domfocusin-domfocusout-events":domfocusinDomfocusoutEvents,"dommatrix":dommatrix,"download":download,"dragndrop":dragndrop,"element-closest":elementClosest,"element-from-point":elementFromPoint,"element-scroll-methods":elementScrollMethods,"eme":eme,"eot":eot,"es5":es5,"es6-class":es6Class,"es6-generators":es6Generators,"es6-module-dynamic-import":es6ModuleDynamicImport,"es6-module":es6Module,"es6-number":es6Number,"es6-string-includes":es6StringIncludes,"es6":es6,"eventsource":eventsource,"extended-system-fonts":extendedSystemFonts,"feature-policy":featurePolicy,"fetch":fetch,"fieldset-disabled":fieldsetDisabled,"fileapi":fileapi,"filereader":filereader,"filereadersync":filereadersync,"filesystem":filesystem,"flac":flac,"flexbox-gap":flexboxGap,"flexbox":flexbox,"flow-root":flowRoot,"focusin-focusout-events":focusinFocusoutEvents,"focusoptions-preventscroll":focusoptionsPreventscroll,"font-family-system-ui":fontFamilySystemUi,"font-feature":fontFeature,"font-kerning":fontKerning,"font-loading":fontLoading,"font-size-adjust":fontSizeAdjust,"font-smooth":fontSmooth,"font-unicode-range":fontUnicodeRange,"font-variant-alternates":fontVariantAlternates,"font-variant-east-asian":fontVariantEastAsian,"font-variant-numeric":fontVariantNumeric,"fontface":fontface,"form-attribute":formAttribute,"form-submit-attributes":formSubmitAttributes,"form-validation":formValidation,"forms":forms,"fullscreen":fullscreen,"gamepad":gamepad,"geolocation":geolocation,"getboundingclientrect":getboundingclientrect,"getcomputedstyle":getcomputedstyle,"getelementsbyclassname":getelementsbyclassname,"getrandomvalues":getrandomvalues,"gyroscope":gyroscope,"hardwareconcurrency":hardwareconcurrency,"hashchange":hashchange,"heif":heif,"hevc":hevc,"hidden":hidden,"high-resolution-time":highResolutionTime,"history":history,"html-media-capture":htmlMediaCapture,"html5semantic":html5semantic,"http-live-streaming":httpLiveStreaming,"http2":http2,"http3":http3,"iframe-sandbox":iframeSandbox,"iframe-seamless":iframeSeamless,"iframe-srcdoc":iframeSrcdoc,"imagecapture":imagecapture,"ime":ime,"img-naturalwidth-naturalheight":imgNaturalwidthNaturalheight,"imports":imports,"indeterminate-checkbox":indeterminateCheckbox,"indexeddb":indexeddb,"indexeddb2":indexeddb2,"inline-block":inlineBlock,"innertext":innertext,"input-autocomplete-onoff":inputAutocompleteOnoff,"input-color":inputColor,"input-datetime":inputDatetime,"input-email-tel-url":inputEmailTelUrl,"input-event":inputEvent,"input-file-accept":inputFileAccept,"input-file-directory":inputFileDirectory,"input-file-multiple":inputFileMultiple,"input-inputmode":inputInputmode,"input-minlength":inputMinlength,"input-number":inputNumber,"input-pattern":inputPattern,"input-placeholder":inputPlaceholder,"input-range":inputRange,"input-search":inputSearch,"input-selection":inputSelection,"insert-adjacent":insertAdjacent,"insertadjacenthtml":insertadjacenthtml,"internationalization":internationalization,"intersectionobserver-v2":intersectionobserverV2,"intersectionobserver":intersectionobserver,"intl-pluralrules":intlPluralrules,"intrinsic-width":intrinsicWidth,"jpeg2000":jpeg2000,"jpegxr":jpegxr,"js-regexp-lookbehind":jsRegexpLookbehind,"json":json,"justify-content-space-evenly":justifyContentSpaceEvenly,"kerning-pairs-ligatures":kerningPairsLigatures,"keyboardevent-charcode":keyboardeventCharcode,"keyboardevent-code":keyboardeventCode,"keyboardevent-getmodifierstate":keyboardeventGetmodifierstate,"keyboardevent-key":keyboardeventKey,"keyboardevent-location":keyboardeventLocation,"keyboardevent-which":keyboardeventWhich,"lazyload":lazyload,"let":_let,"link-icon-png":linkIconPng,"link-icon-svg":linkIconSvg,"link-rel-dns-prefetch":linkRelDnsPrefetch,"link-rel-modulepreload":linkRelModulepreload,"link-rel-preconnect":linkRelPreconnect,"link-rel-prefetch":linkRelPrefetch,"link-rel-preload":linkRelPreload,"link-rel-prerender":linkRelPrerender,"loading-lazy-attr":loadingLazyAttr,"localecompare":localecompare,"magnetometer":magnetometer,"matchesselector":matchesselector,"matchmedia":matchmedia,"mathml":mathml,"maxlength":maxlength,"media-attribute":mediaAttribute,"media-fragments":mediaFragments,"media-session-api":mediaSessionApi,"mediacapture-fromelement":mediacaptureFromelement,"mediarecorder":mediarecorder,"mediasource":mediasource,"menu":menu,"meta-theme-color":metaThemeColor,"meter":meter,"midi":midi,"minmaxwh":minmaxwh,"mp3":mp3,"mpeg-dash":mpegDash,"mpeg4":mpeg4,"multibackgrounds":multibackgrounds,"multicolumn":multicolumn,"mutation-events":mutationEvents,"mutationobserver":mutationobserver,"namevalue-storage":namevalueStorage,"native-filesystem-api":nativeFilesystemApi,"nav-timing":navTiming,"navigator-language":navigatorLanguage,"netinfo":netinfo,"node-contains":nodeContains,"node-parentelement":nodeParentelement,"notifications":notifications,"object-entries":objectEntries,"object-fit":objectFit,"object-observe":objectObserve,"object-values":objectValues,"objectrtc":objectrtc,"offline-apps":offlineApps,"offscreencanvas":offscreencanvas,"ogg-vorbis":oggVorbis,"ogv":ogv,"ol-reversed":olReversed,"once-event-listener":onceEventListener,"online-status":onlineStatus,"opus":opus,"orientation-sensor":orientationSensor,"outline":outline,"pad-start-end":padStartEnd,"page-transition-events":pageTransitionEvents,"pagevisibility":pagevisibility,"passive-event-listener":passiveEventListener,"passwordrules":passwordrules,"path2d":path2d,"payment-request":paymentRequest,"pdf-viewer":pdfViewer,"permissions-api":permissionsApi,"permissions-policy":permissionsPolicy,"picture-in-picture":pictureInPicture,"picture":picture,"ping":ping,"png-alpha":pngAlpha,"pointer-events":pointerEvents,"pointer":pointer,"pointerlock":pointerlock,"portals":portals,"prefers-color-scheme":prefersColorScheme,"prefers-reduced-motion":prefersReducedMotion,"private-class-fields":privateClassFields,"private-methods-and-accessors":privateMethodsAndAccessors,"progress":progress,"promise-finally":promiseFinally,"promises":promises,"proximity":proximity,"proxy":proxy,"public-class-fields":publicClassFields,"publickeypinning":publickeypinning,"push-api":pushApi,"queryselector":queryselector,"readonly-attr":readonlyAttr,"referrer-policy":referrerPolicy,"registerprotocolhandler":registerprotocolhandler,"rel-noopener":relNoopener,"rel-noreferrer":relNoreferrer,"rellist":rellist,"rem":rem,"replace-all":replaceAll,"requestanimationframe":requestanimationframe,"requestidlecallback":requestidlecallback,"resizeobserver":resizeobserver,"resource-timing":resourceTiming,"rest-parameters":restParameters,"rtcpeerconnection":rtcpeerconnection,"ruby":ruby,"run-in":runIn,"same-site-cookie-attribute":sameSiteCookieAttribute,"screen-orientation":screenOrientation,"script-async":scriptAsync,"script-defer":scriptDefer,"scrollintoview":scrollintoview,"scrollintoviewifneeded":scrollintoviewifneeded,"sdch":sdch,"selection-api":selectionApi,"server-timing":serverTiming,"serviceworkers":serviceworkers,"setimmediate":setimmediate,"sha-2":sha2,"shadowdom":shadowdom,"shadowdomv1":shadowdomv1,"sharedarraybuffer":sharedarraybuffer,"sharedworkers":sharedworkers,"sni":sni,"spdy":spdy,"speech-recognition":speechRecognition,"speech-synthesis":speechSynthesis,"spellcheck-attribute":spellcheckAttribute,"sql-storage":sqlStorage,"srcset":srcset,"stopimmediatepropagation":stopimmediatepropagation,"stream":stream,"streams":streams,"stricttransportsecurity":stricttransportsecurity,"style-scoped":styleScoped,"subresource-integrity":subresourceIntegrity,"svg-css":svgCss,"svg-filters":svgFilters,"svg-fonts":svgFonts,"svg-fragment":svgFragment,"svg-html":svgHtml,"svg-html5":svgHtml5,"svg-img":svgImg,"svg-smil":svgSmil,"svg":svg,"sxg":sxg,"symbols":symbols$1,"tabindex-attr":tabindexAttr,"template-literals":templateLiterals,"template":template,"testfeat":testfeat,"text-decoration":textDecoration,"text-emphasis":textEmphasis,"text-overflow":textOverflow,"text-size-adjust":textSizeAdjust,"text-stroke":textStroke,"text-underline-offset":textUnderlineOffset,"textcontent":textcontent,"textencoder":textencoder,"tls1-1":tls11,"tls1-2":tls12,"tls1-3":tls13,"token-binding":tokenBinding,"touch":touch,"transforms2d":transforms2d,"transforms3d":transforms3d,"trusted-types":trustedTypes,"ttf":ttf,"typedarrays":typedarrays,"u2f":u2f,"unhandledrejection":unhandledrejection,"upgradeinsecurerequests":upgradeinsecurerequests,"url-scroll-to-text-fragment":urlScrollToTextFragment,"url":url$3,"urlsearchparams":urlsearchparams,"use-strict":useStrict,"user-select-none":userSelectNone,"user-timing":userTiming,"variable-fonts":variableFonts,"vibration":vibration,"video":video,"videotracks":videotracks,"viewport-units":viewportUnits,"wai-aria":waiAria,"wake-lock":wakeLock,"wasm":wasm,"wav":wav,"wbr-element":wbrElement,"web-animation":webAnimation,"web-app-manifest":webAppManifest,"web-bluetooth":webBluetooth,"web-share":webShare,"webauthn":webauthn,"webgl":webgl,"webgl2":webgl2,"webgpu":webgpu,"webhid":webhid,"webm":webm,"webnfc":webnfc,"webp":webp,"websockets":websockets,"webusb":webusb,"webvr":webvr,"webvtt":webvtt,"webworkers":webworkers,"webxr":webxr,"will-change":willChange,"woff":woff,"woff2":woff2,"word-break":wordBreak,"wordwrap":wordwrap,"x-doc-messaging":xDocMessaging,"x-frame-options":xFrameOptions,"xhr2":xhr2,"xhtml":xhtml,"xhtmlsmil":xhtmlsmil,"xml-serializer":xmlSerializer};

  var features_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  /*
   * Load this dynamically so that it
   * doesn't appear in the rollup bundle.
   */

  var features$1 = exports.features = features;
  });

  var region = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
      value: true
  });
  exports.default = unpackRegion;



  function unpackRegion(packed) {
      return Object.keys(packed).reduce(function (list, browser) {
          var data = packed[browser];
          list[browsers_1.browsers[browser]] = Object.keys(data).reduce(function (memo, key) {
              var stats = data[key];
              if (key === '_') {
                  stats.split(' ').forEach(function (version) {
                      return memo[version] = null;
                  });
              } else {
                  memo[key] = stats;
              }
              return memo;
          }, {});
          return list;
      }, {});
  }
  });

  var unpacker = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });



  Object.defineProperty(exports, 'agents', {
    enumerable: true,
    get: function get() {
      return agents_1.agents;
    }
  });



  Object.defineProperty(exports, 'feature', {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(feature).default;
    }
  });



  Object.defineProperty(exports, 'features', {
    enumerable: true,
    get: function get() {
      return features_1.features;
    }
  });



  Object.defineProperty(exports, 'region', {
    enumerable: true,
    get: function get() {
      return _interopRequireDefault(region).default;
    }
  });

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  });

  let { list: list$1 } = postcss_1;

  var utils = {
    /**
     * Throw special error, to tell beniary,
     * that this error is from Autoprefixer.
     */
    error (text) {
      let err = new Error(text);
      err.autoprefixer = true;
      throw err
    },

    /**
     * Return array, that doesn’t contain duplicates.
     */
    uniq (array) {
      return [...new Set(array)]
    },

    /**
     * Return "-webkit-" on "-webkit- old"
     */
    removeNote (string) {
      if (!string.includes(' ')) {
        return string
      }

      return string.split(' ')[0]
    },

    /**
     * Escape RegExp symbols
     */
    escapeRegexp (string) {
      return string.replace(/[$()*+-.?[\\\]^{|}]/g, '\\$&')
    },

    /**
     * Return regexp to check, that CSS string contain word
     */
    regexp (word, escape = true) {
      if (escape) {
        word = this.escapeRegexp(word);
      }
      return new RegExp(`(^|[\\s,(])(${word}($|[\\s(,]))`, 'gi')
    },

    /**
     * Change comma list
     */
    editList (value, callback) {
      let origin = list$1.comma(value);
      let changed = callback(origin, []);

      if (origin === changed) {
        return value
      }

      let join = value.match(/,\s*/);
      join = join ? join[0] : ', ';
      return changed.join(join)
    },

    /**
     * Split the selector into parts.
     * It returns 3 level deep array because selectors can be comma
     * separated (1), space separated (2), and combined (3)
     * @param {String} selector selector string
     * @return {Array<Array<Array>>} 3 level deep array of split selector
     * @see utils.test.js for examples
     */
    splitSelector (selector) {
      return list$1.comma(selector).map(i => {
        return list$1.space(i).map(k => {
          return k.split(/(?=\.|#)/g)
        })
      })
    }
  };

  let agents$2 = unpacker.agents;



  class Browsers {
    /**
     * Return all prefixes for default browser data
     */
    static prefixes () {
      if (this.prefixesCache) {
        return this.prefixesCache
      }

      this.prefixesCache = [];
      for (let name in agents$2) {
        this.prefixesCache.push(`-${agents$2[name].prefix}-`);
      }

      this.prefixesCache = utils
        .uniq(this.prefixesCache)
        .sort((a, b) => b.length - a.length);

      return this.prefixesCache
    }

    /**
     * Check is value contain any possible prefix
     */
    static withPrefix (value) {
      if (!this.prefixesRegexp) {
        this.prefixesRegexp = new RegExp(this.prefixes().join('|'));
      }

      return this.prefixesRegexp.test(value)
    }

    constructor (data, requirements, options, browserslistOpts) {
      this.data = data;
      this.options = options || {};
      this.browserslistOpts = browserslistOpts || {};
      this.selected = this.parse(requirements);
    }

    /**
     * Return browsers selected by requirements
     */
    parse (requirements) {
      let opts = {};
      for (let i in this.browserslistOpts) {
        opts[i] = this.browserslistOpts[i];
      }
      opts.path = this.options.from;
      return browserslist_1(requirements, opts)
    }

    /**
     * Return prefix for selected browser
     */
    prefix (browser) {
      let [name, version] = browser.split(' ');
      let data = this.data[name];

      let prefix = data.prefix_exceptions && data.prefix_exceptions[version];
      if (!prefix) {
        prefix = data.prefix;
      }
      return `-${prefix}-`
    }

    /**
     * Is browser is selected by requirements
     */
    isSelected (browser) {
      return this.selected.includes(browser)
    }
  }

  var browsers$1 = Browsers;

  var vendor = {
    prefix (prop) {
      let match = prop.match(/^(-\w+-)/);
      if (match) {
        return match[0]
      }

      return ''
    },

    unprefixed (prop) {
      return prop.replace(/^-\w+-/, '')
    }
  };

  /**
   * Recursively clone objects
   */
  function clone (obj, parent) {
    let cloned = new obj.constructor();

    for (let i of Object.keys(obj || {})) {
      let value = obj[i];
      if (i === 'parent' && typeof value === 'object') {
        if (parent) {
          cloned[i] = parent;
        }
      } else if (i === 'source' || i === null) {
        cloned[i] = value;
      } else if (Array.isArray(value)) {
        cloned[i] = value.map(x => clone(x, cloned));
      } else if (i !== '_autoprefixerPrefix' && i !== '_autoprefixerValues') {
        if (typeof value === 'object' && value !== null) {
          value = clone(value, cloned);
        }
        cloned[i] = value;
      }
    }

    return cloned
  }

  class Prefixer {
    /**
     * Add hack to selected names
     */
    static hack (klass) {
      if (!this.hacks) {
        this.hacks = {};
      }
      return klass.names.map(name => {
        this.hacks[name] = klass;
        return this.hacks[name]
      })
    }

    /**
     * Load hacks for some names
     */
    static load (name, prefixes, all) {
      let Klass = this.hacks && this.hacks[name];
      if (Klass) {
        return new Klass(name, prefixes, all)
      } else {
        return new this(name, prefixes, all)
      }
    }

    /**
     * Clone node and clean autprefixer custom caches
     */
    static clone (node, overrides) {
      let cloned = clone(node);
      for (let name in overrides) {
        cloned[name] = overrides[name];
      }
      return cloned
    }

    constructor (name, prefixes, all) {
      this.prefixes = prefixes;
      this.name = name;
      this.all = all;
    }

    /**
     * Find prefix in node parents
     */
    parentPrefix (node) {
      let prefix;

      if (typeof node._autoprefixerPrefix !== 'undefined') {
        prefix = node._autoprefixerPrefix;
      } else if (node.type === 'decl' && node.prop[0] === '-') {
        prefix = vendor.prefix(node.prop);
      } else if (node.type === 'root') {
        prefix = false;
      } else if (
        node.type === 'rule' &&
        node.selector.includes(':-') &&
        /:(-\w+-)/.test(node.selector)
      ) {
        prefix = node.selector.match(/:(-\w+-)/)[1];
      } else if (node.type === 'atrule' && node.name[0] === '-') {
        prefix = vendor.prefix(node.name);
      } else {
        prefix = this.parentPrefix(node.parent);
      }

      if (!browsers$1.prefixes().includes(prefix)) {
        prefix = false;
      }

      node._autoprefixerPrefix = prefix;

      return node._autoprefixerPrefix
    }

    /**
     * Clone node with prefixes
     */
    process (node, result) {
      if (!this.check(node)) {
        return undefined
      }

      let parent = this.parentPrefix(node);

      let prefixes = this.prefixes.filter(
        prefix => !parent || parent === utils.removeNote(prefix)
      );

      let added = [];
      for (let prefix of prefixes) {
        if (this.add(node, prefix, added.concat([prefix]), result)) {
          added.push(prefix);
        }
      }

      return added
    }

    /**
     * Shortcut for Prefixer.clone
     */
    clone (node, overrides) {
      return Prefixer.clone(node, overrides)
    }
  }

  var prefixer = Prefixer;

  class Declaration$1 extends prefixer {
    /**
     * Always true, because we already get prefixer by property name
     */
    check (/* decl */) {
      return true
    }

    /**
     * Return prefixed version of property
     */
    prefixed (prop, prefix) {
      return prefix + prop
    }

    /**
     * Return unprefixed version of property
     */
    normalize (prop) {
      return prop
    }

    /**
     * Check `value`, that it contain other prefixes, rather than `prefix`
     */
    otherPrefixes (value, prefix) {
      for (let other of browsers$1.prefixes()) {
        if (other === prefix) {
          continue
        }
        if (value.includes(other)) {
          return true
        }
      }
      return false
    }

    /**
     * Set prefix to declaration
     */
    set (decl, prefix) {
      decl.prop = this.prefixed(decl.prop, prefix);
      return decl
    }

    /**
     * Should we use visual cascade for prefixes
     */
    needCascade (decl) {
      if (!decl._autoprefixerCascade) {
        decl._autoprefixerCascade =
          this.all.options.cascade !== false && decl.raw('before').includes('\n');
      }
      return decl._autoprefixerCascade
    }

    /**
     * Return maximum length of possible prefixed property
     */
    maxPrefixed (prefixes, decl) {
      if (decl._autoprefixerMax) {
        return decl._autoprefixerMax
      }

      let max = 0;
      for (let prefix of prefixes) {
        prefix = utils.removeNote(prefix);
        if (prefix.length > max) {
          max = prefix.length;
        }
      }
      decl._autoprefixerMax = max;

      return decl._autoprefixerMax
    }

    /**
     * Calculate indentation to create visual cascade
     */
    calcBefore (prefixes, decl, prefix = '') {
      let max = this.maxPrefixed(prefixes, decl);
      let diff = max - utils.removeNote(prefix).length;

      let before = decl.raw('before');
      if (diff > 0) {
        before += Array(diff).fill(' ').join('');
      }

      return before
    }

    /**
     * Remove visual cascade
     */
    restoreBefore (decl) {
      let lines = decl.raw('before').split('\n');
      let min = lines[lines.length - 1];

      this.all.group(decl).up(prefixed => {
        let array = prefixed.raw('before').split('\n');
        let last = array[array.length - 1];
        if (last.length < min.length) {
          min = last;
        }
      });

      lines[lines.length - 1] = min;
      decl.raws.before = lines.join('\n');
    }

    /**
     * Clone and insert new declaration
     */
    insert (decl, prefix, prefixes) {
      let cloned = this.set(this.clone(decl), prefix);
      if (!cloned) return undefined

      let already = decl.parent.some(
        i => i.prop === cloned.prop && i.value === cloned.value
      );
      if (already) {
        return undefined
      }

      if (this.needCascade(decl)) {
        cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
      }
      return decl.parent.insertBefore(decl, cloned)
    }

    /**
     * Did this declaration has this prefix above
     */
    isAlready (decl, prefixed) {
      let already = this.all.group(decl).up(i => i.prop === prefixed);
      if (!already) {
        already = this.all.group(decl).down(i => i.prop === prefixed);
      }
      return already
    }

    /**
     * Clone and add prefixes for declaration
     */
    add (decl, prefix, prefixes, result) {
      let prefixed = this.prefixed(decl.prop, prefix);
      if (
        this.isAlready(decl, prefixed) ||
        this.otherPrefixes(decl.value, prefix)
      ) {
        return undefined
      }
      return this.insert(decl, prefix, prefixes, result)
    }

    /**
     * Add spaces for visual cascade
     */
    process (decl, result) {
      if (!this.needCascade(decl)) {
        super.process(decl, result);
        return
      }

      let prefixes = super.process(decl, result);

      if (!prefixes || !prefixes.length) {
        return
      }

      this.restoreBefore(decl);
      decl.raws.before = this.calcBefore(prefixes, decl);
    }

    /**
     * Return list of prefixed properties to clean old prefixes
     */
    old (prop, prefix) {
      return [this.prefixed(prop, prefix)]
    }
  }

  var declaration$1 = Declaration$1;

  var abs = Math.abs;
  var round = Math.round;

  function almostEq(a, b) {
    return abs(a - b) <= 9.5367432e-7
  }

  //最大公约数 Greatest Common Divisor
  function GCD(a, b) {
    if (almostEq(b, 0)) return a
    return GCD(b, a % b)
  }

  function findPrecision(n) {
    var e = 1;

    while (!almostEq(round(n * e) / e, n)) {
      e *= 10;
    }

    return e
  }

  function num2fraction(num) {
    if (num === 0 || num === '0') return '0'

    if (typeof num === 'string') {
      num = parseFloat(num);
    }


    var precision = findPrecision(num); //精确度
    var number = num * precision;
    var gcd = abs(GCD(number, precision));

    //分子
    var numerator = number / gcd;
    //分母
    var denominator = precision / gcd;

    //分数
    return round(numerator) + '/' + round(denominator)
  }

  var num2fraction_1 = num2fraction;

  const REGEXP = /(min|max)-resolution\s*:\s*\d*\.?\d+(dppx|dpi|x)/gi;
  const SPLIT = /(min|max)-resolution(\s*:\s*)(\d*\.?\d+)(dppx|dpi|x)/i;

  class Resolution extends prefixer {
    /**
     * Return prefixed query name
     */
    prefixName (prefix, name) {
      if (prefix === '-moz-') {
        return name + '--moz-device-pixel-ratio'
      } else {
        return prefix + name + '-device-pixel-ratio'
      }
    }

    /**
     * Return prefixed query
     */
    prefixQuery (prefix, name, colon, value, units) {
      if (units === 'dpi') {
        value = Number(value / 96);
      }
      if (prefix === '-o-') {
        value = num2fraction_1(value);
      }
      return this.prefixName(prefix, name) + colon + value
    }

    /**
     * Remove prefixed queries
     */
    clean (rule) {
      if (!this.bad) {
        this.bad = [];
        for (let prefix of this.prefixes) {
          this.bad.push(this.prefixName(prefix, 'min'));
          this.bad.push(this.prefixName(prefix, 'max'));
        }
      }

      rule.params = utils.editList(rule.params, queries => {
        return queries.filter(query => this.bad.every(i => !query.includes(i)))
      });
    }

    /**
     * Add prefixed queries
     */
    process (rule) {
      let parent = this.parentPrefix(rule);
      let prefixes = parent ? [parent] : this.prefixes;

      rule.params = utils.editList(rule.params, (origin, prefixed) => {
        for (let query of origin) {
          if (
            !query.includes('min-resolution') &&
            !query.includes('max-resolution')
          ) {
            prefixed.push(query);
            continue
          }

          for (let prefix of prefixes) {
            let processed = query.replace(REGEXP, str => {
              let parts = str.match(SPLIT);
              return this.prefixQuery(
                prefix,
                parts[1],
                parts[2],
                parts[3],
                parts[4]
              )
            });
            prefixed.push(processed);
          }
          prefixed.push(query);
        }

        return utils.uniq(prefixed)
      });
    }
  }

  var resolution = Resolution;

  var openParentheses = "(".charCodeAt(0);
  var closeParentheses = ")".charCodeAt(0);
  var singleQuote = "'".charCodeAt(0);
  var doubleQuote = '"'.charCodeAt(0);
  var backslash = "\\".charCodeAt(0);
  var slash = "/".charCodeAt(0);
  var comma = ",".charCodeAt(0);
  var colon = ":".charCodeAt(0);
  var star = "*".charCodeAt(0);
  var uLower = "u".charCodeAt(0);
  var uUpper = "U".charCodeAt(0);
  var plus = "+".charCodeAt(0);
  var isUnicodeRange = /^[a-f0-9?-]+$/i;

  var parse$5 = function(input) {
    var tokens = [];
    var value = input;

    var next,
      quote,
      prev,
      token,
      escape,
      escapePos,
      whitespacePos,
      parenthesesOpenPos;
    var pos = 0;
    var code = value.charCodeAt(pos);
    var max = value.length;
    var stack = [{ nodes: tokens }];
    var balanced = 0;
    var parent;

    var name = "";
    var before = "";
    var after = "";

    while (pos < max) {
      // Whitespaces
      if (code <= 32) {
        next = pos;
        do {
          next += 1;
          code = value.charCodeAt(next);
        } while (code <= 32);
        token = value.slice(pos, next);

        prev = tokens[tokens.length - 1];
        if (code === closeParentheses && balanced) {
          after = token;
        } else if (prev && prev.type === "div") {
          prev.after = token;
        } else if (
          code === comma ||
          code === colon ||
          (code === slash &&
            value.charCodeAt(next + 1) !== star &&
            (!parent ||
              (parent && parent.type === "function" && parent.value !== "calc")))
        ) {
          before = token;
        } else {
          tokens.push({
            type: "space",
            sourceIndex: pos,
            value: token
          });
        }

        pos = next;

        // Quotes
      } else if (code === singleQuote || code === doubleQuote) {
        next = pos;
        quote = code === singleQuote ? "'" : '"';
        token = {
          type: "string",
          sourceIndex: pos,
          quote: quote
        };
        do {
          escape = false;
          next = value.indexOf(quote, next + 1);
          if (~next) {
            escapePos = next;
            while (value.charCodeAt(escapePos - 1) === backslash) {
              escapePos -= 1;
              escape = !escape;
            }
          } else {
            value += quote;
            next = value.length - 1;
            token.unclosed = true;
          }
        } while (escape);
        token.value = value.slice(pos + 1, next);

        tokens.push(token);
        pos = next + 1;
        code = value.charCodeAt(pos);

        // Comments
      } else if (code === slash && value.charCodeAt(pos + 1) === star) {
        token = {
          type: "comment",
          sourceIndex: pos
        };

        next = value.indexOf("*/", pos);
        if (next === -1) {
          token.unclosed = true;
          next = value.length;
        }

        token.value = value.slice(pos + 2, next);
        tokens.push(token);

        pos = next + 2;
        code = value.charCodeAt(pos);

        // Operation within calc
      } else if (
        (code === slash || code === star) &&
        parent &&
        parent.type === "function" &&
        parent.value === "calc"
      ) {
        token = value[pos];
        tokens.push({
          type: "word",
          sourceIndex: pos - before.length,
          value: token
        });
        pos += 1;
        code = value.charCodeAt(pos);

        // Dividers
      } else if (code === slash || code === comma || code === colon) {
        token = value[pos];

        tokens.push({
          type: "div",
          sourceIndex: pos - before.length,
          value: token,
          before: before,
          after: ""
        });
        before = "";

        pos += 1;
        code = value.charCodeAt(pos);

        // Open parentheses
      } else if (openParentheses === code) {
        // Whitespaces after open parentheses
        next = pos;
        do {
          next += 1;
          code = value.charCodeAt(next);
        } while (code <= 32);
        parenthesesOpenPos = pos;
        token = {
          type: "function",
          sourceIndex: pos - name.length,
          value: name,
          before: value.slice(parenthesesOpenPos + 1, next)
        };
        pos = next;

        if (name === "url" && code !== singleQuote && code !== doubleQuote) {
          next -= 1;
          do {
            escape = false;
            next = value.indexOf(")", next + 1);
            if (~next) {
              escapePos = next;
              while (value.charCodeAt(escapePos - 1) === backslash) {
                escapePos -= 1;
                escape = !escape;
              }
            } else {
              value += ")";
              next = value.length - 1;
              token.unclosed = true;
            }
          } while (escape);
          // Whitespaces before closed
          whitespacePos = next;
          do {
            whitespacePos -= 1;
            code = value.charCodeAt(whitespacePos);
          } while (code <= 32);
          if (parenthesesOpenPos < whitespacePos) {
            if (pos !== whitespacePos + 1) {
              token.nodes = [
                {
                  type: "word",
                  sourceIndex: pos,
                  value: value.slice(pos, whitespacePos + 1)
                }
              ];
            } else {
              token.nodes = [];
            }
            if (token.unclosed && whitespacePos + 1 !== next) {
              token.after = "";
              token.nodes.push({
                type: "space",
                sourceIndex: whitespacePos + 1,
                value: value.slice(whitespacePos + 1, next)
              });
            } else {
              token.after = value.slice(whitespacePos + 1, next);
            }
          } else {
            token.after = "";
            token.nodes = [];
          }
          pos = next + 1;
          code = value.charCodeAt(pos);
          tokens.push(token);
        } else {
          balanced += 1;
          token.after = "";
          tokens.push(token);
          stack.push(token);
          tokens = token.nodes = [];
          parent = token;
        }
        name = "";

        // Close parentheses
      } else if (closeParentheses === code && balanced) {
        pos += 1;
        code = value.charCodeAt(pos);

        parent.after = after;
        after = "";
        balanced -= 1;
        stack.pop();
        parent = stack[balanced];
        tokens = parent.nodes;

        // Words
      } else {
        next = pos;
        do {
          if (code === backslash) {
            next += 1;
          }
          next += 1;
          code = value.charCodeAt(next);
        } while (
          next < max &&
          !(
            code <= 32 ||
            code === singleQuote ||
            code === doubleQuote ||
            code === comma ||
            code === colon ||
            code === slash ||
            code === openParentheses ||
            (code === star &&
              parent &&
              parent.type === "function" &&
              parent.value === "calc") ||
            (code === slash &&
              parent.type === "function" &&
              parent.value === "calc") ||
            (code === closeParentheses && balanced)
          )
        );
        token = value.slice(pos, next);

        if (openParentheses === code) {
          name = token;
        } else if (
          (uLower === token.charCodeAt(0) || uUpper === token.charCodeAt(0)) &&
          plus === token.charCodeAt(1) &&
          isUnicodeRange.test(token.slice(2))
        ) {
          tokens.push({
            type: "unicode-range",
            sourceIndex: pos,
            value: token
          });
        } else {
          tokens.push({
            type: "word",
            sourceIndex: pos,
            value: token
          });
        }

        pos = next;
      }
    }

    for (pos = stack.length - 1; pos; pos -= 1) {
      stack[pos].unclosed = true;
    }

    return stack[0].nodes;
  };

  var walk = function walk(nodes, cb, bubble) {
    var i, max, node, result;

    for (i = 0, max = nodes.length; i < max; i += 1) {
      node = nodes[i];
      if (!bubble) {
        result = cb(node, i, nodes);
      }

      if (
        result !== false &&
        node.type === "function" &&
        Array.isArray(node.nodes)
      ) {
        walk(node.nodes, cb, bubble);
      }

      if (bubble) {
        cb(node, i, nodes);
      }
    }
  };

  function stringifyNode(node, custom) {
    var type = node.type;
    var value = node.value;
    var buf;
    var customResult;

    if (custom && (customResult = custom(node)) !== undefined) {
      return customResult;
    } else if (type === "word" || type === "space") {
      return value;
    } else if (type === "string") {
      buf = node.quote || "";
      return buf + value + (node.unclosed ? "" : buf);
    } else if (type === "comment") {
      return "/*" + value + (node.unclosed ? "" : "*/");
    } else if (type === "div") {
      return (node.before || "") + value + (node.after || "");
    } else if (Array.isArray(node.nodes)) {
      buf = stringify$2(node.nodes, custom);
      if (type !== "function") {
        return buf;
      }
      return (
        value +
        "(" +
        (node.before || "") +
        buf +
        (node.after || "") +
        (node.unclosed ? "" : ")")
      );
    }
    return value;
  }

  function stringify$2(nodes, custom) {
    var result, i;

    if (Array.isArray(nodes)) {
      result = "";
      for (i = nodes.length - 1; ~i; i -= 1) {
        result = stringifyNode(nodes[i], custom) + result;
      }
      return result;
    }
    return stringifyNode(nodes, custom);
  }

  var stringify_1 = stringify$2;

  var minus = "-".charCodeAt(0);
  var plus$1 = "+".charCodeAt(0);
  var dot = ".".charCodeAt(0);
  var exp = "e".charCodeAt(0);
  var EXP = "E".charCodeAt(0);

  // Check if three code points would start a number
  // https://www.w3.org/TR/css-syntax-3/#starts-with-a-number
  function likeNumber(value) {
    var code = value.charCodeAt(0);
    var nextCode;

    if (code === plus$1 || code === minus) {
      nextCode = value.charCodeAt(1);

      if (nextCode >= 48 && nextCode <= 57) {
        return true;
      }

      var nextNextCode = value.charCodeAt(2);

      if (nextCode === dot && nextNextCode >= 48 && nextNextCode <= 57) {
        return true;
      }

      return false;
    }

    if (code === dot) {
      nextCode = value.charCodeAt(1);

      if (nextCode >= 48 && nextCode <= 57) {
        return true;
      }

      return false;
    }

    if (code >= 48 && code <= 57) {
      return true;
    }

    return false;
  }

  // Consume a number
  // https://www.w3.org/TR/css-syntax-3/#consume-number
  var unit = function(value) {
    var pos = 0;
    var length = value.length;
    var code;
    var nextCode;
    var nextNextCode;

    if (length === 0 || !likeNumber(value)) {
      return false;
    }

    code = value.charCodeAt(pos);

    if (code === plus$1 || code === minus) {
      pos++;
    }

    while (pos < length) {
      code = value.charCodeAt(pos);

      if (code < 48 || code > 57) {
        break;
      }

      pos += 1;
    }

    code = value.charCodeAt(pos);
    nextCode = value.charCodeAt(pos + 1);

    if (code === dot && nextCode >= 48 && nextCode <= 57) {
      pos += 2;

      while (pos < length) {
        code = value.charCodeAt(pos);

        if (code < 48 || code > 57) {
          break;
        }

        pos += 1;
      }
    }

    code = value.charCodeAt(pos);
    nextCode = value.charCodeAt(pos + 1);
    nextNextCode = value.charCodeAt(pos + 2);

    if (
      (code === exp || code === EXP) &&
      ((nextCode >= 48 && nextCode <= 57) ||
        ((nextCode === plus$1 || nextCode === minus) &&
          nextNextCode >= 48 &&
          nextNextCode <= 57))
    ) {
      pos += nextCode === plus$1 || nextCode === minus ? 3 : 2;

      while (pos < length) {
        code = value.charCodeAt(pos);

        if (code < 48 || code > 57) {
          break;
        }

        pos += 1;
      }
    }

    return {
      number: value.slice(0, pos),
      unit: value.slice(pos)
    };
  };

  function ValueParser(value) {
    if (this instanceof ValueParser) {
      this.nodes = parse$5(value);
      return this;
    }
    return new ValueParser(value);
  }

  ValueParser.prototype.toString = function() {
    return Array.isArray(this.nodes) ? stringify_1(this.nodes) : "";
  };

  ValueParser.prototype.walk = function(cb, bubble) {
    walk(this.nodes, cb, bubble);
    return this;
  };

  ValueParser.unit = unit;

  ValueParser.walk = walk;

  ValueParser.stringify = stringify_1;

  var lib = ValueParser;

  let { list: list$2 } = postcss_1;





  class Transition {
    constructor (prefixes) {
      this.props = ['transition', 'transition-property'];
      this.prefixes = prefixes;
    }

    /**
     * Process transition and add prefixes for all necessary properties
     */
    add (decl, result) {
      let prefix, prop;
      let add = this.prefixes.add[decl.prop];
      let vendorPrefixes = this.ruleVendorPrefixes(decl);
      let declPrefixes = vendorPrefixes || (add && add.prefixes) || [];

      let params = this.parse(decl.value);
      let names = params.map(i => this.findProp(i));
      let added = [];

      if (names.some(i => i[0] === '-')) {
        return
      }

      for (let param of params) {
        prop = this.findProp(param);
        if (prop[0] === '-') continue

        let prefixer = this.prefixes.add[prop];
        if (!prefixer || !prefixer.prefixes) continue

        for (prefix of prefixer.prefixes) {
          if (vendorPrefixes && !vendorPrefixes.some(p => prefix.includes(p))) {
            continue
          }

          let prefixed = this.prefixes.prefixed(prop, prefix);
          if (prefixed !== '-ms-transform' && !names.includes(prefixed)) {
            if (!this.disabled(prop, prefix)) {
              added.push(this.clone(prop, prefixed, param));
            }
          }
        }
      }

      params = params.concat(added);
      let value = this.stringify(params);

      let webkitClean = this.stringify(
        this.cleanFromUnprefixed(params, '-webkit-')
      );
      if (declPrefixes.includes('-webkit-')) {
        this.cloneBefore(decl, `-webkit-${decl.prop}`, webkitClean);
      }
      this.cloneBefore(decl, decl.prop, webkitClean);
      if (declPrefixes.includes('-o-')) {
        let operaClean = this.stringify(this.cleanFromUnprefixed(params, '-o-'));
        this.cloneBefore(decl, `-o-${decl.prop}`, operaClean);
      }

      for (prefix of declPrefixes) {
        if (prefix !== '-webkit-' && prefix !== '-o-') {
          let prefixValue = this.stringify(
            this.cleanOtherPrefixes(params, prefix)
          );
          this.cloneBefore(decl, prefix + decl.prop, prefixValue);
        }
      }

      if (value !== decl.value && !this.already(decl, decl.prop, value)) {
        this.checkForWarning(result, decl);
        decl.cloneBefore();
        decl.value = value;
      }
    }

    /**
     * Find property name
     */
    findProp (param) {
      let prop = param[0].value;
      if (/^\d/.test(prop)) {
        for (let [i, token] of param.entries()) {
          if (i !== 0 && token.type === 'word') {
            return token.value
          }
        }
      }
      return prop
    }

    /**
     * Does we already have this declaration
     */
    already (decl, prop, value) {
      return decl.parent.some(i => i.prop === prop && i.value === value)
    }

    /**
     * Add declaration if it is not exist
     */
    cloneBefore (decl, prop, value) {
      if (!this.already(decl, prop, value)) {
        decl.cloneBefore({ prop, value });
      }
    }

    /**
     * Show transition-property warning
     */
    checkForWarning (result, decl) {
      if (decl.prop !== 'transition-property') {
        return
      }

      decl.parent.each(i => {
        if (i.type !== 'decl') {
          return undefined
        }
        if (i.prop.indexOf('transition-') !== 0) {
          return undefined
        }
        if (i.prop === 'transition-property') {
          return undefined
        }

        if (list$2.comma(i.value).length > 1) {
          decl.warn(
            result,
            'Replace transition-property to transition, ' +
              'because Autoprefixer could not support ' +
              'any cases of transition-property ' +
              'and other transition-*'
          );
        }
        return false
      });
    }

    /**
     * Process transition and remove all unnecessary properties
     */
    remove (decl) {
      let params = this.parse(decl.value);
      params = params.filter(i => {
        let prop = this.prefixes.remove[this.findProp(i)];
        return !prop || !prop.remove
      });
      let value = this.stringify(params);

      if (decl.value === value) {
        return
      }

      if (params.length === 0) {
        decl.remove();
        return
      }

      let double = decl.parent.some(i => {
        return i.prop === decl.prop && i.value === value
      });
      let smaller = decl.parent.some(i => {
        return i !== decl && i.prop === decl.prop && i.value.length > value.length
      });

      if (double || smaller) {
        decl.remove();
        return
      }

      decl.value = value;
    }

    /**
     * Parse properties list to array
     */
    parse (value) {
      let ast = lib(value);
      let result = [];
      let param = [];
      for (let node of ast.nodes) {
        param.push(node);
        if (node.type === 'div' && node.value === ',') {
          result.push(param);
          param = [];
        }
      }
      result.push(param);
      return result.filter(i => i.length > 0)
    }

    /**
     * Return properties string from array
     */
    stringify (params) {
      if (params.length === 0) {
        return ''
      }
      let nodes = [];
      for (let param of params) {
        if (param[param.length - 1].type !== 'div') {
          param.push(this.div(params));
        }
        nodes = nodes.concat(param);
      }
      if (nodes[0].type === 'div') {
        nodes = nodes.slice(1);
      }
      if (nodes[nodes.length - 1].type === 'div') {
        nodes = nodes.slice(0, +-2 + 1 );
      }
      return lib.stringify({ nodes })
    }

    /**
     * Return new param array with different name
     */
    clone (origin, name, param) {
      let result = [];
      let changed = false;
      for (let i of param) {
        if (!changed && i.type === 'word' && i.value === origin) {
          result.push({ type: 'word', value: name });
          changed = true;
        } else {
          result.push(i);
        }
      }
      return result
    }

    /**
     * Find or create separator
     */
    div (params) {
      for (let param of params) {
        for (let node of param) {
          if (node.type === 'div' && node.value === ',') {
            return node
          }
        }
      }
      return { type: 'div', value: ',', after: ' ' }
    }

    cleanOtherPrefixes (params, prefix) {
      return params.filter(param => {
        let current = vendor.prefix(this.findProp(param));
        return current === '' || current === prefix
      })
    }

    /**
     * Remove all non-webkit prefixes and unprefixed params if we have prefixed
     */
    cleanFromUnprefixed (params, prefix) {
      let remove = params
        .map(i => this.findProp(i))
        .filter(i => i.slice(0, prefix.length) === prefix)
        .map(i => this.prefixes.unprefixed(i));

      let result = [];
      for (let param of params) {
        let prop = this.findProp(param);
        let p = vendor.prefix(prop);
        if (!remove.includes(prop) && (p === prefix || p === '')) {
          result.push(param);
        }
      }
      return result
    }

    /**
     * Check property for disabled by option
     */
    disabled (prop, prefix) {
      let other = ['order', 'justify-content', 'align-self', 'align-content'];
      if (prop.includes('flex') || other.includes(prop)) {
        if (this.prefixes.options.flexbox === false) {
          return true
        }

        if (this.prefixes.options.flexbox === 'no-2009') {
          return prefix.includes('2009')
        }
      }
      return undefined
    }

    /**
     * Check if transition prop is inside vendor specific rule
     */
    ruleVendorPrefixes (decl) {
      let { parent } = decl;

      if (parent.type !== 'rule') {
        return false
      } else if (!parent.selector.includes(':-')) {
        return false
      }

      let selectors = browsers$1.prefixes().filter(s =>
        parent.selector.includes(':' + s)
      );

      return selectors.length > 0 ? selectors : false
    }
  }

  var transition = Transition;

  class OldValue {
    constructor (unprefixed, prefixed, string, regexp) {
      this.unprefixed = unprefixed;
      this.prefixed = prefixed;
      this.string = string || prefixed;
      this.regexp = regexp || utils.regexp(prefixed);
    }

    /**
     * Check, that value contain old value
     */
    check (value) {
      if (value.includes(this.string)) {
        return !!value.match(this.regexp)
      }
      return false
    }
  }

  var oldValue = OldValue;

  class Value extends prefixer {
    /**
     * Clone decl for each prefixed values
     */
    static save (prefixes, decl) {
      let prop = decl.prop;
      let result = [];

      for (let prefix in decl._autoprefixerValues) {
        let value = decl._autoprefixerValues[prefix];

        if (value === decl.value) {
          continue
        }

        let item;
        let propPrefix = vendor.prefix(prop);

        if (propPrefix === '-pie-') {
          continue
        }

        if (propPrefix === prefix) {
          item = decl.value = value;
          result.push(item);
          continue
        }

        let prefixed = prefixes.prefixed(prop, prefix);
        let rule = decl.parent;

        if (!rule.every(i => i.prop !== prefixed)) {
          result.push(item);
          continue
        }

        let trimmed = value.replace(/\s+/, ' ');
        let already = rule.some(
          i => i.prop === decl.prop && i.value.replace(/\s+/, ' ') === trimmed
        );

        if (already) {
          result.push(item);
          continue
        }

        let cloned = this.clone(decl, { value });
        item = decl.parent.insertBefore(decl, cloned);

        result.push(item);
      }

      return result
    }

    /**
     * Is declaration need to be prefixed
     */
    check (decl) {
      let value = decl.value;
      if (!value.includes(this.name)) {
        return false
      }

      return !!value.match(this.regexp())
    }

    /**
     * Lazy regexp loading
     */
    regexp () {
      return this.regexpCache || (this.regexpCache = utils.regexp(this.name))
    }

    /**
     * Add prefix to values in string
     */
    replace (string, prefix) {
      return string.replace(this.regexp(), `$1${prefix}$2`)
    }

    /**
     * Get value with comments if it was not changed
     */
    value (decl) {
      if (decl.raws.value && decl.raws.value.value === decl.value) {
        return decl.raws.value.raw
      } else {
        return decl.value
      }
    }

    /**
     * Save values with next prefixed token
     */
    add (decl, prefix) {
      if (!decl._autoprefixerValues) {
        decl._autoprefixerValues = {};
      }
      let value = decl._autoprefixerValues[prefix] || this.value(decl);

      let before;
      do {
        before = value;
        value = this.replace(value, prefix);
        if (value === false) return
      } while (value !== before)

      decl._autoprefixerValues[prefix] = value;
    }

    /**
     * Return function to fast find prefixed value
     */
    old (prefix) {
      return new oldValue(this.name, prefix + this.name)
    }
  }

  var value = Value;

  let list$3 = postcss_1.list;

  let uniq$1 = utils.uniq;
  let escapeRegexp = utils.escapeRegexp;
  let splitSelector = utils.splitSelector;

  function convert (value) {
    if (
      value &&
      value.length === 2 &&
      value[0] === 'span' &&
      parseInt(value[1], 10) > 0
    ) {
      return [false, parseInt(value[1], 10)]
    }

    if (value && value.length === 1 && parseInt(value[0], 10) > 0) {
      return [parseInt(value[0], 10), false]
    }

    return [false, false]
  }

  function translate (values, startIndex, endIndex) {
    let startValue = values[startIndex];
    let endValue = values[endIndex];

    if (!startValue) {
      return [false, false]
    }

    let [start, spanStart] = convert(startValue);
    let [end, spanEnd] = convert(endValue);

    if (start && !endValue) {
      return [start, false]
    }

    if (spanStart && end) {
      return [end - spanStart, spanStart]
    }

    if (start && spanEnd) {
      return [start, spanEnd]
    }

    if (start && end) {
      return [start, end - start]
    }

    return [false, false]
  }

  function parse$6 (decl) {
    let node = lib(decl.value);

    let values = [];
    let current = 0;
    values[current] = [];

    for (let i of node.nodes) {
      if (i.type === 'div') {
        current += 1;
        values[current] = [];
      } else if (i.type === 'word') {
        values[current].push(i.value);
      }
    }

    return values
  }

  function insertDecl (decl, prop, value) {
    if (value && !decl.parent.some(i => i.prop === `-ms-${prop}`)) {
      decl.cloneBefore({
        prop: `-ms-${prop}`,
        value: value.toString()
      });
    }
  }

  // Track transforms

  function prefixTrackProp ({ prop, prefix }) {
    return prefix + prop.replace('template-', '')
  }

  function transformRepeat ({ nodes }, { gap }) {
    let { count, size } = nodes.reduce(
      (result, node) => {
        if (node.type === 'div' && node.value === ',') {
          result.key = 'size';
        } else {
          result[result.key].push(lib.stringify(node));
        }
        return result
      },
      {
        key: 'count',
        size: [],
        count: []
      }
    );

    // insert gap values
    if (gap) {
      size = size.filter(i => i.trim());
      let val = [];
      for (let i = 1; i <= count; i++) {
        size.forEach((item, index) => {
          if (index > 0 || i > 1) {
            val.push(gap);
          }
          val.push(item);
        });
      }

      return val.join(' ')
    }

    return `(${size.join('')})[${count.join('')}]`
  }

  function prefixTrackValue ({ value, gap }) {
    let result = lib(value).nodes.reduce((nodes, node) => {
      if (node.type === 'function' && node.value === 'repeat') {
        return nodes.concat({
          type: 'word',
          value: transformRepeat(node, { gap })
        })
      }
      if (gap && node.type === 'space') {
        return nodes.concat(
          {
            type: 'space',
            value: ' '
          },
          {
            type: 'word',
            value: gap
          },
          node
        )
      }
      return nodes.concat(node)
    }, []);

    return lib.stringify(result)
  }

  // Parse grid-template-areas

  let DOTS = /^\.+$/;

  function track (start, end) {
    return { start, end, span: end - start }
  }

  function getColumns (line) {
    return line.trim().split(/\s+/g)
  }

  function parseGridAreas ({ rows, gap }) {
    return rows.reduce((areas, line, rowIndex) => {
      if (gap.row) rowIndex *= 2;

      if (line.trim() === '') return areas

      getColumns(line).forEach((area, columnIndex) => {
        if (DOTS.test(area)) return

        if (gap.column) columnIndex *= 2;

        if (typeof areas[area] === 'undefined') {
          areas[area] = {
            column: track(columnIndex + 1, columnIndex + 2),
            row: track(rowIndex + 1, rowIndex + 2)
          };
        } else {
          let { column, row } = areas[area];

          column.start = Math.min(column.start, columnIndex + 1);
          column.end = Math.max(column.end, columnIndex + 2);
          column.span = column.end - column.start;

          row.start = Math.min(row.start, rowIndex + 1);
          row.end = Math.max(row.end, rowIndex + 2);
          row.span = row.end - row.start;
        }
      });

      return areas
    }, {})
  }

  // Parse grid-template

  function testTrack (node) {
    return node.type === 'word' && /^\[.+]$/.test(node.value)
  }

  function verifyRowSize (result) {
    if (result.areas.length > result.rows.length) {
      result.rows.push('auto');
    }
    return result
  }

  function parseTemplate ({ decl, gap }) {
    let gridTemplate = lib(decl.value).nodes.reduce(
      (result, node) => {
        let { type, value } = node;

        if (testTrack(node) || type === 'space') return result

        // area
        if (type === 'string') {
          result = verifyRowSize(result);
          result.areas.push(value);
        }

        // values and function
        if (type === 'word' || type === 'function') {
          result[result.key].push(lib.stringify(node));
        }

        // divider(/)
        if (type === 'div' && value === '/') {
          result.key = 'columns';
          result = verifyRowSize(result);
        }

        return result
      },
      {
        key: 'rows',
        columns: [],
        rows: [],
        areas: []
      }
    );

    return {
      areas: parseGridAreas({
        rows: gridTemplate.areas,
        gap
      }),
      columns: prefixTrackValue({
        value: gridTemplate.columns.join(' '),
        gap: gap.column
      }),
      rows: prefixTrackValue({
        value: gridTemplate.rows.join(' '),
        gap: gap.row
      })
    }
  }

  // Insert parsed grid areas

  /**
   * Get an array of -ms- prefixed props and values
   * @param  {Object} [area] area object with column and row data
   * @param  {Boolean} [addRowSpan] should we add grid-column-row value?
   * @param  {Boolean} [addColumnSpan] should we add grid-column-span value?
   * @return {Array<Object>}
   */
  function getMSDecls (area, addRowSpan = false, addColumnSpan = false) {
    let result = [
      {
        prop: '-ms-grid-row',
        value: String(area.row.start)
      }
    ];
    if (area.row.span > 1 || addRowSpan) {
      result.push({
        prop: '-ms-grid-row-span',
        value: String(area.row.span)
      });
    }
    result.push({
      prop: '-ms-grid-column',
      value: String(area.column.start)
    });
    if (area.column.span > 1 || addColumnSpan) {
      result.push({
        prop: '-ms-grid-column-span',
        value: String(area.column.span)
      });
    }
    return result
  }

  function getParentMedia (parent) {
    if (parent.type === 'atrule' && parent.name === 'media') {
      return parent
    }
    if (!parent.parent) {
      return false
    }
    return getParentMedia(parent.parent)
  }

  /**
   * change selectors for rules with duplicate grid-areas.
   * @param  {Array<Rule>} rules
   * @param  {Array<String>} templateSelectors
   * @return {Array<Rule>} rules with changed selectors
   */
  function changeDuplicateAreaSelectors (ruleSelectors, templateSelectors) {
    ruleSelectors = ruleSelectors.map(selector => {
      let selectorBySpace = list$3.space(selector);
      let selectorByComma = list$3.comma(selector);

      if (selectorBySpace.length > selectorByComma.length) {
        selector = selectorBySpace.slice(-1).join('');
      }
      return selector
    });

    return ruleSelectors.map(ruleSelector => {
      let newSelector = templateSelectors.map((tplSelector, index) => {
        let space = index === 0 ? '' : ' ';
        return `${space}${tplSelector} > ${ruleSelector}`
      });

      return newSelector
    })
  }

  /**
   * check if selector of rules are equal
   * @param  {Rule} ruleA
   * @param  {Rule} ruleB
   * @return {Boolean}
   */
  function selectorsEqual (ruleA, ruleB) {
    return ruleA.selectors.some(sel => {
      return ruleB.selectors.some(s => s === sel)
    })
  }

  /**
   * Parse data from all grid-template(-areas) declarations
   * @param  {Root} css css root
   * @return {Object} parsed data
   */
  function parseGridTemplatesData (css) {
    let parsed = [];

    // we walk through every grid-template(-areas) declaration and store
    // data with the same area names inside the item
    css.walkDecls(/grid-template(-areas)?$/, d => {
      let rule = d.parent;
      let media = getParentMedia(rule);
      let gap = getGridGap(d);
      let inheritedGap = inheritGridGap(d, gap);
      let { areas } = parseTemplate({ decl: d, gap: inheritedGap || gap });
      let areaNames = Object.keys(areas);

      // skip node if it doesn't have areas
      if (areaNames.length === 0) {
        return true
      }

      // check parsed array for item that include the same area names
      // return index of that item
      let index = parsed.reduce((acc, { allAreas }, idx) => {
        let hasAreas = allAreas && areaNames.some(area => allAreas.includes(area));
        return hasAreas ? idx : acc
      }, null);

      if (index !== null) {
        // index is found, add the grid-template data to that item
        let { allAreas, rules } = parsed[index];

        // check if rule has no duplicate area names
        let hasNoDuplicates = rules.some(r => {
          return r.hasDuplicates === false && selectorsEqual(r, rule)
        });

        let duplicatesFound = false;

        // check need to gather all duplicate area names
        let duplicateAreaNames = rules.reduce((acc, r) => {
          if (!r.params && selectorsEqual(r, rule)) {
            duplicatesFound = true;
            return r.duplicateAreaNames
          }
          if (!duplicatesFound) {
            areaNames.forEach(name => {
              if (r.areas[name]) {
                acc.push(name);
              }
            });
          }
          return uniq$1(acc)
        }, []);

        // update grid-row/column-span values for areas with duplicate
        // area names. @see #1084 and #1146
        rules.forEach(r => {
          areaNames.forEach(name => {
            let area = r.areas[name];
            if (area && area.row.span !== areas[name].row.span) {
              areas[name].row.updateSpan = true;
            }

            if (area && area.column.span !== areas[name].column.span) {
              areas[name].column.updateSpan = true;
            }
          });
        });

        parsed[index].allAreas = uniq$1([...allAreas, ...areaNames]);
        parsed[index].rules.push({
          hasDuplicates: !hasNoDuplicates,
          params: media.params,
          selectors: rule.selectors,
          node: rule,
          duplicateAreaNames,
          areas
        });
      } else {
        // index is NOT found, push the new item to the parsed array
        parsed.push({
          allAreas: areaNames,
          areasCount: 0,
          rules: [
            {
              hasDuplicates: false,
              duplicateRules: [],
              params: media.params,
              selectors: rule.selectors,
              node: rule,
              duplicateAreaNames: [],
              areas
            }
          ]
        });
      }

      return undefined
    });

    return parsed
  }

  /**
   * insert prefixed grid-area declarations
   * @param  {Root}  css css root
   * @param  {Function} isDisabled check if the rule is disabled
   * @return {void}
   */
  function insertAreas (css, isDisabled) {
    // parse grid-template declarations
    let gridTemplatesData = parseGridTemplatesData(css);

    // return undefined if no declarations found
    if (gridTemplatesData.length === 0) {
      return undefined
    }

    // we need to store the rules that we will insert later
    let rulesToInsert = {};

    css.walkDecls('grid-area', gridArea => {
      let gridAreaRule = gridArea.parent;
      let hasPrefixedRow = gridAreaRule.first.prop === '-ms-grid-row';
      let gridAreaMedia = getParentMedia(gridAreaRule);

      if (isDisabled(gridArea)) {
        return undefined
      }

      let gridAreaRuleIndex = css.index(gridAreaMedia || gridAreaRule);

      let value = gridArea.value;
      // found the data that matches grid-area identifier
      let data = gridTemplatesData.filter(d => d.allAreas.includes(value))[0];

      if (!data) {
        return true
      }

      let lastArea = data.allAreas[data.allAreas.length - 1];
      let selectorBySpace = list$3.space(gridAreaRule.selector);
      let selectorByComma = list$3.comma(gridAreaRule.selector);
      let selectorIsComplex =
        selectorBySpace.length > 1 &&
        selectorBySpace.length > selectorByComma.length;

      // prevent doubling of prefixes
      if (hasPrefixedRow) {
        return false
      }

      // create the empty object with the key as the last area name
      // e.g if we have templates with "a b c" values, "c" will be the last area
      if (!rulesToInsert[lastArea]) {
        rulesToInsert[lastArea] = {};
      }

      let lastRuleIsSet = false;

      // walk through every grid-template rule data
      for (let rule of data.rules) {
        let area = rule.areas[value];
        let hasDuplicateName = rule.duplicateAreaNames.includes(value);

        // if we can't find the area name, update lastRule and continue
        if (!area) {
          let lastRuleIndex = css.index(rulesToInsert[lastArea].lastRule);
          if (gridAreaRuleIndex > lastRuleIndex) {
            rulesToInsert[lastArea].lastRule = gridAreaMedia || gridAreaRule;
          }
          continue
        }

        // for grid-templates inside media rule we need to create empty
        // array to push prefixed grid-area rules later
        if (rule.params && !rulesToInsert[lastArea][rule.params]) {
          rulesToInsert[lastArea][rule.params] = [];
        }

        if ((!rule.hasDuplicates || !hasDuplicateName) && !rule.params) {
          // grid-template has no duplicates and not inside media rule

          getMSDecls(area, false, false)
            .reverse()
            .forEach(i =>
              gridAreaRule.prepend(
                Object.assign(i, {
                  raws: {
                    between: gridArea.raws.between
                  }
                })
              )
            );

          rulesToInsert[lastArea].lastRule = gridAreaRule;
          lastRuleIsSet = true;
        } else if (rule.hasDuplicates && !rule.params && !selectorIsComplex) {
          // grid-template has duplicates and not inside media rule
          let cloned = gridAreaRule.clone();
          cloned.removeAll();

          getMSDecls(area, area.row.updateSpan, area.column.updateSpan)
            .reverse()
            .forEach(i =>
              cloned.prepend(
                Object.assign(i, {
                  raws: {
                    between: gridArea.raws.between
                  }
                })
              )
            );

          cloned.selectors = changeDuplicateAreaSelectors(
            cloned.selectors,
            rule.selectors
          );

          if (rulesToInsert[lastArea].lastRule) {
            rulesToInsert[lastArea].lastRule.after(cloned);
          }
          rulesToInsert[lastArea].lastRule = cloned;
          lastRuleIsSet = true;
        } else if (
          rule.hasDuplicates &&
          !rule.params &&
          selectorIsComplex &&
          gridAreaRule.selector.includes(rule.selectors[0])
        ) {
          // grid-template has duplicates and not inside media rule
          // and the selector is complex
          gridAreaRule.walkDecls(/-ms-grid-(row|column)/, d => d.remove());
          getMSDecls(area, area.row.updateSpan, area.column.updateSpan)
            .reverse()
            .forEach(i =>
              gridAreaRule.prepend(
                Object.assign(i, {
                  raws: {
                    between: gridArea.raws.between
                  }
                })
              )
            );
        } else if (rule.params) {
          // grid-template is inside media rule
          // if we're inside media rule, we need to store prefixed rules
          // inside rulesToInsert object to be able to preserve the order of media
          // rules and merge them easily
          let cloned = gridAreaRule.clone();
          cloned.removeAll();

          getMSDecls(area, area.row.updateSpan, area.column.updateSpan)
            .reverse()
            .forEach(i =>
              cloned.prepend(
                Object.assign(i, {
                  raws: {
                    between: gridArea.raws.between
                  }
                })
              )
            );

          if (rule.hasDuplicates && hasDuplicateName) {
            cloned.selectors = changeDuplicateAreaSelectors(
              cloned.selectors,
              rule.selectors
            );
          }

          cloned.raws = rule.node.raws;

          if (css.index(rule.node.parent) > gridAreaRuleIndex) {
            // append the prefixed rules right inside media rule
            // with grid-template
            rule.node.parent.append(cloned);
          } else {
            // store the rule to insert later
            rulesToInsert[lastArea][rule.params].push(cloned);
          }

          // set new rule as last rule ONLY if we didn't set lastRule for
          // this grid-area before
          if (!lastRuleIsSet) {
            rulesToInsert[lastArea].lastRule = gridAreaMedia || gridAreaRule;
          }
        }
      }

      return undefined
    });

    // append stored rules inside the media rules
    Object.keys(rulesToInsert).forEach(area => {
      let data = rulesToInsert[area];
      let lastRule = data.lastRule;
      Object.keys(data)
        .reverse()
        .filter(p => p !== 'lastRule')
        .forEach(params => {
          if (data[params].length > 0 && lastRule) {
            lastRule.after({ name: 'media', params });
            lastRule.next().append(data[params]);
          }
        });
    });

    return undefined
  }

  /**
   * Warn user if grid area identifiers are not found
   * @param  {Object} areas
   * @param  {Declaration} decl
   * @param  {Result} result
   * @return {void}
   */
  function warnMissedAreas (areas, decl, result) {
    let missed = Object.keys(areas);

    decl.root().walkDecls('grid-area', gridArea => {
      missed = missed.filter(e => e !== gridArea.value);
    });

    if (missed.length > 0) {
      decl.warn(result, 'Can not find grid areas: ' + missed.join(', '));
    }

    return undefined
  }

  /**
   * compare selectors with grid-area rule and grid-template rule
   * show warning if grid-template selector is not found
   * (this function used for grid-area rule)
   * @param  {Declaration} decl
   * @param  {Result} result
   * @return {void}
   */
  function warnTemplateSelectorNotFound (decl, result) {
    let rule = decl.parent;
    let root = decl.root();
    let duplicatesFound = false;

    // slice selector array. Remove the last part (for comparison)
    let slicedSelectorArr = list$3
      .space(rule.selector)
      .filter(str => str !== '>')
      .slice(0, -1);

    // we need to compare only if selector is complex.
    // e.g '.grid-cell' is simple, but '.parent > .grid-cell' is complex
    if (slicedSelectorArr.length > 0) {
      let gridTemplateFound = false;
      let foundAreaSelector = null;

      root.walkDecls(/grid-template(-areas)?$/, d => {
        let parent = d.parent;
        let templateSelectors = parent.selectors;

        let { areas } = parseTemplate({ decl: d, gap: getGridGap(d) });
        let hasArea = areas[decl.value];

        // find the the matching selectors
        for (let tplSelector of templateSelectors) {
          if (gridTemplateFound) {
            break
          }
          let tplSelectorArr = list$3.space(tplSelector).filter(str => str !== '>');

          gridTemplateFound = tplSelectorArr.every(
            (item, idx) => item === slicedSelectorArr[idx]
          );
        }

        if (gridTemplateFound || !hasArea) {
          return true
        }

        if (!foundAreaSelector) {
          foundAreaSelector = parent.selector;
        }

        // if we found the duplicate area with different selector
        if (foundAreaSelector && foundAreaSelector !== parent.selector) {
          duplicatesFound = true;
        }

        return undefined
      });

      // warn user if we didn't find template
      if (!gridTemplateFound && duplicatesFound) {
        decl.warn(
          result,
          'Autoprefixer cannot find a grid-template ' +
            `containing the duplicate grid-area "${decl.value}" ` +
            `with full selector matching: ${slicedSelectorArr.join(' ')}`
        );
      }
    }
  }

  /**
   * warn user if both grid-area and grid-(row|column)
   * declarations are present in the same rule
   * @param  {Declaration} decl
   * @param  {Result} result
   * @return {void}
   */
  function warnIfGridRowColumnExists (decl, result) {
    let rule = decl.parent;
    let decls = [];
    rule.walkDecls(/^grid-(row|column)/, d => {
      if (
        !d.prop.endsWith('-end') &&
        !d.value.startsWith('span') &&
        !d.prop.endsWith('-gap')
      ) {
        decls.push(d);
      }
    });
    if (decls.length > 0) {
      decls.forEach(d => {
        d.warn(
          result,
          'You already have a grid-area declaration present in the rule. ' +
            `You should use either grid-area or ${d.prop}, not both`
        );
      });
    }

    return undefined
  }

  // Gap utils

  function getGridGap (decl) {
    let gap = {};

    // try to find gap
    let testGap = /^(grid-)?((row|column)-)?gap$/;
    decl.parent.walkDecls(testGap, ({ prop, value }) => {
      if (/^(grid-)?gap$/.test(prop)) {
        let [row, , column] = lib(value).nodes;

        gap.row = row && lib.stringify(row);
        gap.column = column ? lib.stringify(column) : gap.row;
      }
      if (/^(grid-)?row-gap$/.test(prop)) gap.row = value;
      if (/^(grid-)?column-gap$/.test(prop)) gap.column = value;
    });

    return gap
  }

  /**
   * parse media parameters (for example 'min-width: 500px')
   * @param  {String} params parameter to parse
   * @return {}
   */
  function parseMediaParams (params) {
    if (!params) {
      return []
    }
    let parsed = lib(params);
    let prop;
    let value;

    parsed.walk(node => {
      if (node.type === 'word' && /min|max/g.test(node.value)) {
        prop = node.value;
      } else if (node.value.includes('px')) {
        value = parseInt(node.value.replace(/\D/g, ''));
      }
    });

    return [prop, value]
  }

  /**
   * Compare the selectors and decide if we
   * need to inherit gap from compared selector or not.
   * @type {String} selA
   * @type {String} selB
   * @return {Boolean}
   */
  function shouldInheritGap (selA, selB) {
    let result;

    // get arrays of selector split in 3-deep array
    let splitSelectorArrA = splitSelector(selA);
    let splitSelectorArrB = splitSelector(selB);

    if (splitSelectorArrA[0].length < splitSelectorArrB[0].length) {
      // abort if selectorA has lower descendant specificity then selectorB
      // (e.g '.grid' and '.hello .world .grid')
      return false
    } else if (splitSelectorArrA[0].length > splitSelectorArrB[0].length) {
      // if selectorA has higher descendant specificity then selectorB
      // (e.g '.foo .bar .grid' and '.grid')

      let idx = splitSelectorArrA[0].reduce((res, [item], index) => {
        let firstSelectorPart = splitSelectorArrB[0][0][0];
        if (item === firstSelectorPart) {
          return index
        }
        return false
      }, false);

      if (idx) {
        result = splitSelectorArrB[0].every((arr, index) => {
          return arr.every(
            (part, innerIndex) =>
              // because selectorA has more space elements, we need to slice
              // selectorA array by 'idx' number to compare them
              splitSelectorArrA[0].slice(idx)[index][innerIndex] === part
          )
        });
      }
    } else {
      // if selectorA has the same descendant specificity as selectorB
      // this condition covers cases such as: '.grid.foo.bar' and '.grid'
      result = splitSelectorArrB.some(byCommaArr => {
        return byCommaArr.every((bySpaceArr, index) => {
          return bySpaceArr.every(
            (part, innerIndex) => splitSelectorArrA[0][index][innerIndex] === part
          )
        })
      });
    }

    return result
  }
  /**
   * inherit grid gap values from the closest rule above
   * with the same selector
   * @param  {Declaration} decl
   * @param  {Object} gap gap values
   * @return {Object | Boolean} return gap values or false (if not found)
   */
  function inheritGridGap (decl, gap) {
    let rule = decl.parent;
    let mediaRule = getParentMedia(rule);
    let root = rule.root();

    // get an array of selector split in 3-deep array
    let splitSelectorArr = splitSelector(rule.selector);

    // abort if the rule already has gaps
    if (Object.keys(gap).length > 0) {
      return false
    }

    // e.g ['min-width']
    let [prop] = parseMediaParams(mediaRule.params);

    let lastBySpace = splitSelectorArr[0];

    // get escaped value from the selector
    // if we have '.grid-2.foo.bar' selector, will be '\.grid\-2'
    let escaped = escapeRegexp(lastBySpace[lastBySpace.length - 1][0]);

    let regexp = new RegExp(`(${escaped}$)|(${escaped}[,.])`);

    // find the closest rule with the same selector
    let closestRuleGap;
    root.walkRules(regexp, r => {
      let gridGap;

      // abort if are checking the same rule
      if (rule.toString() === r.toString()) {
        return false
      }

      // find grid-gap values
      r.walkDecls('grid-gap', d => (gridGap = getGridGap(d)));

      // skip rule without gaps
      if (!gridGap || Object.keys(gridGap).length === 0) {
        return true
      }

      // skip rules that should not be inherited from
      if (!shouldInheritGap(rule.selector, r.selector)) {
        return true
      }

      let media = getParentMedia(r);
      if (media) {
        // if we are inside media, we need to check that media props match
        // e.g ('min-width' === 'min-width')
        let propToCompare = parseMediaParams(media.params)[0];
        if (propToCompare === prop) {
          closestRuleGap = gridGap;
          return true
        }
      } else {
        closestRuleGap = gridGap;
        return true
      }

      return undefined
    });

    // if we find the closest gap object
    if (closestRuleGap && Object.keys(closestRuleGap).length > 0) {
      return closestRuleGap
    }
    return false
  }

  function warnGridGap ({ gap, hasColumns, decl, result }) {
    let hasBothGaps = gap.row && gap.column;
    if (!hasColumns && (hasBothGaps || (gap.column && !gap.row))) {
      delete gap.column;
      decl.warn(
        result,
        'Can not implement grid-gap without grid-template-columns'
      );
    }
  }

  /**
   * normalize the grid-template-rows/columns values
   * @param  {String} str grid-template-rows/columns value
   * @return {Array} normalized array with values
   * @example
   * let normalized = normalizeRowColumn('1fr repeat(2, 20px 50px) 1fr')
   * normalized // <= ['1fr', '20px', '50px', '20px', '50px', '1fr']
   */
  function normalizeRowColumn (str) {
    let normalized = lib(str).nodes.reduce((result, node) => {
      if (node.type === 'function' && node.value === 'repeat') {
        let key = 'count';

        let [count, value] = node.nodes.reduce(
          (acc, n) => {
            if (n.type === 'word' && key === 'count') {
              acc[0] = Math.abs(parseInt(n.value));
              return acc
            }
            if (n.type === 'div' && n.value === ',') {
              key = 'value';
              return acc
            }
            if (key === 'value') {
              acc[1] += lib.stringify(n);
            }
            return acc
          },
          [0, '']
        );

        if (count) {
          for (let i = 0; i < count; i++) {
            result.push(value);
          }
        }

        return result
      }
      if (node.type === 'space') {
        return result
      }
      return result.concat(lib.stringify(node))
    }, []);

    return normalized
  }

  /**
   * Autoplace grid items
   * @param {Declaration} decl
   * @param {Result} result
   * @param {Object} gap gap values
   * @param {String} autoflowValue grid-auto-flow value
   * @return {void}
   * @see https://github.com/postcss/autoprefixer/issues/1148
   */
  function autoplaceGridItems (decl, result, gap, autoflowValue = 'row') {
    let { parent } = decl;

    let rowDecl = parent.nodes.find(i => i.prop === 'grid-template-rows');
    let rows = normalizeRowColumn(rowDecl.value);
    let columns = normalizeRowColumn(decl.value);

    // Build array of area names with dummy values. If we have 3 columns and
    // 2 rows, filledRows will be equal to ['1 2 3', '4 5 6']
    let filledRows = rows.map((_, rowIndex) => {
      return Array.from(
        { length: columns.length },
        (v, k) => k + rowIndex * columns.length + 1
      ).join(' ')
    });

    let areas = parseGridAreas({ rows: filledRows, gap });
    let keys = Object.keys(areas);
    let items = keys.map(i => areas[i]);

    // Change the order of cells if grid-auto-flow value is 'column'
    if (autoflowValue.includes('column')) {
      items = items.sort((a, b) => a.column.start - b.column.start);
    }

    // Insert new rules
    items.reverse().forEach((item, index) => {
      let { column, row } = item;
      let nodeSelector = parent.selectors
        .map(sel => sel + ` > *:nth-child(${keys.length - index})`)
        .join(', ');

      // create new rule
      let node = parent.clone().removeAll();

      // change rule selector
      node.selector = nodeSelector;

      // insert prefixed row/column values
      node.append({ prop: '-ms-grid-row', value: row.start });
      node.append({ prop: '-ms-grid-column', value: column.start });

      // insert rule
      parent.after(node);
    });

    return undefined
  }

  var gridUtils = {
    parse: parse$6,
    translate,
    parseTemplate,
    parseGridAreas,
    warnMissedAreas,
    insertAreas,
    insertDecl,
    prefixTrackProp,
    prefixTrackValue,
    getGridGap,
    warnGridGap,
    warnTemplateSelectorNotFound,
    warnIfGridRowColumnExists,
    inheritGridGap,
    autoplaceGridItems
  };

  let insertAreas$1 = gridUtils.insertAreas;

  const OLD_LINEAR = /(^|[^-])linear-gradient\(\s*(top|left|right|bottom)/i;
  const OLD_RADIAL = /(^|[^-])radial-gradient\(\s*\d+(\w*|%)\s+\d+(\w*|%)\s*,/i;
  const IGNORE_NEXT = /(!\s*)?autoprefixer:\s*ignore\s+next/i;
  const GRID_REGEX = /(!\s*)?autoprefixer\s*grid:\s*(on|off|(no-)?autoplace)/i;

  const SIZES = [
    'width',
    'height',
    'min-width',
    'max-width',
    'min-height',
    'max-height',
    'inline-size',
    'min-inline-size',
    'max-inline-size',
    'block-size',
    'min-block-size',
    'max-block-size'
  ];

  function hasGridTemplate (decl) {
    return decl.parent.some(
      i => i.prop === 'grid-template' || i.prop === 'grid-template-areas'
    )
  }

  function hasRowsAndColumns (decl) {
    let hasRows = decl.parent.some(i => i.prop === 'grid-template-rows');
    let hasColumns = decl.parent.some(i => i.prop === 'grid-template-columns');
    return hasRows && hasColumns
  }

  class Processor$2 {
    constructor (prefixes) {
      this.prefixes = prefixes;
    }

    /**
     * Add necessary prefixes
     */
    add (css, result) {
      // At-rules
      let resolution = this.prefixes.add['@resolution'];
      let keyframes = this.prefixes.add['@keyframes'];
      let viewport = this.prefixes.add['@viewport'];
      let supports = this.prefixes.add['@supports'];

      css.walkAtRules(rule => {
        if (rule.name === 'keyframes') {
          if (!this.disabled(rule, result)) {
            return keyframes && keyframes.process(rule)
          }
        } else if (rule.name === 'viewport') {
          if (!this.disabled(rule, result)) {
            return viewport && viewport.process(rule)
          }
        } else if (rule.name === 'supports') {
          if (
            this.prefixes.options.supports !== false &&
            !this.disabled(rule, result)
          ) {
            return supports.process(rule)
          }
        } else if (rule.name === 'media' && rule.params.includes('-resolution')) {
          if (!this.disabled(rule, result)) {
            return resolution && resolution.process(rule)
          }
        }

        return undefined
      });

      // Selectors
      css.walkRules(rule => {
        if (this.disabled(rule, result)) return undefined

        return this.prefixes.add.selectors.map(selector => {
          return selector.process(rule, result)
        })
      });

      function insideGrid (decl) {
        return decl.parent.nodes.some(node => {
          if (node.type !== 'decl') return false
          let displayGrid =
            node.prop === 'display' && /(inline-)?grid/.test(node.value);
          let gridTemplate = node.prop.startsWith('grid-template');
          let gridGap = /^grid-([A-z]+-)?gap/.test(node.prop);
          return displayGrid || gridTemplate || gridGap
        })
      }
      function insideFlex (decl) {
        return decl.parent.some(node => {
          return node.prop === 'display' && /(inline-)?flex/.test(node.value)
        })
      }

      let gridPrefixes =
        this.gridStatus(css, result) &&
        this.prefixes.add['grid-area'] &&
        this.prefixes.add['grid-area'].prefixes;

      css.walkDecls(decl => {
        if (this.disabledDecl(decl, result)) return undefined

        let parent = decl.parent;
        let prop = decl.prop;
        let value = decl.value;

        if (prop === 'grid-row-span') {
          result.warn(
            'grid-row-span is not part of final Grid Layout. Use grid-row.',
            { node: decl }
          );
          return undefined
        } else if (prop === 'grid-column-span') {
          result.warn(
            'grid-column-span is not part of final Grid Layout. Use grid-column.',
            { node: decl }
          );
          return undefined
        } else if (prop === 'display' && value === 'box') {
          result.warn(
            'You should write display: flex by final spec ' +
              'instead of display: box',
            { node: decl }
          );
          return undefined
        } else if (prop === 'text-emphasis-position') {
          if (value === 'under' || value === 'over') {
            result.warn(
              'You should use 2 values for text-emphasis-position ' +
                'For example, `under left` instead of just `under`.',
              { node: decl }
            );
          }
        } else if (
          /^(align|justify|place)-(items|content)$/.test(prop) &&
          insideFlex(decl)
        ) {
          if (value === 'start' || value === 'end') {
            result.warn(
              `${value} value has mixed support, consider using ` +
                `flex-${value} instead`,
              { node: decl }
            );
          }
        } else if (prop === 'text-decoration-skip' && value === 'ink') {
          result.warn(
            'Replace text-decoration-skip: ink to ' +
              'text-decoration-skip-ink: auto, because spec had been changed',
            { node: decl }
          );
        } else {
          if (gridPrefixes && this.gridStatus(decl, result)) {
            if (decl.value === 'subgrid') {
              result.warn('IE does not support subgrid', { node: decl });
            }
            if (/^(align|justify|place)-items$/.test(prop) && insideGrid(decl)) {
              let fixed = prop.replace('-items', '-self');
              result.warn(
                `IE does not support ${prop} on grid containers. ` +
                  `Try using ${fixed} on child elements instead: ` +
                  `${decl.parent.selector} > * { ${fixed}: ${decl.value} }`,
                { node: decl }
              );
            } else if (
              /^(align|justify|place)-content$/.test(prop) &&
              insideGrid(decl)
            ) {
              result.warn(`IE does not support ${decl.prop} on grid containers`, {
                node: decl
              });
            } else if (prop === 'display' && decl.value === 'contents') {
              result.warn(
                'Please do not use display: contents; ' +
                  'if you have grid setting enabled',
                { node: decl }
              );
              return undefined
            } else if (decl.prop === 'grid-gap') {
              let status = this.gridStatus(decl, result);
              if (
                status === 'autoplace' &&
                !hasRowsAndColumns(decl) &&
                !hasGridTemplate(decl)
              ) {
                result.warn(
                  'grid-gap only works if grid-template(-areas) is being ' +
                    'used or both rows and columns have been declared ' +
                    'and cells have not been manually ' +
                    'placed inside the explicit grid',
                  { node: decl }
                );
              } else if (
                (status === true || status === 'no-autoplace') &&
                !hasGridTemplate(decl)
              ) {
                result.warn(
                  'grid-gap only works if grid-template(-areas) is being used',
                  { node: decl }
                );
              }
            } else if (prop === 'grid-auto-columns') {
              result.warn('grid-auto-columns is not supported by IE', {
                node: decl
              });
              return undefined
            } else if (prop === 'grid-auto-rows') {
              result.warn('grid-auto-rows is not supported by IE', { node: decl });
              return undefined
            } else if (prop === 'grid-auto-flow') {
              let hasRows = parent.some(i => i.prop === 'grid-template-rows');
              let hasCols = parent.some(i => i.prop === 'grid-template-columns');

              if (hasGridTemplate(decl)) {
                result.warn('grid-auto-flow is not supported by IE', {
                  node: decl
                });
              } else if (value.includes('dense')) {
                result.warn('grid-auto-flow: dense is not supported by IE', {
                  node: decl
                });
              } else if (!hasRows && !hasCols) {
                result.warn(
                  'grid-auto-flow works only if grid-template-rows and ' +
                    'grid-template-columns are present in the same rule',
                  { node: decl }
                );
              }
              return undefined
            } else if (value.includes('auto-fit')) {
              result.warn('auto-fit value is not supported by IE', {
                node: decl,
                word: 'auto-fit'
              });
              return undefined
            } else if (value.includes('auto-fill')) {
              result.warn('auto-fill value is not supported by IE', {
                node: decl,
                word: 'auto-fill'
              });
              return undefined
            } else if (prop.startsWith('grid-template') && value.includes('[')) {
              result.warn(
                'Autoprefixer currently does not support line names. ' +
                  'Try using grid-template-areas instead.',
                { node: decl, word: '[' }
              );
            }
          }
          if (value.includes('radial-gradient')) {
            if (OLD_RADIAL.test(decl.value)) {
              result.warn(
                'Gradient has outdated direction syntax. ' +
                  'New syntax is like `closest-side at 0 0` ' +
                  'instead of `0 0, closest-side`.',
                { node: decl }
              );
            } else {
              let ast = lib(value);

              for (let i of ast.nodes) {
                if (i.type === 'function' && i.value === 'radial-gradient') {
                  for (let word of i.nodes) {
                    if (word.type === 'word') {
                      if (word.value === 'cover') {
                        result.warn(
                          'Gradient has outdated direction syntax. ' +
                            'Replace `cover` to `farthest-corner`.',
                          { node: decl }
                        );
                      } else if (word.value === 'contain') {
                        result.warn(
                          'Gradient has outdated direction syntax. ' +
                            'Replace `contain` to `closest-side`.',
                          { node: decl }
                        );
                      }
                    }
                  }
                }
              }
            }
          }
          if (value.includes('linear-gradient')) {
            if (OLD_LINEAR.test(value)) {
              result.warn(
                'Gradient has outdated direction syntax. ' +
                  'New syntax is like `to left` instead of `right`.',
                { node: decl }
              );
            }
          }
        }

        if (SIZES.includes(decl.prop)) {
          if (!decl.value.includes('-fill-available')) {
            if (decl.value.includes('fill-available')) {
              result.warn(
                'Replace fill-available to stretch, ' +
                  'because spec had been changed',
                { node: decl }
              );
            } else if (decl.value.includes('fill')) {
              let ast = lib(value);
              if (ast.nodes.some(i => i.type === 'word' && i.value === 'fill')) {
                result.warn(
                  'Replace fill to stretch, because spec had been changed',
                  { node: decl }
                );
              }
            }
          }
        }

        let prefixer;

        if (decl.prop === 'transition' || decl.prop === 'transition-property') {
          // Transition
          return this.prefixes.transition.add(decl, result)
        } else if (decl.prop === 'align-self') {
          // align-self flexbox or grid
          let display = this.displayType(decl);
          if (display !== 'grid' && this.prefixes.options.flexbox !== false) {
            prefixer = this.prefixes.add['align-self'];
            if (prefixer && prefixer.prefixes) {
              prefixer.process(decl);
            }
          }
          if (this.gridStatus(decl, result) !== false) {
            prefixer = this.prefixes.add['grid-row-align'];
            if (prefixer && prefixer.prefixes) {
              return prefixer.process(decl, result)
            }
          }
        } else if (decl.prop === 'justify-self') {
          // justify-self flexbox or grid
          if (this.gridStatus(decl, result) !== false) {
            prefixer = this.prefixes.add['grid-column-align'];
            if (prefixer && prefixer.prefixes) {
              return prefixer.process(decl, result)
            }
          }
        } else if (decl.prop === 'place-self') {
          prefixer = this.prefixes.add['place-self'];
          if (
            prefixer &&
            prefixer.prefixes &&
            this.gridStatus(decl, result) !== false
          ) {
            return prefixer.process(decl, result)
          }
        } else {
          // Properties
          prefixer = this.prefixes.add[decl.prop];
          if (prefixer && prefixer.prefixes) {
            return prefixer.process(decl, result)
          }
        }

        return undefined
      });

      // Insert grid-area prefixes. We need to be able to store the different
      // rules as a data and hack API is not enough for this
      if (this.gridStatus(css, result)) {
        insertAreas$1(css, this.disabled);
      }

      // Values
      return css.walkDecls(decl => {
        if (this.disabledValue(decl, result)) return

        let unprefixed = this.prefixes.unprefixed(decl.prop);
        let list = this.prefixes.values('add', unprefixed);
        if (Array.isArray(list)) {
          for (let value of list) {
            if (value.process) value.process(decl, result);
          }
        }
        value.save(this.prefixes, decl);
      })
    }

    /**
     * Remove unnecessary pefixes
     */
    remove (css, result) {
      // At-rules
      let resolution = this.prefixes.remove['@resolution'];

      css.walkAtRules((rule, i) => {
        if (this.prefixes.remove[`@${rule.name}`]) {
          if (!this.disabled(rule, result)) {
            rule.parent.removeChild(i);
          }
        } else if (
          rule.name === 'media' &&
          rule.params.includes('-resolution') &&
          resolution
        ) {
          resolution.clean(rule);
        }
      });

      // Selectors
      for (let checker of this.prefixes.remove.selectors) {
        css.walkRules((rule, i) => {
          if (checker.check(rule)) {
            if (!this.disabled(rule, result)) {
              rule.parent.removeChild(i);
            }
          }
        });
      }

      return css.walkDecls((decl, i) => {
        if (this.disabled(decl, result)) return

        let rule = decl.parent;
        let unprefixed = this.prefixes.unprefixed(decl.prop);

        // Transition
        if (decl.prop === 'transition' || decl.prop === 'transition-property') {
          this.prefixes.transition.remove(decl);
        }

        // Properties
        if (
          this.prefixes.remove[decl.prop] &&
          this.prefixes.remove[decl.prop].remove
        ) {
          let notHack = this.prefixes.group(decl).down(other => {
            return this.prefixes.normalize(other.prop) === unprefixed
          });

          if (unprefixed === 'flex-flow') {
            notHack = true;
          }

          if (decl.prop === '-webkit-box-orient') {
            let hacks = { 'flex-direction': true, 'flex-flow': true };
            if (!decl.parent.some(j => hacks[j.prop])) return
          }

          if (notHack && !this.withHackValue(decl)) {
            if (decl.raw('before').includes('\n')) {
              this.reduceSpaces(decl);
            }
            rule.removeChild(i);
            return
          }
        }

        // Values
        for (let checker of this.prefixes.values('remove', unprefixed)) {
          if (!checker.check) continue
          if (!checker.check(decl.value)) continue

          unprefixed = checker.unprefixed;
          let notHack = this.prefixes.group(decl).down(other => {
            return other.value.includes(unprefixed)
          });

          if (notHack) {
            rule.removeChild(i);
            return
          }
        }
      })
    }

    /**
     * Some rare old values, which is not in standard
     */
    withHackValue (decl) {
      return decl.prop === '-webkit-background-clip' && decl.value === 'text'
    }

    /**
     * Check for grid/flexbox options.
     */
    disabledValue (node, result) {
      if (this.gridStatus(node, result) === false && node.type === 'decl') {
        if (node.prop === 'display' && node.value.includes('grid')) {
          return true
        }
      }
      if (this.prefixes.options.flexbox === false && node.type === 'decl') {
        if (node.prop === 'display' && node.value.includes('flex')) {
          return true
        }
      }

      return this.disabled(node, result)
    }

    /**
     * Check for grid/flexbox options.
     */
    disabledDecl (node, result) {
      if (this.gridStatus(node, result) === false && node.type === 'decl') {
        if (node.prop.includes('grid') || node.prop === 'justify-items') {
          return true
        }
      }
      if (this.prefixes.options.flexbox === false && node.type === 'decl') {
        let other = ['order', 'justify-content', 'align-items', 'align-content'];
        if (node.prop.includes('flex') || other.includes(node.prop)) {
          return true
        }
      }

      return this.disabled(node, result)
    }

    /**
     * Check for control comment and global options
     */
    disabled (node, result) {
      if (!node) return false

      if (node._autoprefixerDisabled !== undefined) {
        return node._autoprefixerDisabled
      }

      if (node.parent) {
        let p = node.prev();
        if (p && p.type === 'comment' && IGNORE_NEXT.test(p.text)) {
          node._autoprefixerDisabled = true;
          node._autoprefixerSelfDisabled = true;
          return true
        }
      }

      let value = null;
      if (node.nodes) {
        let status;
        node.each(i => {
          if (i.type !== 'comment') return
          if (/(!\s*)?autoprefixer:\s*(off|on)/i.test(i.text)) {
            if (typeof status !== 'undefined') {
              result.warn(
                'Second Autoprefixer control comment ' +
                  'was ignored. Autoprefixer applies control ' +
                  'comment to whole block, not to next rules.',
                { node: i }
              );
            } else {
              status = /on/i.test(i.text);
            }
          }
        });

        if (status !== undefined) {
          value = !status;
        }
      }
      if (!node.nodes || value === null) {
        if (node.parent) {
          let isParentDisabled = this.disabled(node.parent, result);
          if (node.parent._autoprefixerSelfDisabled === true) {
            value = false;
          } else {
            value = isParentDisabled;
          }
        } else {
          value = false;
        }
      }
      node._autoprefixerDisabled = value;
      return value
    }

    /**
     * Normalize spaces in cascade declaration group
     */
    reduceSpaces (decl) {
      let stop = false;
      this.prefixes.group(decl).up(() => {
        stop = true;
        return true
      });
      if (stop) {
        return
      }

      let parts = decl.raw('before').split('\n');
      let prevMin = parts[parts.length - 1].length;
      let diff = false;

      this.prefixes.group(decl).down(other => {
        parts = other.raw('before').split('\n');
        let last = parts.length - 1;

        if (parts[last].length > prevMin) {
          if (diff === false) {
            diff = parts[last].length - prevMin;
          }

          parts[last] = parts[last].slice(0, -diff);
          other.raws.before = parts.join('\n');
        }
      });
    }

    /**
     * Is it flebox or grid rule
     */
    displayType (decl) {
      for (let i of decl.parent.nodes) {
        if (i.prop !== 'display') {
          continue
        }

        if (i.value.includes('flex')) {
          return 'flex'
        }

        if (i.value.includes('grid')) {
          return 'grid'
        }
      }

      return false
    }

    /**
     * Set grid option via control comment
     */
    gridStatus (node, result) {
      if (!node) return false

      if (node._autoprefixerGridStatus !== undefined) {
        return node._autoprefixerGridStatus
      }

      let value = null;
      if (node.nodes) {
        let status;
        node.each(i => {
          if (i.type !== 'comment') return
          if (GRID_REGEX.test(i.text)) {
            let hasAutoplace = /:\s*autoplace/i.test(i.text);
            let noAutoplace = /no-autoplace/i.test(i.text);
            if (typeof status !== 'undefined') {
              result.warn(
                'Second Autoprefixer grid control comment was ' +
                  'ignored. Autoprefixer applies control comments to the whole ' +
                  'block, not to the next rules.',
                { node: i }
              );
            } else if (hasAutoplace) {
              status = 'autoplace';
            } else if (noAutoplace) {
              status = true;
            } else {
              status = /on/i.test(i.text);
            }
          }
        });

        if (status !== undefined) {
          value = status;
        }
      }

      if (node.type === 'atrule' && node.name === 'supports') {
        let params = node.params;
        if (params.includes('grid') && params.includes('auto')) {
          value = false;
        }
      }

      if (!node.nodes || value === null) {
        if (node.parent) {
          let isParentGrid = this.gridStatus(node.parent, result);
          if (node.parent._autoprefixerSelfDisabled === true) {
            value = false;
          } else {
            value = isParentGrid;
          }
        } else if (typeof this.prefixes.options.grid !== 'undefined') {
          value = this.prefixes.options.grid;
        } else if (typeof browser$1.env.AUTOPREFIXER_GRID !== 'undefined') {
          if (browser$1.env.AUTOPREFIXER_GRID === 'autoplace') {
            value = 'autoplace';
          } else {
            value = true;
          }
        } else {
          value = false;
        }
      }

      node._autoprefixerGridStatus = value;
      return value
    }
  }

  var processor$1 = Processor$2;

  function last (array) {
    return array[array.length - 1]
  }

  let brackets = {
    /**
     * Parse string to nodes tree
     */
    parse (str) {
      let current = [''];
      let stack = [current];

      for (let sym of str) {
        if (sym === '(') {
          current = [''];
          last(stack).push(current);
          stack.push(current);
          continue
        }

        if (sym === ')') {
          stack.pop();
          current = last(stack);
          current.push('');
          continue
        }

        current[current.length - 1] += sym;
      }

      return stack[0]
    },

    /**
     * Generate output string by nodes tree
     */
    stringify (ast) {
      let result = '';
      for (let i of ast) {
        if (typeof i === 'object') {
          result += `(${brackets.stringify(i)})`;
          continue
        }

        result += i;
      }
      return result
    }
  };

  var brackets_1 = brackets;

  let { feature: feature$1 } = unpacker;
  let { parse: parse$7 } = postcss_1;






  let data = feature$1(cssFeaturequeries);

  let supported$1 = [];
  for (let browser in data.stats) {
    let versions = data.stats[browser];
    for (let version in versions) {
      let support = versions[version];
      if (/y/.test(support)) {
        supported$1.push(browser + ' ' + version);
      }
    }
  }

  class Supports {
    constructor (Prefixes, all) {
      this.Prefixes = Prefixes;
      this.all = all;
    }

    /**
     * Return prefixer only with @supports supported browsers
     */
    prefixer () {
      if (this.prefixerCache) {
        return this.prefixerCache
      }

      let filtered = this.all.browsers.selected.filter(i => {
        return supported$1.includes(i)
      });

      let browsers = new browsers$1(
        this.all.browsers.data,
        filtered,
        this.all.options
      );
      this.prefixerCache = new this.Prefixes(
        this.all.data,
        browsers,
        this.all.options
      );
      return this.prefixerCache
    }

    /**
     * Parse string into declaration property and value
     */
    parse (str) {
      let parts = str.split(':');
      let prop = parts[0];
      let value = parts[1];
      if (!value) value = '';
      return [prop.trim(), value.trim()]
    }

    /**
     * Create virtual rule to process it by prefixer
     */
    virtual (str) {
      let [prop, value] = this.parse(str);
      let rule = parse$7('a{}').first;
      rule.append({ prop, value, raws: { before: '' } });
      return rule
    }

    /**
     * Return array of Declaration with all necessary prefixes
     */
    prefixed (str) {
      let rule = this.virtual(str);
      if (this.disabled(rule.first)) {
        return rule.nodes
      }

      let result = { warn: () => null };

      let prefixer = this.prefixer().add[rule.first.prop];
      prefixer && prefixer.process && prefixer.process(rule.first, result);

      for (let decl of rule.nodes) {
        for (let value of this.prefixer().values('add', rule.first.prop)) {
          value.process(decl);
        }
        value.save(this.all, decl);
      }

      return rule.nodes
    }

    /**
     * Return true if brackets node is "not" word
     */
    isNot (node) {
      return typeof node === 'string' && /not\s*/i.test(node)
    }

    /**
     * Return true if brackets node is "or" word
     */
    isOr (node) {
      return typeof node === 'string' && /\s*or\s*/i.test(node)
    }

    /**
     * Return true if brackets node is (prop: value)
     */
    isProp (node) {
      return (
        typeof node === 'object' &&
        node.length === 1 &&
        typeof node[0] === 'string'
      )
    }

    /**
     * Return true if prefixed property has no unprefixed
     */
    isHack (all, unprefixed) {
      let check = new RegExp(`(\\(|\\s)${utils.escapeRegexp(unprefixed)}:`);
      return !check.test(all)
    }

    /**
     * Return true if we need to remove node
     */
    toRemove (str, all) {
      let [prop, value] = this.parse(str);
      let unprefixed = this.all.unprefixed(prop);

      let cleaner = this.all.cleaner();

      if (
        cleaner.remove[prop] &&
        cleaner.remove[prop].remove &&
        !this.isHack(all, unprefixed)
      ) {
        return true
      }

      for (let checker of cleaner.values('remove', unprefixed)) {
        if (checker.check(value)) {
          return true
        }
      }

      return false
    }

    /**
     * Remove all unnecessary prefixes
     */
    remove (nodes, all) {
      let i = 0;
      while (i < nodes.length) {
        if (
          !this.isNot(nodes[i - 1]) &&
          this.isProp(nodes[i]) &&
          this.isOr(nodes[i + 1])
        ) {
          if (this.toRemove(nodes[i][0], all)) {
            nodes.splice(i, 2);
            continue
          }

          i += 2;
          continue
        }

        if (typeof nodes[i] === 'object') {
          nodes[i] = this.remove(nodes[i], all);
        }

        i += 1;
      }
      return nodes
    }

    /**
     * Clean brackets with one child
     */
    cleanBrackets (nodes) {
      return nodes.map(i => {
        if (typeof i !== 'object') {
          return i
        }

        if (i.length === 1 && typeof i[0] === 'object') {
          return this.cleanBrackets(i[0])
        }

        return this.cleanBrackets(i)
      })
    }

    /**
     * Add " or " between properties and convert it to brackets format
     */
    convert (progress) {
      let result = [''];
      for (let i of progress) {
        result.push([`${i.prop}: ${i.value}`]);
        result.push(' or ');
      }
      result[result.length - 1] = '';
      return result
    }

    /**
     * Compress value functions into a string nodes
     */
    normalize (nodes) {
      if (typeof nodes !== 'object') {
        return nodes
      }

      nodes = nodes.filter(i => i !== '');
      if (typeof nodes[0] === 'string' && nodes[0].includes(':')) {
        return [brackets_1.stringify(nodes)]
      }

      return nodes.map(i => this.normalize(i))
    }

    /**
     * Add prefixes
     */
    add (nodes, all) {
      return nodes.map(i => {
        if (this.isProp(i)) {
          let prefixed = this.prefixed(i[0]);
          if (prefixed.length > 1) {
            return this.convert(prefixed)
          }

          return i
        }

        if (typeof i === 'object') {
          return this.add(i, all)
        }

        return i
      })
    }

    /**
     * Add prefixed declaration
     */
    process (rule) {
      let ast = brackets_1.parse(rule.params);
      ast = this.normalize(ast);
      ast = this.remove(ast, rule.params);
      ast = this.add(ast, rule.params);
      ast = this.cleanBrackets(ast);
      rule.params = brackets_1.stringify(ast);
    }

    /**
     * Check global options
     */
    disabled (node) {
      if (!this.all.options.grid) {
        if (node.prop === 'display' && node.value.includes('grid')) {
          return true
        }
        if (node.prop.includes('grid') || node.prop === 'justify-items') {
          return true
        }
      }

      if (this.all.options.flexbox === false) {
        if (node.prop === 'display' && node.value.includes('flex')) {
          return true
        }
        let other = ['order', 'justify-content', 'align-items', 'align-content'];
        if (node.prop.includes('flex') || other.includes(node.prop)) {
          return true
        }
      }

      return false
    }
  }

  var supports = Supports;

  class OldSelector {
    constructor (selector, prefix) {
      this.prefix = prefix;
      this.prefixed = selector.prefixed(this.prefix);
      this.regexp = selector.regexp(this.prefix);

      this.prefixeds = selector
        .possible()
        .map(x => [selector.prefixed(x), selector.regexp(x)]);

      this.unprefixed = selector.name;
      this.nameRegexp = selector.regexp();
    }

    /**
     * Is rule a hack without unprefixed version bottom
     */
    isHack (rule) {
      let index = rule.parent.index(rule) + 1;
      let rules = rule.parent.nodes;

      while (index < rules.length) {
        let before = rules[index].selector;
        if (!before) {
          return true
        }

        if (before.includes(this.unprefixed) && before.match(this.nameRegexp)) {
          return false
        }

        let some = false;
        for (let [string, regexp] of this.prefixeds) {
          if (before.includes(string) && before.match(regexp)) {
            some = true;
            break
          }
        }

        if (!some) {
          return true
        }

        index += 1;
      }

      return true
    }

    /**
     * Does rule contain an unnecessary prefixed selector
     */
    check (rule) {
      if (!rule.selector.includes(this.prefixed)) {
        return false
      }
      if (!rule.selector.match(this.regexp)) {
        return false
      }
      if (this.isHack(rule)) {
        return false
      }
      return true
    }
  }

  var oldSelector = OldSelector;

  let { list: list$4 } = postcss_1;






  class Selector extends prefixer {
    constructor (name, prefixes, all) {
      super(name, prefixes, all);
      this.regexpCache = new Map();
    }

    /**
     * Is rule selectors need to be prefixed
     */
    check (rule) {
      if (rule.selector.includes(this.name)) {
        return !!rule.selector.match(this.regexp())
      }

      return false
    }

    /**
     * Return prefixed version of selector
     */
    prefixed (prefix) {
      return this.name.replace(/^(\W*)/, `$1${prefix}`)
    }

    /**
     * Lazy loadRegExp for name
     */
    regexp (prefix) {
      if (!this.regexpCache.has(prefix)) {
        let name = prefix ? this.prefixed(prefix) : this.name;
        this.regexpCache.set(
          prefix,
          new RegExp(`(^|[^:"'=])${utils.escapeRegexp(name)}`, 'gi')
        );
      }

      return this.regexpCache.get(prefix)
    }

    /**
     * All possible prefixes
     */
    possible () {
      return browsers$1.prefixes()
    }

    /**
     * Return all possible selector prefixes
     */
    prefixeds (rule) {
      if (rule._autoprefixerPrefixeds) {
        if (rule._autoprefixerPrefixeds[this.name]) {
          return rule._autoprefixerPrefixeds
        }
      } else {
        rule._autoprefixerPrefixeds = {};
      }

      let prefixeds = {};
      if (rule.selector.includes(',')) {
        let ruleParts = list$4.comma(rule.selector);
        let toProcess = ruleParts.filter(el => el.includes(this.name));

        for (let prefix of this.possible()) {
          prefixeds[prefix] = toProcess
            .map(el => this.replace(el, prefix))
            .join(', ');
        }
      } else {
        for (let prefix of this.possible()) {
          prefixeds[prefix] = this.replace(rule.selector, prefix);
        }
      }

      rule._autoprefixerPrefixeds[this.name] = prefixeds;
      return rule._autoprefixerPrefixeds
    }

    /**
     * Is rule already prefixed before
     */
    already (rule, prefixeds, prefix) {
      let index = rule.parent.index(rule) - 1;

      while (index >= 0) {
        let before = rule.parent.nodes[index];

        if (before.type !== 'rule') {
          return false
        }

        let some = false;
        for (let key in prefixeds[this.name]) {
          let prefixed = prefixeds[this.name][key];
          if (before.selector === prefixed) {
            if (prefix === key) {
              return true
            } else {
              some = true;
              break
            }
          }
        }
        if (!some) {
          return false
        }

        index -= 1;
      }

      return false
    }

    /**
     * Replace selectors by prefixed one
     */
    replace (selector, prefix) {
      return selector.replace(this.regexp(), `$1${this.prefixed(prefix)}`)
    }

    /**
     * Clone and add prefixes for at-rule
     */
    add (rule, prefix) {
      let prefixeds = this.prefixeds(rule);

      if (this.already(rule, prefixeds, prefix)) {
        return
      }

      let cloned = this.clone(rule, { selector: prefixeds[this.name][prefix] });
      rule.parent.insertBefore(rule, cloned);
    }

    /**
     * Return function to fast find prefixed selector
     */
    old (prefix) {
      return new oldSelector(this, prefix)
    }
  }

  var selector = Selector;

  class AtRule$2 extends prefixer {
    /**
     * Clone and add prefixes for at-rule
     */
    add (rule, prefix) {
      let prefixed = prefix + rule.name;

      let already = rule.parent.some(
        i => i.name === prefixed && i.params === rule.params
      );
      if (already) {
        return undefined
      }

      let cloned = this.clone(rule, { name: prefixed });
      return rule.parent.insertBefore(rule, cloned)
    }

    /**
     * Clone node with prefixes
     */
    process (node) {
      let parent = this.parentPrefix(node);

      for (let prefix of this.prefixes) {
        if (!parent || parent === prefix) {
          this.add(node, prefix);
        }
      }
    }
  }

  var atRule$1 = AtRule$2;

  class Fullscreen extends selector {
    /**
     * Return different selectors depend on prefix
     */
    prefixed (prefix) {
      if (prefix === '-webkit-') {
        return ':-webkit-full-screen'
      }
      if (prefix === '-moz-') {
        return ':-moz-full-screen'
      }
      return `:${prefix}fullscreen`
    }
  }

  Fullscreen.names = [':fullscreen'];

  var fullscreen$1 = Fullscreen;

  class Placeholder extends selector {
    /**
     * Add old mozilla to possible prefixes
     */
    possible () {
      return super.possible().concat(['-moz- old', '-ms- old'])
    }

    /**
     * Return different selectors depend on prefix
     */
    prefixed (prefix) {
      if (prefix === '-webkit-') {
        return '::-webkit-input-placeholder'
      }
      if (prefix === '-ms-') {
        return '::-ms-input-placeholder'
      }
      if (prefix === '-ms- old') {
        return ':-ms-input-placeholder'
      }
      if (prefix === '-moz- old') {
        return ':-moz-placeholder'
      }
      return `::${prefix}placeholder`
    }
  }

  Placeholder.names = ['::placeholder'];

  var placeholder = Placeholder;

  class PlaceholderShown extends selector {
    /**
     * Return different selectors depend on prefix
     */
    prefixed (prefix) {
      if (prefix === '-ms-') {
        return ':-ms-input-placeholder'
      }
      return `:${prefix}placeholder-shown`
    }
  }

  PlaceholderShown.names = [':placeholder-shown'];

  var placeholderShown = PlaceholderShown;

  /**
   * Return flexbox spec versions by prefix
   */
  var flexSpec = function (prefix) {
    let spec;
    if (prefix === '-webkit- 2009' || prefix === '-moz-') {
      spec = 2009;
    } else if (prefix === '-ms-') {
      spec = 2012;
    } else if (prefix === '-webkit-') {
      spec = 'final';
    }

    if (prefix === '-webkit- 2009') {
      prefix = '-webkit-';
    }

    return [spec, prefix]
  };

  let list$5 = postcss_1.list;




  class Flex extends declaration$1 {
    /**
     * Change property name for 2009 spec
     */
    prefixed (prop, prefix) {
      let spec
      ;[spec, prefix] = flexSpec(prefix);
      if (spec === 2009) {
        return prefix + 'box-flex'
      }
      return super.prefixed(prop, prefix)
    }

    /**
     * Return property name by final spec
     */
    normalize () {
      return 'flex'
    }

    /**
     * Spec 2009 supports only first argument
     * Spec 2012 disallows unitless basis
     */
    set (decl, prefix) {
      let spec = flexSpec(prefix)[0];
      if (spec === 2009) {
        decl.value = list$5.space(decl.value)[0];
        decl.value = Flex.oldValues[decl.value] || decl.value;
        return super.set(decl, prefix)
      }
      if (spec === 2012) {
        let components = list$5.space(decl.value);
        if (components.length === 3 && components[2] === '0') {
          decl.value = components.slice(0, 2).concat('0px').join(' ');
        }
      }
      return super.set(decl, prefix)
    }
  }

  Flex.names = ['flex', 'box-flex'];

  Flex.oldValues = {
    auto: '1',
    none: '0'
  };

  var flex = Flex;

  class Order extends declaration$1 {
    /**
     * Change property name for 2009 and 2012 specs
     */
    prefixed (prop, prefix) {
      let spec
      ;[spec, prefix] = flexSpec(prefix);
      if (spec === 2009) {
        return prefix + 'box-ordinal-group'
      }
      if (spec === 2012) {
        return prefix + 'flex-order'
      }
      return super.prefixed(prop, prefix)
    }

    /**
     * Return property name by final spec
     */
    normalize () {
      return 'order'
    }

    /**
     * Fix value for 2009 spec
     */
    set (decl, prefix) {
      let spec = flexSpec(prefix)[0];
      if (spec === 2009 && /\d/.test(decl.value)) {
        decl.value = (parseInt(decl.value) + 1).toString();
        return super.set(decl, prefix)
      }
      return super.set(decl, prefix)
    }
  }

  Order.names = ['order', 'flex-order', 'box-ordinal-group'];

  var order = Order;

  class Filter extends declaration$1 {
    /**
     * Check is it Internet Explorer filter
     */
    check (decl) {
      let v = decl.value;
      return (
        !v.toLowerCase().includes('alpha(') &&
        !v.includes('DXImageTransform.Microsoft') &&
        !v.includes('data:image/svg+xml')
      )
    }
  }

  Filter.names = ['filter'];

  var filter$1 = Filter;

  class GridEnd extends declaration$1 {
    /**
     * Change repeating syntax for IE
     */
    insert (decl, prefix, prefixes, result) {
      if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes)

      let clonedDecl = this.clone(decl);

      let startProp = decl.prop.replace(/end$/, 'start');
      let spanProp = prefix + decl.prop.replace(/end$/, 'span');

      if (decl.parent.some(i => i.prop === spanProp)) {
        return undefined
      }

      clonedDecl.prop = spanProp;

      if (decl.value.includes('span')) {
        clonedDecl.value = decl.value.replace(/span\s/i, '');
      } else {
        let startDecl;
        decl.parent.walkDecls(startProp, d => {
          startDecl = d;
        });
        if (startDecl) {
          let value = Number(decl.value) - Number(startDecl.value) + '';
          clonedDecl.value = value;
        } else {
          decl.warn(
            result,
            `Can not prefix ${decl.prop} (${startProp} is not found)`
          );
        }
      }

      decl.cloneBefore(clonedDecl);

      return undefined
    }
  }

  GridEnd.names = ['grid-row-end', 'grid-column-end'];

  var gridEnd = GridEnd;

  class Animation extends declaration$1 {
    /**
     * Don’t add prefixes for modern values.
     */
    check (decl) {
      return !decl.value.split(/\s+/).some(i => {
        let lower = i.toLowerCase();
        return lower === 'reverse' || lower === 'alternate-reverse'
      })
    }
  }

  Animation.names = ['animation', 'animation-direction'];

  var animation = Animation;

  class FlexFlow extends declaration$1 {
    /**
     * Use two properties for 2009 spec
     */
    insert (decl, prefix, prefixes) {
      let spec
      ;[spec, prefix] = flexSpec(prefix);
      if (spec !== 2009) {
        return super.insert(decl, prefix, prefixes)
      }
      let values = decl.value
        .split(/\s+/)
        .filter(i => i !== 'wrap' && i !== 'nowrap' && 'wrap-reverse');
      if (values.length === 0) {
        return undefined
      }

      let already = decl.parent.some(
        i =>
          i.prop === prefix + 'box-orient' || i.prop === prefix + 'box-direction'
      );
      if (already) {
        return undefined
      }

      let value = values[0];
      let orient = value.includes('row') ? 'horizontal' : 'vertical';
      let dir = value.includes('reverse') ? 'reverse' : 'normal';

      let cloned = this.clone(decl);
      cloned.prop = prefix + 'box-orient';
      cloned.value = orient;
      if (this.needCascade(decl)) {
        cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
      }
      decl.parent.insertBefore(decl, cloned);

      cloned = this.clone(decl);
      cloned.prop = prefix + 'box-direction';
      cloned.value = dir;
      if (this.needCascade(decl)) {
        cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
      }
      return decl.parent.insertBefore(decl, cloned)
    }
  }

  FlexFlow.names = ['flex-flow', 'box-direction', 'box-orient'];

  var flexFlow = FlexFlow;

  class Flex$1 extends declaration$1 {
    /**
     * Return property name by final spec
     */
    normalize () {
      return 'flex'
    }

    /**
     * Return flex property for 2009 and 2012 specs
     */
    prefixed (prop, prefix) {
      let spec
      ;[spec, prefix] = flexSpec(prefix);
      if (spec === 2009) {
        return prefix + 'box-flex'
      }
      if (spec === 2012) {
        return prefix + 'flex-positive'
      }
      return super.prefixed(prop, prefix)
    }
  }

  Flex$1.names = ['flex-grow', 'flex-positive'];

  var flexGrow = Flex$1;

  class FlexWrap extends declaration$1 {
    /**
     * Don't add prefix for 2009 spec
     */
    set (decl, prefix) {
      let spec = flexSpec(prefix)[0];
      if (spec !== 2009) {
        return super.set(decl, prefix)
      }
      return undefined
    }
  }

  FlexWrap.names = ['flex-wrap'];

  var flexWrap = FlexWrap;

  class GridArea extends declaration$1 {
    /**
     * Translate grid-area to separate -ms- prefixed properties
     */
    insert (decl, prefix, prefixes, result) {
      if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes)

      let values = gridUtils.parse(decl);

      let [rowStart, rowSpan] = gridUtils.translate(values, 0, 2);
      let [columnStart, columnSpan] = gridUtils.translate(values, 1, 3)

      ;[
        ['grid-row', rowStart],
        ['grid-row-span', rowSpan],
        ['grid-column', columnStart],
        ['grid-column-span', columnSpan]
      ].forEach(([prop, value]) => {
        gridUtils.insertDecl(decl, prop, value);
      });

      gridUtils.warnTemplateSelectorNotFound(decl, result);
      gridUtils.warnIfGridRowColumnExists(decl, result);

      return undefined
    }
  }

  GridArea.names = ['grid-area'];

  var gridArea = GridArea;

  class PlaceSelf extends declaration$1 {
    /**
     * Translate place-self to separate -ms- prefixed properties
     */
    insert (decl, prefix, prefixes) {
      if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes)

      // prevent doubling of prefixes
      if (decl.parent.some(i => i.prop === '-ms-grid-row-align')) {
        return undefined
      }

      let [[first, second]] = gridUtils.parse(decl);

      if (second) {
        gridUtils.insertDecl(decl, 'grid-row-align', first);
        gridUtils.insertDecl(decl, 'grid-column-align', second);
      } else {
        gridUtils.insertDecl(decl, 'grid-row-align', first);
        gridUtils.insertDecl(decl, 'grid-column-align', first);
      }

      return undefined
    }
  }

  PlaceSelf.names = ['place-self'];

  var placeSelf = PlaceSelf;

  class GridStart extends declaration$1 {
    /**
     * Do not add prefix for unsupported value in IE
     */
    check (decl) {
      let value = decl.value;
      return !value.includes('/') || value.includes('span')
    }

    /**
     * Return a final spec property
     */
    normalize (prop) {
      return prop.replace('-start', '')
    }

    /**
     * Change property name for IE
     */
    prefixed (prop, prefix) {
      let result = super.prefixed(prop, prefix);
      if (prefix === '-ms-') {
        result = result.replace('-start', '');
      }
      return result
    }
  }

  GridStart.names = ['grid-row-start', 'grid-column-start'];

  var gridStart = GridStart;

  class AlignSelf extends declaration$1 {
    check (decl) {
      return (
        decl.parent &&
        !decl.parent.some(i => {
          return i.prop && i.prop.startsWith('grid-')
        })
      )
    }

    /**
     * Change property name for 2012 specs
     */
    prefixed (prop, prefix) {
      let spec
      ;[spec, prefix] = flexSpec(prefix);
      if (spec === 2012) {
        return prefix + 'flex-item-align'
      }
      return super.prefixed(prop, prefix)
    }

    /**
     * Return property name by final spec
     */
    normalize () {
      return 'align-self'
    }

    /**
     * Change value for 2012 spec and ignore prefix for 2009
     */
    set (decl, prefix) {
      let spec = flexSpec(prefix)[0];
      if (spec === 2012) {
        decl.value = AlignSelf.oldValues[decl.value] || decl.value;
        return super.set(decl, prefix)
      }
      if (spec === 'final') {
        return super.set(decl, prefix)
      }
      return undefined
    }
  }

  AlignSelf.names = ['align-self', 'flex-item-align'];

  AlignSelf.oldValues = {
    'flex-end': 'end',
    'flex-start': 'start'
  };

  var alignSelf = AlignSelf;

  class Appearance extends declaration$1 {
    constructor (name, prefixes, all) {
      super(name, prefixes, all);

      if (this.prefixes) {
        this.prefixes = utils.uniq(
          this.prefixes.map(i => {
            if (i === '-ms-') {
              return '-webkit-'
            }
            return i
          })
        );
      }
    }
  }

  Appearance.names = ['appearance'];

  var appearance = Appearance;

  class FlexBasis extends declaration$1 {
    /**
     * Return property name by final spec
     */
    normalize () {
      return 'flex-basis'
    }

    /**
     * Return flex property for 2012 spec
     */
    prefixed (prop, prefix) {
      let spec
      ;[spec, prefix] = flexSpec(prefix);
      if (spec === 2012) {
        return prefix + 'flex-preferred-size'
      }
      return super.prefixed(prop, prefix)
    }

    /**
     * Ignore 2009 spec and use flex property for 2012
     */
    set (decl, prefix) {
      let spec
      ;[spec, prefix] = flexSpec(prefix);
      if (spec === 2012 || spec === 'final') {
        return super.set(decl, prefix)
      }
      return undefined
    }
  }

  FlexBasis.names = ['flex-basis', 'flex-preferred-size'];

  var flexBasis = FlexBasis;

  class MaskBorder extends declaration$1 {
    /**
     * Return property name by final spec
     */
    normalize () {
      return this.name.replace('box-image', 'border')
    }

    /**
     * Return flex property for 2012 spec
     */
    prefixed (prop, prefix) {
      let result = super.prefixed(prop, prefix);
      if (prefix === '-webkit-') {
        result = result.replace('border', 'box-image');
      }
      return result
    }
  }

  MaskBorder.names = [
    'mask-border',
    'mask-border-source',
    'mask-border-slice',
    'mask-border-width',
    'mask-border-outset',
    'mask-border-repeat',
    'mask-box-image',
    'mask-box-image-source',
    'mask-box-image-slice',
    'mask-box-image-width',
    'mask-box-image-outset',
    'mask-box-image-repeat'
  ];

  var maskBorder = MaskBorder;

  class MaskComposite extends declaration$1 {
    /**
     * Prefix mask-composite for webkit
     */
    insert (decl, prefix, prefixes) {
      let isCompositeProp = decl.prop === 'mask-composite';

      let compositeValues;

      if (isCompositeProp) {
        compositeValues = decl.value.split(',');
      } else {
        compositeValues = decl.value.match(MaskComposite.regexp) || [];
      }

      compositeValues = compositeValues.map(el => el.trim()).filter(el => el);
      let hasCompositeValues = compositeValues.length;

      let compositeDecl;

      if (hasCompositeValues) {
        compositeDecl = this.clone(decl);
        compositeDecl.value = compositeValues
          .map(value => MaskComposite.oldValues[value] || value)
          .join(', ');

        if (compositeValues.includes('intersect')) {
          compositeDecl.value += ', xor';
        }

        compositeDecl.prop = prefix + 'mask-composite';
      }

      if (isCompositeProp) {
        if (!hasCompositeValues) {
          return undefined
        }

        if (this.needCascade(decl)) {
          compositeDecl.raws.before = this.calcBefore(prefixes, decl, prefix);
        }

        return decl.parent.insertBefore(decl, compositeDecl)
      }

      let cloned = this.clone(decl);
      cloned.prop = prefix + cloned.prop;

      if (hasCompositeValues) {
        cloned.value = cloned.value.replace(MaskComposite.regexp, '');
      }

      if (this.needCascade(decl)) {
        cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
      }

      decl.parent.insertBefore(decl, cloned);

      if (!hasCompositeValues) {
        return decl
      }

      if (this.needCascade(decl)) {
        compositeDecl.raws.before = this.calcBefore(prefixes, decl, prefix);
      }
      return decl.parent.insertBefore(decl, compositeDecl)
    }
  }

  MaskComposite.names = ['mask', 'mask-composite'];

  MaskComposite.oldValues = {
    add: 'source-over',
    substract: 'source-out',
    intersect: 'source-in',
    exclude: 'xor'
  };

  MaskComposite.regexp = new RegExp(
    `\\s+(${Object.keys(MaskComposite.oldValues).join(
    '|'
  )})\\b(?!\\))\\s*(?=[,])`,
    'ig'
  );

  var maskComposite = MaskComposite;

  class AlignItems extends declaration$1 {
    /**
     * Change property name for 2009 and 2012 specs
     */
    prefixed (prop, prefix) {
      let spec
      ;[spec, prefix] = flexSpec(prefix);
      if (spec === 2009) {
        return prefix + 'box-align'
      }
      if (spec === 2012) {
        return prefix + 'flex-align'
      }
      return super.prefixed(prop, prefix)
    }

    /**
     * Return property name by final spec
     */
    normalize () {
      return 'align-items'
    }

    /**
     * Change value for 2009 and 2012 specs
     */
    set (decl, prefix) {
      let spec = flexSpec(prefix)[0];
      if (spec === 2009 || spec === 2012) {
        decl.value = AlignItems.oldValues[decl.value] || decl.value;
      }
      return super.set(decl, prefix)
    }
  }

  AlignItems.names = ['align-items', 'flex-align', 'box-align'];

  AlignItems.oldValues = {
    'flex-end': 'end',
    'flex-start': 'start'
  };

  var alignItems = AlignItems;

  class UserSelect extends declaration$1 {
    /**
     * Change prefixed value for IE
     */
    set (decl, prefix) {
      if (prefix === '-ms-' && decl.value === 'contain') {
        decl.value = 'element';
      }
      return super.set(decl, prefix)
    }

    /**
     * Avoid prefixing all in IE
     */
    insert (decl, prefix, prefixes) {
      if (decl.value === 'all' && prefix === '-ms-') {
        return undefined
      } else {
        return super.insert(decl, prefix, prefixes)
      }
    }
  }

  UserSelect.names = ['user-select'];

  var userSelect = UserSelect;

  class FlexShrink extends declaration$1 {
    /**
     * Return property name by final spec
     */
    normalize () {
      return 'flex-shrink'
    }

    /**
     * Return flex property for 2012 spec
     */
    prefixed (prop, prefix) {
      let spec
      ;[spec, prefix] = flexSpec(prefix);
      if (spec === 2012) {
        return prefix + 'flex-negative'
      }
      return super.prefixed(prop, prefix)
    }

    /**
     * Ignore 2009 spec and use flex property for 2012
     */
    set (decl, prefix) {
      let spec
      ;[spec, prefix] = flexSpec(prefix);
      if (spec === 2012 || spec === 'final') {
        return super.set(decl, prefix)
      }
      return undefined
    }
  }

  FlexShrink.names = ['flex-shrink', 'flex-negative'];

  var flexShrink = FlexShrink;

  class BreakProps extends declaration$1 {
    /**
     * Change name for -webkit- and -moz- prefix
     */
    prefixed (prop, prefix) {
      return `${prefix}column-${prop}`
    }

    /**
     * Return property name by final spec
     */
    normalize (prop) {
      if (prop.includes('inside')) {
        return 'break-inside'
      }
      if (prop.includes('before')) {
        return 'break-before'
      }
      return 'break-after'
    }

    /**
     * Change prefixed value for avoid-column and avoid-page
     */
    set (decl, prefix) {
      if (
        (decl.prop === 'break-inside' && decl.value === 'avoid-column') ||
        decl.value === 'avoid-page'
      ) {
        decl.value = 'avoid';
      }
      return super.set(decl, prefix)
    }

    /**
     * Don’t prefix some values
     */
    insert (decl, prefix, prefixes) {
      if (decl.prop !== 'break-inside') {
        return super.insert(decl, prefix, prefixes)
      }
      if (/region/i.test(decl.value) || /page/i.test(decl.value)) {
        return undefined
      }
      return super.insert(decl, prefix, prefixes)
    }
  }

  BreakProps.names = [
    'break-inside',
    'page-break-inside',
    'column-break-inside',
    'break-before',
    'page-break-before',
    'column-break-before',
    'break-after',
    'page-break-after',
    'column-break-after'
  ];

  var breakProps = BreakProps;

  class ColorAdjust extends declaration$1 {
    /**
     * Change property name for WebKit-based browsers
     */
    prefixed (prop, prefix) {
      return prefix + 'print-color-adjust'
    }

    /**
     * Return property name by spec
     */
    normalize () {
      return 'color-adjust'
    }
  }

  ColorAdjust.names = ['color-adjust', 'print-color-adjust'];

  var colorAdjust = ColorAdjust;

  class WritingMode extends declaration$1 {
    insert (decl, prefix, prefixes) {
      if (prefix === '-ms-') {
        let cloned = this.set(this.clone(decl), prefix);

        if (this.needCascade(decl)) {
          cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
        }
        let direction = 'ltr';

        decl.parent.nodes.forEach(i => {
          if (i.prop === 'direction') {
            if (i.value === 'rtl' || i.value === 'ltr') direction = i.value;
          }
        });

        cloned.value = WritingMode.msValues[direction][decl.value] || decl.value;
        return decl.parent.insertBefore(decl, cloned)
      }

      return super.insert(decl, prefix, prefixes)
    }
  }

  WritingMode.names = ['writing-mode'];

  WritingMode.msValues = {
    ltr: {
      'horizontal-tb': 'lr-tb',
      'vertical-rl': 'tb-rl',
      'vertical-lr': 'tb-lr'
    },
    rtl: {
      'horizontal-tb': 'rl-tb',
      'vertical-rl': 'bt-rl',
      'vertical-lr': 'bt-lr'
    }
  };

  var writingMode = WritingMode;

  class BorderImage extends declaration$1 {
    /**
     * Remove fill parameter for prefixed declarations
     */
    set (decl, prefix) {
      decl.value = decl.value.replace(/\s+fill(\s)/, '$1');
      return super.set(decl, prefix)
    }
  }

  BorderImage.names = ['border-image'];

  var borderImage$1 = BorderImage;

  class AlignContent extends declaration$1 {
    /**
     * Change property name for 2012 spec
     */
    prefixed (prop, prefix) {
      let spec
      ;[spec, prefix] = flexSpec(prefix);
      if (spec === 2012) {
        return prefix + 'flex-line-pack'
      }
      return super.prefixed(prop, prefix)
    }

    /**
     * Return property name by final spec
     */
    normalize () {
      return 'align-content'
    }

    /**
     * Change value for 2012 spec and ignore prefix for 2009
     */
    set (decl, prefix) {
      let spec = flexSpec(prefix)[0];
      if (spec === 2012) {
        decl.value = AlignContent.oldValues[decl.value] || decl.value;
        return super.set(decl, prefix)
      }
      if (spec === 'final') {
        return super.set(decl, prefix)
      }
      return undefined
    }
  }

  AlignContent.names = ['align-content', 'flex-line-pack'];

  AlignContent.oldValues = {
    'flex-end': 'end',
    'flex-start': 'start',
    'space-between': 'justify',
    'space-around': 'distribute'
  };

  var alignContent = AlignContent;

  class BorderRadius extends declaration$1 {
    /**
     * Change syntax, when add Mozilla prefix
     */
    prefixed (prop, prefix) {
      if (prefix === '-moz-') {
        return prefix + (BorderRadius.toMozilla[prop] || prop)
      }
      return super.prefixed(prop, prefix)
    }

    /**
     * Return unprefixed version of property
     */
    normalize (prop) {
      return BorderRadius.toNormal[prop] || prop
    }
  }

  BorderRadius.names = ['border-radius'];

  BorderRadius.toMozilla = {};
  BorderRadius.toNormal = {};

  for (let ver of ['top', 'bottom']) {
    for (let hor of ['left', 'right']) {
      let normal = `border-${ver}-${hor}-radius`;
      let mozilla = `border-radius-${ver}${hor}`;

      BorderRadius.names.push(normal);
      BorderRadius.names.push(mozilla);

      BorderRadius.toMozilla[normal] = mozilla;
      BorderRadius.toNormal[mozilla] = normal;
    }
  }

  var borderRadius$1 = BorderRadius;

  class BlockLogical extends declaration$1 {
    /**
     * Use old syntax for -moz- and -webkit-
     */
    prefixed (prop, prefix) {
      if (prop.includes('-start')) {
        return prefix + prop.replace('-block-start', '-before')
      }
      return prefix + prop.replace('-block-end', '-after')
    }

    /**
     * Return property name by spec
     */
    normalize (prop) {
      if (prop.includes('-before')) {
        return prop.replace('-before', '-block-start')
      }
      return prop.replace('-after', '-block-end')
    }
  }

  BlockLogical.names = [
    'border-block-start',
    'border-block-end',
    'margin-block-start',
    'margin-block-end',
    'padding-block-start',
    'padding-block-end',
    'border-before',
    'border-after',
    'margin-before',
    'margin-after',
    'padding-before',
    'padding-after'
  ];

  var blockLogical = BlockLogical;

  let {
    parseTemplate: parseTemplate$1,
    warnMissedAreas: warnMissedAreas$1,
    getGridGap: getGridGap$1,
    warnGridGap: warnGridGap$1,
    inheritGridGap: inheritGridGap$1
  } = gridUtils;

  class GridTemplate extends declaration$1 {
    /**
     * Translate grid-template to separate -ms- prefixed properties
     */
    insert (decl, prefix, prefixes, result) {
      if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes)

      if (decl.parent.some(i => i.prop === '-ms-grid-rows')) {
        return undefined
      }

      let gap = getGridGap$1(decl);

      /**
       * we must insert inherited gap values in some cases:
       * if we are inside media query && if we have no grid-gap value
       */
      let inheritedGap = inheritGridGap$1(decl, gap);

      let { rows, columns, areas } = parseTemplate$1({
        decl,
        gap: inheritedGap || gap
      });

      let hasAreas = Object.keys(areas).length > 0;
      let hasRows = Boolean(rows);
      let hasColumns = Boolean(columns);

      warnGridGap$1({
        gap,
        hasColumns,
        decl,
        result
      });

      warnMissedAreas$1(areas, decl, result);

      if ((hasRows && hasColumns) || hasAreas) {
        decl.cloneBefore({
          prop: '-ms-grid-rows',
          value: rows,
          raws: {}
        });
      }

      if (hasColumns) {
        decl.cloneBefore({
          prop: '-ms-grid-columns',
          value: columns,
          raws: {}
        });
      }

      return decl
    }
  }

  GridTemplate.names = ['grid-template'];

  var gridTemplate = GridTemplate;

  class InlineLogical extends declaration$1 {
    /**
     * Use old syntax for -moz- and -webkit-
     */
    prefixed (prop, prefix) {
      return prefix + prop.replace('-inline', '')
    }

    /**
     * Return property name by spec
     */
    normalize (prop) {
      return prop.replace(/(margin|padding|border)-(start|end)/, '$1-inline-$2')
    }
  }

  InlineLogical.names = [
    'border-inline-start',
    'border-inline-end',
    'margin-inline-start',
    'margin-inline-end',
    'padding-inline-start',
    'padding-inline-end',
    'border-start',
    'border-end',
    'margin-start',
    'margin-end',
    'padding-start',
    'padding-end'
  ];

  var inlineLogical = InlineLogical;

  class GridRowAlign extends declaration$1 {
    /**
     * Do not prefix flexbox values
     */
    check (decl) {
      return !decl.value.includes('flex-') && decl.value !== 'baseline'
    }

    /**
     * Change property name for IE
     */
    prefixed (prop, prefix) {
      return prefix + 'grid-row-align'
    }

    /**
     * Change IE property back
     */
    normalize () {
      return 'align-self'
    }
  }

  GridRowAlign.names = ['grid-row-align'];

  var gridRowAlign = GridRowAlign;

  class TransformDecl extends declaration$1 {
    /**
     * Recursively check all parents for @keyframes
     */
    keyframeParents (decl) {
      let { parent } = decl;
      while (parent) {
        if (parent.type === 'atrule' && parent.name === 'keyframes') {
          return true
        }
  ({ parent } = parent);
      }
      return false
    }

    /**
     * Is transform contain 3D commands
     */
    contain3d (decl) {
      if (decl.prop === 'transform-origin') {
        return false
      }

      for (let func of TransformDecl.functions3d) {
        if (decl.value.includes(`${func}(`)) {
          return true
        }
      }

      return false
    }

    /**
     * Replace rotateZ to rotate for IE 9
     */
    set (decl, prefix) {
      decl = super.set(decl, prefix);
      if (prefix === '-ms-') {
        decl.value = decl.value.replace(/rotatez/gi, 'rotate');
      }
      return decl
    }

    /**
     * Don't add prefix for IE in keyframes
     */
    insert (decl, prefix, prefixes) {
      if (prefix === '-ms-') {
        if (!this.contain3d(decl) && !this.keyframeParents(decl)) {
          return super.insert(decl, prefix, prefixes)
        }
      } else if (prefix === '-o-') {
        if (!this.contain3d(decl)) {
          return super.insert(decl, prefix, prefixes)
        }
      } else {
        return super.insert(decl, prefix, prefixes)
      }
      return undefined
    }
  }

  TransformDecl.names = ['transform', 'transform-origin'];

  TransformDecl.functions3d = [
    'matrix3d',
    'translate3d',
    'translateZ',
    'scale3d',
    'scaleZ',
    'rotate3d',
    'rotateX',
    'rotateY',
    'perspective'
  ];

  var transformDecl = TransformDecl;

  class FlexDirection extends declaration$1 {
    /**
     * Return property name by final spec
     */
    normalize () {
      return 'flex-direction'
    }

    /**
     * Use two properties for 2009 spec
     */
    insert (decl, prefix, prefixes) {
      let spec
      ;[spec, prefix] = flexSpec(prefix);
      if (spec !== 2009) {
        return super.insert(decl, prefix, prefixes)
      }
      let already = decl.parent.some(
        i =>
          i.prop === prefix + 'box-orient' || i.prop === prefix + 'box-direction'
      );
      if (already) {
        return undefined
      }

      let v = decl.value;
      let orient, dir;
      if (v === 'inherit' || v === 'initial' || v === 'unset') {
        orient = v;
        dir = v;
      } else {
        orient = v.includes('row') ? 'horizontal' : 'vertical';
        dir = v.includes('reverse') ? 'reverse' : 'normal';
      }

      let cloned = this.clone(decl);
      cloned.prop = prefix + 'box-orient';
      cloned.value = orient;
      if (this.needCascade(decl)) {
        cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
      }
      decl.parent.insertBefore(decl, cloned);

      cloned = this.clone(decl);
      cloned.prop = prefix + 'box-direction';
      cloned.value = dir;
      if (this.needCascade(decl)) {
        cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
      }
      return decl.parent.insertBefore(decl, cloned)
    }

    /**
     * Clean two properties for 2009 spec
     */
    old (prop, prefix) {
      let spec
      ;[spec, prefix] = flexSpec(prefix);
      if (spec === 2009) {
        return [prefix + 'box-orient', prefix + 'box-direction']
      } else {
        return super.old(prop, prefix)
      }
    }
  }

  FlexDirection.names = ['flex-direction', 'box-direction', 'box-orient'];

  var flexDirection = FlexDirection;

  class ImageRendering extends declaration$1 {
    /**
     * Add hack only for crisp-edges
     */
    check (decl) {
      return decl.value === 'pixelated'
    }

    /**
     * Change property name for IE
     */
    prefixed (prop, prefix) {
      if (prefix === '-ms-') {
        return '-ms-interpolation-mode'
      }
      return super.prefixed(prop, prefix)
    }

    /**
     * Change property and value for IE
     */
    set (decl, prefix) {
      if (prefix !== '-ms-') return super.set(decl, prefix)
      decl.prop = '-ms-interpolation-mode';
      decl.value = 'nearest-neighbor';
      return decl
    }

    /**
     * Return property name by spec
     */
    normalize () {
      return 'image-rendering'
    }

    /**
     * Warn on old value
     */
    process (node, result) {
      return super.process(node, result)
    }
  }

  ImageRendering.names = ['image-rendering', 'interpolation-mode'];

  var imageRendering = ImageRendering;

  class BackdropFilter extends declaration$1 {
    constructor (name, prefixes, all) {
      super(name, prefixes, all);

      if (this.prefixes) {
        this.prefixes = utils.uniq(
          this.prefixes.map(i => {
            return i === '-ms-' ? '-webkit-' : i
          })
        );
      }
    }
  }

  BackdropFilter.names = ['backdrop-filter'];

  var backdropFilter = BackdropFilter;

  class BackgroundClip extends declaration$1 {
    constructor (name, prefixes, all) {
      super(name, prefixes, all);

      if (this.prefixes) {
        this.prefixes = utils.uniq(
          this.prefixes.map(i => {
            return i === '-ms-' ? '-webkit-' : i
          })
        );
      }
    }

    check (decl) {
      return decl.value.toLowerCase() === 'text'
    }
  }

  BackgroundClip.names = ['background-clip'];

  var backgroundClip = BackgroundClip;

  const BASIC = [
    'none',
    'underline',
    'overline',
    'line-through',
    'blink',
    'inherit',
    'initial',
    'unset'
  ];

  class TextDecoration extends declaration$1 {
    /**
     * Do not add prefixes for basic values.
     */
    check (decl) {
      return decl.value.split(/\s+/).some(i => !BASIC.includes(i))
    }
  }

  TextDecoration.names = ['text-decoration'];

  var textDecoration$1 = TextDecoration;

  class JustifyContent extends declaration$1 {
    /**
     * Change property name for 2009 and 2012 specs
     */
    prefixed (prop, prefix) {
      let spec
      ;[spec, prefix] = flexSpec(prefix);
      if (spec === 2009) {
        return prefix + 'box-pack'
      }
      if (spec === 2012) {
        return prefix + 'flex-pack'
      }
      return super.prefixed(prop, prefix)
    }

    /**
     * Return property name by final spec
     */
    normalize () {
      return 'justify-content'
    }

    /**
     * Change value for 2009 and 2012 specs
     */
    set (decl, prefix) {
      let spec = flexSpec(prefix)[0];
      if (spec === 2009 || spec === 2012) {
        let value = JustifyContent.oldValues[decl.value] || decl.value;
        decl.value = value;
        if (spec !== 2009 || value !== 'distribute') {
          return super.set(decl, prefix)
        }
      } else if (spec === 'final') {
        return super.set(decl, prefix)
      }
      return undefined
    }
  }

  JustifyContent.names = ['justify-content', 'flex-pack', 'box-pack'];

  JustifyContent.oldValues = {
    'flex-end': 'end',
    'flex-start': 'start',
    'space-between': 'justify',
    'space-around': 'distribute'
  };

  var justifyContent = JustifyContent;

  class BackgroundSize extends declaration$1 {
    /**
     * Duplication parameter for -webkit- browsers
     */
    set (decl, prefix) {
      let value = decl.value.toLowerCase();
      if (
        prefix === '-webkit-' &&
        !value.includes(' ') &&
        value !== 'contain' &&
        value !== 'cover'
      ) {
        decl.value = decl.value + ' ' + decl.value;
      }
      return super.set(decl, prefix)
    }
  }

  BackgroundSize.names = ['background-size'];

  var backgroundSize = BackgroundSize;

  class GridRowColumn extends declaration$1 {
    /**
     * Translate grid-row / grid-column to separate -ms- prefixed properties
     */
    insert (decl, prefix, prefixes) {
      if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes)

      let values = gridUtils.parse(decl);
      let [start, span] = gridUtils.translate(values, 0, 1);

      let hasStartValueSpan = values[0] && values[0].includes('span');

      if (hasStartValueSpan) {
        span = values[0].join('').replace(/\D/g, '');
      }
  [
        [decl.prop, start],
        [`${decl.prop}-span`, span]
      ].forEach(([prop, value]) => {
        gridUtils.insertDecl(decl, prop, value);
      });

      return undefined
    }
  }

  GridRowColumn.names = ['grid-row', 'grid-column'];

  var gridRowColumn = GridRowColumn;

  let {
    prefixTrackProp: prefixTrackProp$1,
    prefixTrackValue: prefixTrackValue$1,
    autoplaceGridItems: autoplaceGridItems$1,
    getGridGap: getGridGap$2,
    inheritGridGap: inheritGridGap$2
  } = gridUtils;


  class GridRowsColumns extends declaration$1 {
    /**
     * Change property name for IE
     */
    prefixed (prop, prefix) {
      if (prefix === '-ms-') {
        return prefixTrackProp$1({ prop, prefix })
      }
      return super.prefixed(prop, prefix)
    }

    /**
     * Change IE property back
     */
    normalize (prop) {
      return prop.replace(/^grid-(rows|columns)/, 'grid-template-$1')
    }

    insert (decl, prefix, prefixes, result) {
      if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes)

      let { parent, prop, value } = decl;
      let isRowProp = prop.includes('rows');
      let isColumnProp = prop.includes('columns');

      let hasGridTemplate = parent.some(
        i => i.prop === 'grid-template' || i.prop === 'grid-template-areas'
      );

      /**
       * Not to prefix rows declaration if grid-template(-areas) is present
       */
      if (hasGridTemplate && isRowProp) {
        return false
      }

      let processor = new processor$1({ options: {} });
      let status = processor.gridStatus(parent, result);
      let gap = getGridGap$2(decl);
      gap = inheritGridGap$2(decl, gap) || gap;

      let gapValue = isRowProp ? gap.row : gap.column;

      if ((status === 'no-autoplace' || status === true) && !hasGridTemplate) {
        gapValue = null;
      }

      let prefixValue = prefixTrackValue$1({
        value,
        gap: gapValue
      });

      /**
       * Insert prefixes
       */
      decl.cloneBefore({
        prop: prefixTrackProp$1({ prop, prefix }),
        value: prefixValue
      });

      let autoflow = parent.nodes.find(i => i.prop === 'grid-auto-flow');
      let autoflowValue = 'row';

      if (autoflow && !processor.disabled(autoflow, result)) {
        autoflowValue = autoflow.value.trim();
      }
      if (status === 'autoplace') {
        /**
         * Show warning if grid-template-rows decl is not found
         */
        let rowDecl = parent.nodes.find(i => i.prop === 'grid-template-rows');

        if (!rowDecl && hasGridTemplate) {
          return undefined
        } else if (!rowDecl && !hasGridTemplate) {
          decl.warn(
            result,
            'Autoplacement does not work without grid-template-rows property'
          );
          return undefined
        }

        /**
         * Show warning if grid-template-columns decl is not found
         */
        let columnDecl = parent.nodes.find(i => {
          return i.prop === 'grid-template-columns'
        });
        if (!columnDecl && !hasGridTemplate) {
          decl.warn(
            result,
            'Autoplacement does not work without grid-template-columns property'
          );
        }

        /**
         * Autoplace grid items
         */
        if (isColumnProp && !hasGridTemplate) {
          autoplaceGridItems$1(decl, result, gap, autoflowValue);
        }
      }

      return undefined
    }
  }

  GridRowsColumns.names = [
    'grid-template-rows',
    'grid-template-columns',
    'grid-rows',
    'grid-columns'
  ];

  var gridRowsColumns = GridRowsColumns;

  class GridColumnAlign extends declaration$1 {
    /**
     * Do not prefix flexbox values
     */
    check (decl) {
      return !decl.value.includes('flex-') && decl.value !== 'baseline'
    }

    /**
     * Change property name for IE
     */
    prefixed (prop, prefix) {
      return prefix + 'grid-column-align'
    }

    /**
     * Change IE property back
     */
    normalize () {
      return 'justify-self'
    }
  }

  GridColumnAlign.names = ['grid-column-align'];

  var gridColumnAlign = GridColumnAlign;

  class OverscrollBehavior extends declaration$1 {
    /**
     * Change property name for IE
     */
    prefixed (prop, prefix) {
      return prefix + 'scroll-chaining'
    }

    /**
     * Return property name by spec
     */
    normalize () {
      return 'overscroll-behavior'
    }

    /**
     * Change value for IE
     */
    set (decl, prefix) {
      if (decl.value === 'auto') {
        decl.value = 'chained';
      } else if (decl.value === 'none' || decl.value === 'contain') {
        decl.value = 'none';
      }
      return super.set(decl, prefix)
    }
  }

  OverscrollBehavior.names = ['overscroll-behavior', 'scroll-chaining'];

  var overscrollBehavior = OverscrollBehavior;

  let {
    parseGridAreas: parseGridAreas$1,
    warnMissedAreas: warnMissedAreas$2,
    prefixTrackProp: prefixTrackProp$2,
    prefixTrackValue: prefixTrackValue$2,
    getGridGap: getGridGap$3,
    warnGridGap: warnGridGap$2,
    inheritGridGap: inheritGridGap$3
  } = gridUtils;

  function getGridRows (tpl) {
    return tpl
      .trim()
      .slice(1, -1)
      .split(/["']\s*["']?/g)
  }

  class GridTemplateAreas extends declaration$1 {
    /**
     * Translate grid-template-areas to separate -ms- prefixed properties
     */
    insert (decl, prefix, prefixes, result) {
      if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes)

      let hasColumns = false;
      let hasRows = false;
      let parent = decl.parent;
      let gap = getGridGap$3(decl);
      gap = inheritGridGap$3(decl, gap) || gap;

      // remove already prefixed rows
      // to prevent doubling prefixes
      parent.walkDecls(/-ms-grid-rows/, i => i.remove());

      // add empty tracks to rows
      parent.walkDecls(/grid-template-(rows|columns)/, trackDecl => {
        if (trackDecl.prop === 'grid-template-rows') {
          hasRows = true;
          let { prop, value } = trackDecl;
          trackDecl.cloneBefore({
            prop: prefixTrackProp$2({ prop, prefix }),
            value: prefixTrackValue$2({ value, gap: gap.row })
          });
        } else {
          hasColumns = true;
        }
      });

      let gridRows = getGridRows(decl.value);

      if (hasColumns && !hasRows && gap.row && gridRows.length > 1) {
        decl.cloneBefore({
          prop: '-ms-grid-rows',
          value: prefixTrackValue$2({
            value: `repeat(${gridRows.length}, auto)`,
            gap: gap.row
          }),
          raws: {}
        });
      }

      // warnings
      warnGridGap$2({
        gap,
        hasColumns,
        decl,
        result
      });

      let areas = parseGridAreas$1({
        rows: gridRows,
        gap
      });

      warnMissedAreas$2(areas, decl, result);

      return decl
    }
  }

  GridTemplateAreas.names = ['grid-template-areas'];

  var gridTemplateAreas = GridTemplateAreas;

  class TextEmphasisPosition extends declaration$1 {
    set (decl, prefix) {
      if (prefix === '-webkit-') {
        decl.value = decl.value.replace(/\s*(right|left)\s*/i, '');
      }
      return super.set(decl, prefix)
    }
  }

  TextEmphasisPosition.names = ['text-emphasis-position'];

  var textEmphasisPosition = TextEmphasisPosition;

  class TextDecorationSkipInk extends declaration$1 {
    /**
     * Change prefix for ink value
     */
    set (decl, prefix) {
      if (decl.prop === 'text-decoration-skip-ink' && decl.value === 'auto') {
        decl.prop = prefix + 'text-decoration-skip';
        decl.value = 'ink';
        return decl
      } else {
        return super.set(decl, prefix)
      }
    }
  }

  TextDecorationSkipInk.names = [
    'text-decoration-skip-ink',
    'text-decoration-skip'
  ];

  var textDecorationSkipInk = TextDecorationSkipInk;

  var normalizeRange = {
    wrap: wrapRange,
    limit: limitRange,
    validate: validateRange,
    test: testRange,
    curry: curry,
    name: name
  };

  function wrapRange(min, max, value) {
    var maxLessMin = max - min;
    return ((value - min) % maxLessMin + maxLessMin) % maxLessMin + min;
  }

  function limitRange(min, max, value) {
    return Math.max(min, Math.min(max, value));
  }

  function validateRange(min, max, value, minExclusive, maxExclusive) {
    if (!testRange(min, max, value, minExclusive, maxExclusive)) {
      throw new Error(value + ' is outside of range [' + min + ',' + max + ')');
    }
    return value;
  }

  function testRange(min, max, value, minExclusive, maxExclusive) {
    return !(
         value < min ||
         value > max ||
         (maxExclusive && (value === max)) ||
         (minExclusive && (value === min))
    );
  }

  function name(min, max, minExcl, maxExcl) {
    return (minExcl ? '(' : '[') + min + ',' + max + (maxExcl ? ')' : ']');
  }

  function curry(min, max, minExclusive, maxExclusive) {
    var boundNameFn = name.bind(null, min, max, minExclusive, maxExclusive);
    return {
      wrap: wrapRange.bind(null, min, max),
      limit: limitRange.bind(null, min, max),
      validate: function(value) {
        return validateRange(min, max, value, minExclusive, maxExclusive);
      },
      test: function(value) {
        return testRange(min, max, value, minExclusive, maxExclusive);
      },
      toString: boundNameFn,
      name: boundNameFn
    };
  }

  let IS_DIRECTION = /top|left|right|bottom/gi;

  class Gradient extends value {
    /**
     * Change degrees for webkit prefix
     */
    replace (string, prefix) {
      let ast = lib(string);
      for (let node of ast.nodes) {
        if (node.type === 'function' && node.value === this.name) {
          node.nodes = this.newDirection(node.nodes);
          node.nodes = this.normalize(node.nodes);
          if (prefix === '-webkit- old') {
            let changes = this.oldWebkit(node);
            if (!changes) {
              return false
            }
          } else {
            node.nodes = this.convertDirection(node.nodes);
            node.value = prefix + node.value;
          }
        }
      }
      return ast.toString()
    }

    /**
     * Replace first token
     */
    replaceFirst (params, ...words) {
      let prefix = words.map(i => {
        if (i === ' ') {
          return { type: 'space', value: i }
        }
        return { type: 'word', value: i }
      });
      return prefix.concat(params.slice(1))
    }

    /**
     * Convert angle unit to deg
     */
    normalizeUnit (str, full) {
      let num = parseFloat(str);
      let deg = (num / full) * 360;
      return `${deg}deg`
    }

    /**
     * Normalize angle
     */
    normalize (nodes) {
      if (!nodes[0]) return nodes

      if (/-?\d+(.\d+)?grad/.test(nodes[0].value)) {
        nodes[0].value = this.normalizeUnit(nodes[0].value, 400);
      } else if (/-?\d+(.\d+)?rad/.test(nodes[0].value)) {
        nodes[0].value = this.normalizeUnit(nodes[0].value, 2 * Math.PI);
      } else if (/-?\d+(.\d+)?turn/.test(nodes[0].value)) {
        nodes[0].value = this.normalizeUnit(nodes[0].value, 1);
      } else if (nodes[0].value.includes('deg')) {
        let num = parseFloat(nodes[0].value);
        num = normalizeRange.wrap(0, 360, num);
        nodes[0].value = `${num}deg`;
      }

      if (nodes[0].value === '0deg') {
        nodes = this.replaceFirst(nodes, 'to', ' ', 'top');
      } else if (nodes[0].value === '90deg') {
        nodes = this.replaceFirst(nodes, 'to', ' ', 'right');
      } else if (nodes[0].value === '180deg') {
        nodes = this.replaceFirst(nodes, 'to', ' ', 'bottom');
      } else if (nodes[0].value === '270deg') {
        nodes = this.replaceFirst(nodes, 'to', ' ', 'left');
      }

      return nodes
    }

    /**
     * Replace old direction to new
     */
    newDirection (params) {
      if (params[0].value === 'to') {
        return params
      }
      IS_DIRECTION.lastIndex = 0; // reset search index of global regexp
      if (!IS_DIRECTION.test(params[0].value)) {
        return params
      }

      params.unshift(
        {
          type: 'word',
          value: 'to'
        },
        {
          type: 'space',
          value: ' '
        }
      );

      for (let i = 2; i < params.length; i++) {
        if (params[i].type === 'div') {
          break
        }
        if (params[i].type === 'word') {
          params[i].value = this.revertDirection(params[i].value);
        }
      }

      return params
    }

    /**
     * Look for at word
     */
    isRadial (params) {
      let state = 'before';
      for (let param of params) {
        if (state === 'before' && param.type === 'space') {
          state = 'at';
        } else if (state === 'at' && param.value === 'at') {
          state = 'after';
        } else if (state === 'after' && param.type === 'space') {
          return true
        } else if (param.type === 'div') {
          break
        } else {
          state = 'before';
        }
      }
      return false
    }

    /**
     * Change new direction to old
     */
    convertDirection (params) {
      if (params.length > 0) {
        if (params[0].value === 'to') {
          this.fixDirection(params);
        } else if (params[0].value.includes('deg')) {
          this.fixAngle(params);
        } else if (this.isRadial(params)) {
          this.fixRadial(params);
        }
      }
      return params
    }

    /**
     * Replace `to top left` to `bottom right`
     */
    fixDirection (params) {
      params.splice(0, 2);

      for (let param of params) {
        if (param.type === 'div') {
          break
        }
        if (param.type === 'word') {
          param.value = this.revertDirection(param.value);
        }
      }
    }

    /**
     * Add 90 degrees
     */
    fixAngle (params) {
      let first = params[0].value;
      first = parseFloat(first);
      first = Math.abs(450 - first) % 360;
      first = this.roundFloat(first, 3);
      params[0].value = `${first}deg`;
    }

    /**
     * Fix radial direction syntax
     */
    fixRadial (params) {
      let first = [];
      let second = [];
      let a, b, c, i, next;

      for (i = 0; i < params.length - 2; i++) {
        a = params[i];
        b = params[i + 1];
        c = params[i + 2];
        if (a.type === 'space' && b.value === 'at' && c.type === 'space') {
          next = i + 3;
          break
        } else {
          first.push(a);
        }
      }

      let div;
      for (i = next; i < params.length; i++) {
        if (params[i].type === 'div') {
          div = params[i];
          break
        } else {
          second.push(params[i]);
        }
      }

      params.splice(0, i, ...second, div, ...first);
    }

    revertDirection (word) {
      return Gradient.directions[word.toLowerCase()] || word
    }

    /**
     * Round float and save digits under dot
     */
    roundFloat (float, digits) {
      return parseFloat(float.toFixed(digits))
    }

    /**
     * Convert to old webkit syntax
     */
    oldWebkit (node) {
      let { nodes } = node;
      let string = lib.stringify(node.nodes);

      if (this.name !== 'linear-gradient') {
        return false
      }
      if (nodes[0] && nodes[0].value.includes('deg')) {
        return false
      }
      if (
        string.includes('px') ||
        string.includes('-corner') ||
        string.includes('-side')
      ) {
        return false
      }

      let params = [[]];
      for (let i of nodes) {
        params[params.length - 1].push(i);
        if (i.type === 'div' && i.value === ',') {
          params.push([]);
        }
      }

      this.oldDirection(params);
      this.colorStops(params);

      node.nodes = [];
      for (let param of params) {
        node.nodes = node.nodes.concat(param);
      }

      node.nodes.unshift(
        { type: 'word', value: 'linear' },
        this.cloneDiv(node.nodes)
      );
      node.value = '-webkit-gradient';

      return true
    }

    /**
     * Change direction syntax to old webkit
     */
    oldDirection (params) {
      let div = this.cloneDiv(params[0]);

      if (params[0][0].value !== 'to') {
        return params.unshift([
          { type: 'word', value: Gradient.oldDirections.bottom },
          div
        ])
      } else {
        let words = [];
        for (let node of params[0].slice(2)) {
          if (node.type === 'word') {
            words.push(node.value.toLowerCase());
          }
        }

        words = words.join(' ');
        let old = Gradient.oldDirections[words] || words;

        params[0] = [{ type: 'word', value: old }, div];
        return params[0]
      }
    }

    /**
     * Get div token from exists parameters
     */
    cloneDiv (params) {
      for (let i of params) {
        if (i.type === 'div' && i.value === ',') {
          return i
        }
      }
      return { type: 'div', value: ',', after: ' ' }
    }

    /**
     * Change colors syntax to old webkit
     */
    colorStops (params) {
      let result = [];
      for (let i = 0; i < params.length; i++) {
        let pos;
        let param = params[i];
        let item;
        if (i === 0) {
          continue
        }

        let color = lib.stringify(param[0]);
        if (param[1] && param[1].type === 'word') {
          pos = param[1].value;
        } else if (param[2] && param[2].type === 'word') {
          pos = param[2].value;
        }

        let stop;
        if (i === 1 && (!pos || pos === '0%')) {
          stop = `from(${color})`;
        } else if (i === params.length - 1 && (!pos || pos === '100%')) {
          stop = `to(${color})`;
        } else if (pos) {
          stop = `color-stop(${pos}, ${color})`;
        } else {
          stop = `color-stop(${color})`;
        }

        let div = param[param.length - 1];
        params[i] = [{ type: 'word', value: stop }];
        if (div.type === 'div' && div.value === ',') {
          item = params[i].push(div);
        }
        result.push(item);
      }
      return result
    }

    /**
     * Remove old WebKit gradient too
     */
    old (prefix) {
      if (prefix === '-webkit-') {
        let type = this.name === 'linear-gradient' ? 'linear' : 'radial';
        let string = '-gradient';
        let regexp = utils.regexp(
          `-webkit-(${type}-gradient|gradient\\(\\s*${type})`,
          false
        );

        return new oldValue(this.name, prefix + this.name, string, regexp)
      } else {
        return super.old(prefix)
      }
    }

    /**
     * Do not add non-webkit prefixes for list-style and object
     */
    add (decl, prefix) {
      let p = decl.prop;
      if (p.includes('mask')) {
        if (prefix === '-webkit-' || prefix === '-webkit- old') {
          return super.add(decl, prefix)
        }
      } else if (
        p === 'list-style' ||
        p === 'list-style-image' ||
        p === 'content'
      ) {
        if (prefix === '-webkit-' || prefix === '-webkit- old') {
          return super.add(decl, prefix)
        }
      } else {
        return super.add(decl, prefix)
      }
      return undefined
    }
  }

  Gradient.names = [
    'linear-gradient',
    'repeating-linear-gradient',
    'radial-gradient',
    'repeating-radial-gradient'
  ];

  Gradient.directions = {
    top: 'bottom',
    left: 'right',
    bottom: 'top',
    right: 'left'
  };

  // Direction to replace
  Gradient.oldDirections = {
    'top': 'left bottom, left top',
    'left': 'right top, left top',
    'bottom': 'left top, left bottom',
    'right': 'left top, right top',

    'top right': 'left bottom, right top',
    'top left': 'right bottom, left top',
    'right top': 'left bottom, right top',
    'right bottom': 'left top, right bottom',
    'bottom right': 'left top, right bottom',
    'bottom left': 'right top, left bottom',
    'left top': 'right bottom, left top',
    'left bottom': 'right top, left bottom'
  };

  var gradient = Gradient;

  function regexp (name) {
    return new RegExp(`(^|[\\s,(])(${name}($|[\\s),]))`, 'gi')
  }

  class Intrinsic extends value {
    regexp () {
      if (!this.regexpCache) this.regexpCache = regexp(this.name);
      return this.regexpCache
    }

    isStretch () {
      return (
        this.name === 'stretch' ||
        this.name === 'fill' ||
        this.name === 'fill-available'
      )
    }

    replace (string, prefix) {
      if (prefix === '-moz-' && this.isStretch()) {
        return string.replace(this.regexp(), '$1-moz-available$3')
      }
      if (prefix === '-webkit-' && this.isStretch()) {
        return string.replace(this.regexp(), '$1-webkit-fill-available$3')
      }
      return super.replace(string, prefix)
    }

    old (prefix) {
      let prefixed = prefix + this.name;
      if (this.isStretch()) {
        if (prefix === '-moz-') {
          prefixed = '-moz-available';
        } else if (prefix === '-webkit-') {
          prefixed = '-webkit-fill-available';
        }
      }
      return new oldValue(this.name, prefixed, prefixed, regexp(prefixed))
    }

    add (decl, prefix) {
      if (decl.prop.includes('grid') && prefix !== '-webkit-') {
        return undefined
      }
      return super.add(decl, prefix)
    }
  }

  Intrinsic.names = [
    'max-content',
    'min-content',
    'fit-content',
    'fill',
    'fill-available',
    'stretch'
  ];

  var intrinsic = Intrinsic;

  class Pixelated extends value {
    /**
     * Use non-standard name for WebKit and Firefox
     */
    replace (string, prefix) {
      if (prefix === '-webkit-') {
        return string.replace(this.regexp(), '$1-webkit-optimize-contrast')
      }
      if (prefix === '-moz-') {
        return string.replace(this.regexp(), '$1-moz-crisp-edges')
      }
      return super.replace(string, prefix)
    }

    /**
     * Different name for WebKit and Firefox
     */
    old (prefix) {
      if (prefix === '-webkit-') {
        return new oldValue(this.name, '-webkit-optimize-contrast')
      }
      if (prefix === '-moz-') {
        return new oldValue(this.name, '-moz-crisp-edges')
      }
      return super.old(prefix)
    }
  }

  Pixelated.names = ['pixelated'];

  var pixelated = Pixelated;

  class ImageSet extends value {
    /**
     * Use non-standard name for WebKit and Firefox
     */
    replace (string, prefix) {
      let fixed = super.replace(string, prefix);
      if (prefix === '-webkit-') {
        fixed = fixed.replace(/("[^"]+"|'[^']+')(\s+\d+\w)/gi, 'url($1)$2');
      }
      return fixed
    }
  }

  ImageSet.names = ['image-set'];

  var imageSet = ImageSet;

  let list$6 = postcss_1.list;



  class CrossFade extends value {
    replace (string, prefix) {
      return list$6
        .space(string)
        .map(value => {
          if (value.slice(0, +this.name.length + 1) !== this.name + '(') {
            return value
          }

          let close = value.lastIndexOf(')');
          let after = value.slice(close + 1);
          let args = value.slice(this.name.length + 1, close);

          if (prefix === '-webkit-') {
            let match = args.match(/\d*.?\d+%?/);
            if (match) {
              args = args.slice(match[0].length).trim();
              args += `, ${match[0]}`;
            } else {
              args += ', 0.5';
            }
          }
          return prefix + this.name + '(' + args + ')' + after
        })
        .join(' ')
    }
  }

  CrossFade.names = ['cross-fade'];

  var crossFade = CrossFade;

  class DisplayFlex extends value {
    constructor (name, prefixes) {
      super(name, prefixes);
      if (name === 'display-flex') {
        this.name = 'flex';
      }
    }

    /**
     * Faster check for flex value
     */
    check (decl) {
      return decl.prop === 'display' && decl.value === this.name
    }

    /**
     * Return value by spec
     */
    prefixed (prefix) {
      let spec, value
      ;[spec, prefix] = flexSpec(prefix);

      if (spec === 2009) {
        if (this.name === 'flex') {
          value = 'box';
        } else {
          value = 'inline-box';
        }
      } else if (spec === 2012) {
        if (this.name === 'flex') {
          value = 'flexbox';
        } else {
          value = 'inline-flexbox';
        }
      } else if (spec === 'final') {
        value = this.name;
      }

      return prefix + value
    }

    /**
     * Add prefix to value depend on flebox spec version
     */
    replace (string, prefix) {
      return this.prefixed(prefix)
    }

    /**
     * Change value for old specs
     */
    old (prefix) {
      let prefixed = this.prefixed(prefix);
      if (!prefixed) return undefined
      return new oldValue(this.name, prefixed)
    }
  }

  DisplayFlex.names = ['display-flex', 'inline-flex'];

  var displayFlex = DisplayFlex;

  class DisplayGrid extends value {
    constructor (name, prefixes) {
      super(name, prefixes);
      if (name === 'display-grid') {
        this.name = 'grid';
      }
    }

    /**
     * Faster check for flex value
     */
    check (decl) {
      return decl.prop === 'display' && decl.value === this.name
    }
  }

  DisplayGrid.names = ['display-grid', 'inline-grid'];

  var displayGrid = DisplayGrid;

  class FilterValue extends value {
    constructor (name, prefixes) {
      super(name, prefixes);
      if (name === 'filter-function') {
        this.name = 'filter';
      }
    }
  }

  FilterValue.names = ['filter', 'filter-function'];

  var filterValue = FilterValue;

  selector.hack(fullscreen$1);
  selector.hack(placeholder);
  selector.hack(placeholderShown);
  declaration$1.hack(flex);
  declaration$1.hack(order);
  declaration$1.hack(filter$1);
  declaration$1.hack(gridEnd);
  declaration$1.hack(animation);
  declaration$1.hack(flexFlow);
  declaration$1.hack(flexGrow);
  declaration$1.hack(flexWrap);
  declaration$1.hack(gridArea);
  declaration$1.hack(placeSelf);
  declaration$1.hack(gridStart);
  declaration$1.hack(alignSelf);
  declaration$1.hack(appearance);
  declaration$1.hack(flexBasis);
  declaration$1.hack(maskBorder);
  declaration$1.hack(maskComposite);
  declaration$1.hack(alignItems);
  declaration$1.hack(userSelect);
  declaration$1.hack(flexShrink);
  declaration$1.hack(breakProps);
  declaration$1.hack(colorAdjust);
  declaration$1.hack(writingMode);
  declaration$1.hack(borderImage$1);
  declaration$1.hack(alignContent);
  declaration$1.hack(borderRadius$1);
  declaration$1.hack(blockLogical);
  declaration$1.hack(gridTemplate);
  declaration$1.hack(inlineLogical);
  declaration$1.hack(gridRowAlign);
  declaration$1.hack(transformDecl);
  declaration$1.hack(flexDirection);
  declaration$1.hack(imageRendering);
  declaration$1.hack(backdropFilter);
  declaration$1.hack(backgroundClip);
  declaration$1.hack(textDecoration$1);
  declaration$1.hack(justifyContent);
  declaration$1.hack(backgroundSize);
  declaration$1.hack(gridRowColumn);
  declaration$1.hack(gridRowsColumns);
  declaration$1.hack(gridColumnAlign);
  declaration$1.hack(overscrollBehavior);
  declaration$1.hack(gridTemplateAreas);
  declaration$1.hack(textEmphasisPosition);
  declaration$1.hack(textDecorationSkipInk);
  value.hack(gradient);
  value.hack(intrinsic);
  value.hack(pixelated);
  value.hack(imageSet);
  value.hack(crossFade);
  value.hack(displayFlex);
  value.hack(displayGrid);
  value.hack(filterValue);

  let declsCache = new Map();

  class Prefixes {
    constructor (data, browsers, options = {}) {
      this.data = data;
      this.browsers = browsers;
      this.options = options
      ;[this.add, this.remove] = this.preprocess(this.select(this.data));
      this.transition = new transition(this);
      this.processor = new processor$1(this);
    }

    /**
     * Return clone instance to remove all prefixes
     */
    cleaner () {
      if (this.cleanerCache) {
        return this.cleanerCache
      }

      if (this.browsers.selected.length) {
        let empty = new browsers$1(this.browsers.data, []);
        this.cleanerCache = new Prefixes(this.data, empty, this.options);
      } else {
        return this
      }

      return this.cleanerCache
    }

    /**
     * Select prefixes from data, which is necessary for selected browsers
     */
    select (list) {
      let selected = { add: {}, remove: {} };

      for (let name in list) {
        let data = list[name];
        let add = data.browsers.map(i => {
          let params = i.split(' ');
          return {
            browser: `${params[0]} ${params[1]}`,
            note: params[2]
          }
        });

        let notes = add
          .filter(i => i.note)
          .map(i => `${this.browsers.prefix(i.browser)} ${i.note}`);
        notes = utils.uniq(notes);

        add = add
          .filter(i => this.browsers.isSelected(i.browser))
          .map(i => {
            let prefix = this.browsers.prefix(i.browser);
            if (i.note) {
              return `${prefix} ${i.note}`
            } else {
              return prefix
            }
          });
        add = this.sort(utils.uniq(add));

        if (this.options.flexbox === 'no-2009') {
          add = add.filter(i => !i.includes('2009'));
        }

        let all = data.browsers.map(i => this.browsers.prefix(i));
        if (data.mistakes) {
          all = all.concat(data.mistakes);
        }
        all = all.concat(notes);
        all = utils.uniq(all);

        if (add.length) {
          selected.add[name] = add;
          if (add.length < all.length) {
            selected.remove[name] = all.filter(i => !add.includes(i));
          }
        } else {
          selected.remove[name] = all;
        }
      }

      return selected
    }

    /**
     * Sort vendor prefixes
     */
    sort (prefixes) {
      return prefixes.sort((a, b) => {
        let aLength = utils.removeNote(a).length;
        let bLength = utils.removeNote(b).length;

        if (aLength === bLength) {
          return b.length - a.length
        } else {
          return bLength - aLength
        }
      })
    }

    /**
     * Cache prefixes data to fast CSS processing
     */
    preprocess (selected) {
      let add = {
        'selectors': [],
        '@supports': new supports(Prefixes, this)
      };
      for (let name in selected.add) {
        let prefixes = selected.add[name];
        if (name === '@keyframes' || name === '@viewport') {
          add[name] = new atRule$1(name, prefixes, this);
        } else if (name === '@resolution') {
          add[name] = new resolution(name, prefixes, this);
        } else if (this.data[name].selector) {
          add.selectors.push(selector.load(name, prefixes, this));
        } else {
          let props = this.data[name].props;

          if (props) {
            let value$1 = value.load(name, prefixes, this);
            for (let prop of props) {
              if (!add[prop]) {
                add[prop] = { values: [] };
              }
              add[prop].values.push(value$1);
            }
          } else {
            let values = (add[name] && add[name].values) || [];
            add[name] = declaration$1.load(name, prefixes, this);
            add[name].values = values;
          }
        }
      }

      let remove = { selectors: [] };
      for (let name in selected.remove) {
        let prefixes = selected.remove[name];
        if (this.data[name].selector) {
          let selector$1 = selector.load(name, prefixes);
          for (let prefix of prefixes) {
            remove.selectors.push(selector$1.old(prefix));
          }
        } else if (name === '@keyframes' || name === '@viewport') {
          for (let prefix of prefixes) {
            let prefixed = `@${prefix}${name.slice(1)}`;
            remove[prefixed] = { remove: true };
          }
        } else if (name === '@resolution') {
          remove[name] = new resolution(name, prefixes, this);
        } else {
          let props = this.data[name].props;
          if (props) {
            let value$1 = value.load(name, [], this);
            for (let prefix of prefixes) {
              let old = value$1.old(prefix);
              if (old) {
                for (let prop of props) {
                  if (!remove[prop]) {
                    remove[prop] = {};
                  }
                  if (!remove[prop].values) {
                    remove[prop].values = [];
                  }
                  remove[prop].values.push(old);
                }
              }
            }
          } else {
            for (let p of prefixes) {
              let olds = this.decl(name).old(name, p);
              if (name === 'align-self') {
                let a = add[name] && add[name].prefixes;
                if (a) {
                  if (p === '-webkit- 2009' && a.includes('-webkit-')) {
                    continue
                  } else if (p === '-webkit-' && a.includes('-webkit- 2009')) {
                    continue
                  }
                }
              }
              for (let prefixed of olds) {
                if (!remove[prefixed]) {
                  remove[prefixed] = {};
                }
                remove[prefixed].remove = true;
              }
            }
          }
        }
      }

      return [add, remove]
    }

    /**
     * Declaration loader with caching
     */
    decl (prop) {
      if (!declsCache.has(prop)) {
        declsCache.set(prop, declaration$1.load(prop));
      }

      return declsCache.get(prop)
    }

    /**
     * Return unprefixed version of property
     */
    unprefixed (prop) {
      let value = this.normalize(vendor.unprefixed(prop));
      if (value === 'flex-direction') {
        value = 'flex-flow';
      }
      return value
    }

    /**
     * Normalize prefix for remover
     */
    normalize (prop) {
      return this.decl(prop).normalize(prop)
    }

    /**
     * Return prefixed version of property
     */
    prefixed (prop, prefix) {
      prop = vendor.unprefixed(prop);
      return this.decl(prop).prefixed(prop, prefix)
    }

    /**
     * Return values, which must be prefixed in selected property
     */
    values (type, prop) {
      let data = this[type];

      let global = data['*'] && data['*'].values;
      let values = data[prop] && data[prop].values;

      if (global && values) {
        return utils.uniq(global.concat(values))
      } else {
        return global || values || []
      }
    }

    /**
     * Group declaration by unprefixed property to check them
     */
    group (decl) {
      let rule = decl.parent;
      let index = rule.index(decl);
      let { length } = rule.nodes;
      let unprefixed = this.unprefixed(decl.prop);

      let checker = (step, callback) => {
        index += step;
        while (index >= 0 && index < length) {
          let other = rule.nodes[index];
          if (other.type === 'decl') {
            if (step === -1 && other.prop === unprefixed) {
              if (!browsers$1.withPrefix(other.value)) {
                break
              }
            }

            if (this.unprefixed(other.prop) !== unprefixed) {
              break
            } else if (callback(other) === true) {
              return true
            }

            if (step === +1 && other.prop === unprefixed) {
              if (!browsers$1.withPrefix(other.value)) {
                break
              }
            }
          }

          index += step;
        }
        return false
      };

      return {
        up (callback) {
          return checker(-1, callback)
        },
        down (callback) {
          return checker(+1, callback)
        }
      }
    }
  }

  var prefixes = Prefixes;

  let unpack = unpacker.feature;

  function browsersSort (a, b) {
    a = a.split(' ');
    b = b.split(' ');
    if (a[0] > b[0]) {
      return 1
    } else if (a[0] < b[0]) {
      return -1
    } else {
      return Math.sign(parseFloat(a[1]) - parseFloat(b[1]))
    }
  }

  // Convert Can I Use data
  function f (data, opts, callback) {
    data = unpack(data);

    if (!callback) {
  [callback, opts] = [opts, {}];
    }

    let match = opts.match || /\sx($|\s)/;
    let need = [];

    for (let browser in data.stats) {
      let versions = data.stats[browser];
      for (let version in versions) {
        let support = versions[version];
        if (support.match(match)) {
          need.push(browser + ' ' + version);
        }
      }
    }

    callback(need.sort(browsersSort));
  }

  // Add data for all properties
  let result$1 = {};

  function prefix (names, data) {
    for (let name of names) {
      result$1[name] = Object.assign({}, data);
    }
  }

  function add (names, data) {
    for (let name of names) {
      result$1[name].browsers = result$1[name].browsers
        .concat(data.browsers)
        .sort(browsersSort);
    }
  }

  var prefixes$1 = result$1;

  // Border Radius
  f(borderRadius, browsers =>
    prefix(
      [
        'border-radius',
        'border-top-left-radius',
        'border-top-right-radius',
        'border-bottom-right-radius',
        'border-bottom-left-radius'
      ],
      {
        mistakes: ['-khtml-', '-ms-', '-o-'],
        feature: 'border-radius',
        browsers
      }
    )
  );

  // Box Shadow
  f(cssBoxshadow, browsers =>
    prefix(['box-shadow'], {
      mistakes: ['-khtml-'],
      feature: 'css-boxshadow',
      browsers
    })
  );

  // Animation
  f(cssAnimation, browsers =>
    prefix(
      [
        'animation',
        'animation-name',
        'animation-duration',
        'animation-delay',
        'animation-direction',
        'animation-fill-mode',
        'animation-iteration-count',
        'animation-play-state',
        'animation-timing-function',
        '@keyframes'
      ],
      {
        mistakes: ['-khtml-', '-ms-'],
        feature: 'css-animation',
        browsers
      }
    )
  );

  // Transition
  f(cssTransitions, browsers =>
    prefix(
      [
        'transition',
        'transition-property',
        'transition-duration',
        'transition-delay',
        'transition-timing-function'
      ],
      {
        mistakes: ['-khtml-', '-ms-'],
        browsers,
        feature: 'css-transitions'
      }
    )
  );

  // Transform 2D
  f(transforms2d, browsers =>
    prefix(['transform', 'transform-origin'], {
      feature: 'transforms2d',
      browsers
    })
  );

  // Transform 3D


  f(transforms3d, browsers => {
    prefix(['perspective', 'perspective-origin'], {
      feature: 'transforms3d',
      browsers
    });
    return prefix(['transform-style'], {
      mistakes: ['-ms-', '-o-'],
      browsers,
      feature: 'transforms3d'
    })
  });

  f(transforms3d, { match: /y\sx|y\s#2/ }, browsers =>
    prefix(['backface-visibility'], {
      mistakes: ['-ms-', '-o-'],
      feature: 'transforms3d',
      browsers
    })
  );

  // Gradients


  f(cssGradients, { match: /y\sx/ }, browsers =>
    prefix(
      [
        'linear-gradient',
        'repeating-linear-gradient',
        'radial-gradient',
        'repeating-radial-gradient'
      ],
      {
        props: [
          'background',
          'background-image',
          'border-image',
          'mask',
          'list-style',
          'list-style-image',
          'content',
          'mask-image'
        ],
        mistakes: ['-ms-'],
        feature: 'css-gradients',
        browsers
      }
    )
  );

  f(cssGradients, { match: /a\sx/ }, browsers => {
    browsers = browsers.map(i => {
      if (/firefox|op/.test(i)) {
        return i
      } else {
        return `${i} old`
      }
    });
    return add(
      [
        'linear-gradient',
        'repeating-linear-gradient',
        'radial-gradient',
        'repeating-radial-gradient'
      ],
      {
        feature: 'css-gradients',
        browsers
      }
    )
  });

  // Box sizing
  f(css3Boxsizing, browsers =>
    prefix(['box-sizing'], {
      feature: 'css3-boxsizing',
      browsers
    })
  );

  // Filter Effects
  f(cssFilters, browsers =>
    prefix(['filter'], {
      feature: 'css-filters',
      browsers
    })
  );

  // filter() function
  f(cssFilterFunction, browsers =>
    prefix(['filter-function'], {
      props: [
        'background',
        'background-image',
        'border-image',
        'mask',
        'list-style',
        'list-style-image',
        'content',
        'mask-image'
      ],
      feature: 'css-filter-function',
      browsers
    })
  );

  // Backdrop-filter

  f(cssBackdropFilter, { match: /y\sx|y\s#2/ }, browsers =>
    prefix(['backdrop-filter'], {
      feature: 'css-backdrop-filter',
      browsers
    })
  );

  // element() function
  f(cssElementFunction, browsers =>
    prefix(['element'], {
      props: [
        'background',
        'background-image',
        'border-image',
        'mask',
        'list-style',
        'list-style-image',
        'content',
        'mask-image'
      ],
      feature: 'css-element-function',
      browsers
    })
  );

  // Multicolumns
  f(multicolumn, browsers => {
    prefix(
      [
        'columns',
        'column-width',
        'column-gap',
        'column-rule',
        'column-rule-color',
        'column-rule-width',
        'column-count',
        'column-rule-style',
        'column-span',
        'column-fill'
      ],
      {
        feature: 'multicolumn',
        browsers
      }
    );

    let noff = browsers.filter(i => !/firefox/.test(i));
    prefix(['break-before', 'break-after', 'break-inside'], {
      feature: 'multicolumn',
      browsers: noff
    });
  });

  // User select
  f(userSelectNone, browsers =>
    prefix(['user-select'], {
      mistakes: ['-khtml-'],
      feature: 'user-select-none',
      browsers
    })
  );

  // Flexible Box Layout

  f(flexbox, { match: /a\sx/ }, browsers => {
    browsers = browsers.map(i => {
      if (/ie|firefox/.test(i)) {
        return i
      } else {
        return `${i} 2009`
      }
    });
    prefix(['display-flex', 'inline-flex'], {
      props: ['display'],
      feature: 'flexbox',
      browsers
    });
    prefix(['flex', 'flex-grow', 'flex-shrink', 'flex-basis'], {
      feature: 'flexbox',
      browsers
    });
    prefix(
      [
        'flex-direction',
        'flex-wrap',
        'flex-flow',
        'justify-content',
        'order',
        'align-items',
        'align-self',
        'align-content'
      ],
      {
        feature: 'flexbox',
        browsers
      }
    );
  });

  f(flexbox, { match: /y\sx/ }, browsers => {
    add(['display-flex', 'inline-flex'], {
      feature: 'flexbox',
      browsers
    });
    add(['flex', 'flex-grow', 'flex-shrink', 'flex-basis'], {
      feature: 'flexbox',
      browsers
    });
    add(
      [
        'flex-direction',
        'flex-wrap',
        'flex-flow',
        'justify-content',
        'order',
        'align-items',
        'align-self',
        'align-content'
      ],
      {
        feature: 'flexbox',
        browsers
      }
    );
  });

  // calc() unit
  f(calc, browsers =>
    prefix(['calc'], {
      props: ['*'],
      feature: 'calc',
      browsers
    })
  );

  // Background options
  f(backgroundImgOpts, browsers =>
    prefix(['background-origin', 'background-size'], {
      feature: 'background-img-opts',
      browsers
    })
  );

  // background-clip: text
  f(backgroundClipText, browsers =>
    prefix(['background-clip'], {
      feature: 'background-clip-text',
      browsers
    })
  );

  // Font feature settings
  f(fontFeature, browsers =>
    prefix(
      [
        'font-feature-settings',
        'font-variant-ligatures',
        'font-language-override'
      ],
      {
        feature: 'font-feature',
        browsers
      }
    )
  );

  // CSS font-kerning property
  f(fontKerning, browsers =>
    prefix(['font-kerning'], {
      feature: 'font-kerning',
      browsers
    })
  );

  // Border image
  f(borderImage, browsers =>
    prefix(['border-image'], {
      feature: 'border-image',
      browsers
    })
  );

  // Selection selector
  f(cssSelection, browsers =>
    prefix(['::selection'], {
      selector: true,
      feature: 'css-selection',
      browsers
    })
  );

  // Placeholder selector
  f(cssPlaceholder, browsers => {
    prefix(['::placeholder'], {
      selector: true,
      feature: 'css-placeholder',
      browsers: browsers.concat(['ie 10 old', 'ie 11 old', 'firefox 18 old'])
    });
  });

  // Placeholder-shown selector
  f(cssPlaceholderShown, browsers => {
    prefix([':placeholder-shown'], {
      selector: true,
      feature: 'css-placeholder-shown',
      browsers
    });
  });

  // Hyphenation
  f(cssHyphens, browsers =>
    prefix(['hyphens'], {
      feature: 'css-hyphens',
      browsers
    })
  );

  // Fullscreen selector


  f(fullscreen, browsers =>
    prefix([':fullscreen'], {
      selector: true,
      feature: 'fullscreen',
      browsers
    })
  );

  f(fullscreen, { match: /x(\s#2|$)/ }, browsers =>
    prefix(['::backdrop'], {
      selector: true,
      feature: 'fullscreen',
      browsers
    })
  );

  // Tab size
  f(css3Tabsize, browsers =>
    prefix(['tab-size'], {
      feature: 'css3-tabsize',
      browsers
    })
  );

  // Intrinsic & extrinsic sizing


  let sizeProps = [
    'width',
    'min-width',
    'max-width',
    'height',
    'min-height',
    'max-height',
    'inline-size',
    'min-inline-size',
    'max-inline-size',
    'block-size',
    'min-block-size',
    'max-block-size',
    'grid',
    'grid-template',
    'grid-template-rows',
    'grid-template-columns',
    'grid-auto-columns',
    'grid-auto-rows'
  ];

  f(intrinsicWidth, browsers =>
    prefix(['max-content', 'min-content'], {
      props: sizeProps,
      feature: 'intrinsic-width',
      browsers
    })
  );

  f(intrinsicWidth, { match: /x|\s#4/ }, browsers =>
    prefix(['fill', 'fill-available', 'stretch'], {
      props: sizeProps,
      feature: 'intrinsic-width',
      browsers
    })
  );

  f(intrinsicWidth, { match: /x|\s#5/ }, browsers =>
    prefix(['fit-content'], {
      props: sizeProps,
      feature: 'intrinsic-width',
      browsers
    })
  );

  // Zoom cursors
  f(css3CursorsNewer, browsers =>
    prefix(['zoom-in', 'zoom-out'], {
      props: ['cursor'],
      feature: 'css3-cursors-newer',
      browsers
    })
  );

  // Grab cursors
  f(css3CursorsGrab, browsers =>
    prefix(['grab', 'grabbing'], {
      props: ['cursor'],
      feature: 'css3-cursors-grab',
      browsers
    })
  );

  // Sticky position
  f(cssSticky, browsers =>
    prefix(['sticky'], {
      props: ['position'],
      feature: 'css-sticky',
      browsers
    })
  );

  // Pointer Events
  f(pointer, browsers =>
    prefix(['touch-action'], {
      feature: 'pointer',
      browsers
    })
  );

  // Text decoration


  f(textDecoration, browsers =>
    prefix(
      [
        'text-decoration-style',
        'text-decoration-color',
        'text-decoration-line',
        'text-decoration'
      ],
      {
        feature: 'text-decoration',
        browsers
      }
    )
  );

  f(textDecoration, { match: /x.*#[235]/ }, browsers =>
    prefix(['text-decoration-skip', 'text-decoration-skip-ink'], {
      feature: 'text-decoration',
      browsers
    })
  );

  // Text Size Adjust
  f(textSizeAdjust, browsers =>
    prefix(['text-size-adjust'], {
      feature: 'text-size-adjust',
      browsers
    })
  );

  // CSS Masks
  f(cssMasks, browsers => {
    prefix(
      [
        'mask-clip',
        'mask-composite',
        'mask-image',
        'mask-origin',
        'mask-repeat',
        'mask-border-repeat',
        'mask-border-source'
      ],
      {
        feature: 'css-masks',
        browsers
      }
    );
    prefix(
      [
        'mask',
        'mask-position',
        'mask-size',
        'mask-border',
        'mask-border-outset',
        'mask-border-width',
        'mask-border-slice'
      ],
      {
        feature: 'css-masks',
        browsers
      }
    );
  });

  // CSS clip-path property
  f(cssClipPath, browsers =>
    prefix(['clip-path'], {
      feature: 'css-clip-path',
      browsers
    })
  );

  // Fragmented Borders and Backgrounds
  f(cssBoxdecorationbreak, browsers =>
    prefix(['box-decoration-break'], {
      feature: 'css-boxdecorationbreak',
      browsers
    })
  );

  // CSS3 object-fit/object-position
  f(objectFit, browsers =>
    prefix(['object-fit', 'object-position'], {
      feature: 'object-fit',
      browsers
    })
  );

  // CSS Shapes
  f(cssShapes, browsers =>
    prefix(['shape-margin', 'shape-outside', 'shape-image-threshold'], {
      feature: 'css-shapes',
      browsers
    })
  );

  // CSS3 text-overflow
  f(textOverflow, browsers =>
    prefix(['text-overflow'], {
      feature: 'text-overflow',
      browsers
    })
  );

  // Viewport at-rule
  f(cssDeviceadaptation, browsers =>
    prefix(['@viewport'], {
      feature: 'css-deviceadaptation',
      browsers
    })
  );

  // Resolution Media Queries

  f(cssMediaResolution, { match: /( x($| )|a #2)/ }, browsers =>
    prefix(['@resolution'], {
      feature: 'css-media-resolution',
      browsers
    })
  );

  // CSS text-align-last
  f(cssTextAlignLast, browsers =>
    prefix(['text-align-last'], {
      feature: 'css-text-align-last',
      browsers
    })
  );

  // Crisp Edges Image Rendering Algorithm


  f(cssCrispEdges, { match: /y x|a x #1/ }, browsers =>
    prefix(['pixelated'], {
      props: ['image-rendering'],
      feature: 'css-crisp-edges',
      browsers
    })
  );

  f(cssCrispEdges, { match: /a x #2/ }, browsers =>
    prefix(['image-rendering'], {
      feature: 'css-crisp-edges',
      browsers
    })
  );

  // Logical Properties


  f(cssLogicalProps, browsers =>
    prefix(
      [
        'border-inline-start',
        'border-inline-end',
        'margin-inline-start',
        'margin-inline-end',
        'padding-inline-start',
        'padding-inline-end'
      ],
      {
        feature: 'css-logical-props',
        browsers
      }
    )
  );

  f(cssLogicalProps, { match: /x\s#2/ }, browsers =>
    prefix(
      [
        'border-block-start',
        'border-block-end',
        'margin-block-start',
        'margin-block-end',
        'padding-block-start',
        'padding-block-end'
      ],
      {
        feature: 'css-logical-props',
        browsers
      }
    )
  );

  // CSS appearance

  f(cssAppearance, { match: /#2|x/ }, browsers =>
    prefix(['appearance'], {
      feature: 'css-appearance',
      browsers
    })
  );

  // CSS Scroll snap points
  f(cssSnappoints, browsers =>
    prefix(
      [
        'scroll-snap-type',
        'scroll-snap-coordinate',
        'scroll-snap-destination',
        'scroll-snap-points-x',
        'scroll-snap-points-y'
      ],
      {
        feature: 'css-snappoints',
        browsers
      }
    )
  );

  // CSS Regions
  f(cssRegions, browsers =>
    prefix(['flow-into', 'flow-from', 'region-fragment'], {
      feature: 'css-regions',
      browsers
    })
  );

  // CSS image-set
  f(cssImageSet, browsers =>
    prefix(['image-set'], {
      props: [
        'background',
        'background-image',
        'border-image',
        'cursor',
        'mask',
        'mask-image',
        'list-style',
        'list-style-image',
        'content'
      ],
      feature: 'css-image-set',
      browsers
    })
  );

  // Writing Mode

  f(cssWritingMode, { match: /a|x/ }, browsers =>
    prefix(['writing-mode'], {
      feature: 'css-writing-mode',
      browsers
    })
  );

  // Cross-Fade Function
  f(cssCrossFade, browsers =>
    prefix(['cross-fade'], {
      props: [
        'background',
        'background-image',
        'border-image',
        'mask',
        'list-style',
        'list-style-image',
        'content',
        'mask-image'
      ],
      feature: 'css-cross-fade',
      browsers
    })
  );

  // Read Only selector
  f(cssReadOnlyWrite, browsers =>
    prefix([':read-only', ':read-write'], {
      selector: true,
      feature: 'css-read-only-write',
      browsers
    })
  );

  // Text Emphasize
  f(textEmphasis, browsers =>
    prefix(
      [
        'text-emphasis',
        'text-emphasis-position',
        'text-emphasis-style',
        'text-emphasis-color'
      ],
      {
        feature: 'text-emphasis',
        browsers
      }
    )
  );

  // CSS Grid Layout


  f(cssGrid, browsers => {
    prefix(['display-grid', 'inline-grid'], {
      props: ['display'],
      feature: 'css-grid',
      browsers
    });
    prefix(
      [
        'grid-template-columns',
        'grid-template-rows',
        'grid-row-start',
        'grid-column-start',
        'grid-row-end',
        'grid-column-end',
        'grid-row',
        'grid-column',
        'grid-area',
        'grid-template',
        'grid-template-areas',
        'place-self'
      ],
      {
        feature: 'css-grid',
        browsers
      }
    );
  });

  f(cssGrid, { match: /a x/ }, browsers =>
    prefix(['grid-column-align', 'grid-row-align'], {
      feature: 'css-grid',
      browsers
    })
  );

  // CSS text-spacing
  f(cssTextSpacing, browsers =>
    prefix(['text-spacing'], {
      feature: 'css-text-spacing',
      browsers
    })
  );

  // :any-link selector
  f(cssAnyLink, browsers =>
    prefix([':any-link'], {
      selector: true,
      feature: 'css-any-link',
      browsers
    })
  );

  // unicode-bidi


  f(cssUnicodeBidi, browsers =>
    prefix(['isolate'], {
      props: ['unicode-bidi'],
      feature: 'css-unicode-bidi',
      browsers
    })
  );

  f(cssUnicodeBidi, { match: /y x|a x #2/ }, browsers =>
    prefix(['plaintext'], {
      props: ['unicode-bidi'],
      feature: 'css-unicode-bidi',
      browsers
    })
  );

  f(cssUnicodeBidi, { match: /y x/ }, browsers =>
    prefix(['isolate-override'], {
      props: ['unicode-bidi'],
      feature: 'css-unicode-bidi',
      browsers
    })
  );

  // overscroll-behavior selector

  f(cssOverscrollBehavior, { match: /a #1/ }, browsers =>
    prefix(['overscroll-behavior'], {
      feature: 'css-overscroll-behavior',
      browsers
    })
  );

  // color-adjust
  f(cssColorAdjust, browsers =>
    prefix(['color-adjust'], {
      feature: 'css-color-adjust',
      browsers
    })
  );

  // text-orientation
  f(cssTextOrientation, browsers =>
    prefix(['text-orientation'], {
      feature: 'css-text-orientation',
      browsers
    })
  );

  function capitalize$1 (str) {
    return str.slice(0, 1).toUpperCase() + str.slice(1)
  }

  const NAMES = {
    ie: 'IE',
    ie_mob: 'IE Mobile',
    ios_saf: 'iOS',
    op_mini: 'Opera Mini',
    op_mob: 'Opera Mobile',
    and_chr: 'Chrome for Android',
    and_ff: 'Firefox for Android',
    and_uc: 'UC for Android'
  };

  function prefix$1 (name, prefixes, note) {
    let out = `  ${name}`;
    if (note) out += ' *';
    out += ': ';
    out += prefixes.map(i => i.replace(/^-(.*)-$/g, '$1')).join(', ');
    out += '\n';
    return out
  }

  var info = function (prefixes) {
    if (prefixes.browsers.selected.length === 0) {
      return 'No browsers selected'
    }

    let versions = {};
    for (let browser of prefixes.browsers.selected) {
      let parts = browser.split(' ');
      let name = parts[0];
      let version = parts[1];

      name = NAMES[name] || capitalize$1(name);
      if (versions[name]) {
        versions[name].push(version);
      } else {
        versions[name] = [version];
      }
    }

    let out = 'Browsers:\n';
    for (let browser in versions) {
      let list = versions[browser];
      list = list.sort((a, b) => parseFloat(b) - parseFloat(a));
      out += `  ${browser}: ${list.join(', ')}\n`;
    }

    let coverage = browserslist_1.coverage(prefixes.browsers.selected);
    let round = Math.round(coverage * 100) / 100.0;
    out += `\nThese browsers account for ${round}% of all users globally\n`;

    let atrules = [];
    for (let name in prefixes.add) {
      let data = prefixes.add[name];
      if (name[0] === '@' && data.prefixes) {
        atrules.push(prefix$1(name, data.prefixes));
      }
    }
    if (atrules.length > 0) {
      out += `\nAt-Rules:\n${atrules.sort().join('')}`;
    }

    let selectors = [];
    for (let selector of prefixes.add.selectors) {
      if (selector.prefixes) {
        selectors.push(prefix$1(selector.name, selector.prefixes));
      }
    }
    if (selectors.length > 0) {
      out += `\nSelectors:\n${selectors.sort().join('')}`;
    }

    let values = [];
    let props = [];
    let hadGrid = false;
    for (let name in prefixes.add) {
      let data = prefixes.add[name];
      if (name[0] !== '@' && data.prefixes) {
        let grid = name.indexOf('grid-') === 0;
        if (grid) hadGrid = true;
        props.push(prefix$1(name, data.prefixes, grid));
      }

      if (!Array.isArray(data.values)) {
        continue
      }
      for (let value of data.values) {
        let grid = value.name.includes('grid');
        if (grid) hadGrid = true;
        let string = prefix$1(value.name, value.prefixes, grid);
        if (!values.includes(string)) {
          values.push(string);
        }
      }
    }

    if (props.length > 0) {
      out += `\nProperties:\n${props.sort().join('')}`;
    }
    if (values.length > 0) {
      out += `\nValues:\n${values.sort().join('')}`;
    }
    if (hadGrid) {
      out += '\n* - Prefixes will be added only on grid: true option.\n';
    }

    if (!atrules.length && !selectors.length && !props.length && !values.length) {
      out +=
        "\nAwesome! Your browsers don't require any vendor prefixes." +
        '\nNow you can remove Autoprefixer from build steps.';
    }

    return out
  };

  var autoprefixer = createCommonjsModule(function (module) {
  let { agents } = unpacker;







  const WARNING =
    '\n' +
    '  Replace Autoprefixer `browsers` option to Browserslist config.\n' +
    '  Use `browserslist` key in `package.json` or `.browserslistrc` file.\n' +
    '\n' +
    '  Using `browsers` option can cause errors. Browserslist config can\n' +
    '  be used for Babel, Autoprefixer, postcss-normalize and other tools.\n' +
    '\n' +
    '  If you really need to use option, rename it to `overrideBrowserslist`.\n' +
    '\n' +
    '  Learn more at:\n' +
    '  https://github.com/browserslist/browserslist#readme\n' +
    '  https://twitter.com/browserslist\n' +
    '\n';

  function isPlainObject (obj) {
    return Object.prototype.toString.apply(obj) === '[object Object]'
  }

  let cache = new Map();

  function timeCapsule (result, prefixes) {
    if (prefixes.browsers.selected.length === 0) {
      return
    }
    if (prefixes.add.selectors.length > 0) {
      return
    }
    if (Object.keys(prefixes.add).length > 2) {
      return
    }

    /* istanbul ignore next */
    result.warn(
      'Greetings, time traveller. ' +
        'We are in the golden age of prefix-less CSS, ' +
        'where Autoprefixer is no longer needed for your stylesheet.'
    );
  }

  module.exports = (...reqs) => {
    let options;
    if (reqs.length === 1 && isPlainObject(reqs[0])) {
      options = reqs[0];
      reqs = undefined;
    } else if (reqs.length === 0 || (reqs.length === 1 && !reqs[0])) {
      reqs = undefined;
    } else if (reqs.length <= 2 && (Array.isArray(reqs[0]) || !reqs[0])) {
      options = reqs[1];
      reqs = reqs[0];
    } else if (typeof reqs[reqs.length - 1] === 'object') {
      options = reqs.pop();
    }

    if (!options) {
      options = {};
    }

    if (options.browser) {
      throw new Error(
        'Change `browser` option to `overrideBrowserslist` in Autoprefixer'
      )
    } else if (options.browserslist) {
      throw new Error(
        'Change `browserslist` option to `overrideBrowserslist` in Autoprefixer'
      )
    }

    if (options.overrideBrowserslist) {
      reqs = options.overrideBrowserslist;
    } else if (options.browsers) {
      if (typeof console !== 'undefined' && console.warn) {
        if (colorette.red) {
          console.warn(
            colorette.red(
              WARNING.replace(/`[^`]+`/g, i => colorette.yellow(i.slice(1, -1)))
            )
          );
        } else {
          console.warn(WARNING);
        }
      }
      reqs = options.browsers;
    }

    let brwlstOpts = {
      ignoreUnknownVersions: options.ignoreUnknownVersions,
      stats: options.stats,
      env: options.env
    };

    function loadPrefixes (opts) {
      let d = module.exports.data;
      let browsers = new browsers$1(d.browsers, reqs, opts, brwlstOpts);
      let key = browsers.selected.join(', ') + JSON.stringify(options);

      if (!cache.has(key)) {
        cache.set(key, new prefixes(d.prefixes, browsers, options));
      }

      return cache.get(key)
    }

    return {
      postcssPlugin: 'autoprefixer',

      prepare (result) {
        let prefixes = loadPrefixes({
          from: result.opts.from,
          env: options.env
        });

        return {
          Once (root) {
            timeCapsule(result, prefixes);
            if (options.remove !== false) {
              prefixes.processor.remove(root, result);
            }
            if (options.add !== false) {
              prefixes.processor.add(root, result);
            }
          }
        }
      },

      info (opts) {
        opts = opts || {};
        opts.from = opts.from || browser$1.cwd();
        return info(loadPrefixes(opts))
      },

      options,
      browsers: reqs
    }
  };

  module.exports.postcss = true;

  /**
   * Autoprefixer data
   */
  module.exports.data = { browsers: agents, prefixes: prefixes$1 };

  /**
   * Autoprefixer default browsers
   */
  module.exports.defaults = browserslist_1.defaults;

  /**
   * Inspect with default Autoprefixer
   */
  module.exports.info = () => module.exports().info();
  });

  var autoprefixer$1 = {
    process: (css, processOptions, pluginOptions) => {
      // execjs does not support passing callback from ruby,
      // which makes waiting for the promise to settle from async function impossible
      var result = postcss_1([autoprefixer(pluginOptions)]).process(css, processOptions);

      var warns  = result.warnings().map(function (i) {
        delete i.plugin;
        return i/*AH-.toString()*/
      });

      var map = result.map ? result.map.toString() : null;
      return  { css: result.css, map: map, warnings: warns }
    },

    info: (options) => {
      return autoprefixer(options).info()
    }
  };

  return autoprefixer$1;

}(CountryStatisticsService /*AH+*/));